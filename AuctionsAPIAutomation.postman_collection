{
	"info": {
		"_postman_id": "41576c43-b9f6-4b0f-9588-6f6684add4a7",
		"name": "Auctions API Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Generate Authorization Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4788433-cb26-465b-898d-8936e2538051",
								"exec": [
									"tests[\"Status Code is 302\"] = responseCode.code === 302;",
									"",
									"if(responseCode.code === 302) {",
									"    ",
									"    try{",
									"        var headers = JSON.stringify(pm.response.headers);",
									"        console.log(JSON.parse(headers)[5].value)",
									"        var location= JSON.parse(headers)[5].value;",
									"        ",
									"        var array = location.split(\"&\");",
									"        var codewithname = array[1];",
									"        var authcode = codewithname.replace(\"code=\", \"\");",
									"        console.log(authcode)",
									"        postman.setEnvironmentVariable(\"authcode\", authcode);",
									"    }",
									"    catch(e){",
									"        console.log(e);",
									"    }",
									"        ",
									"}",
									"",
									"const cookies = pm.response.headers.all().filter(headerObj => headerObj.key === 'Set-Cookie').map(headerObj => headerObj.value);",
									"pm.environment.set('cookies', cookies.join(';'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "accounts.google.com",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://accounts.google.com/o/oauth2/auth?redirect_uri=https://btauctionsapitest.azurewebsites.net/signin-google&response_type=code&client_id=428141001855-3g8f9a9s41s278ifi5dqq4ikc0vk7sjk.apps.googleusercontent.com&authuser=1&hd=barfoot.co.nz&state=2&callback_url=https://www.getpostman.com/oauth2/callback&scope=openid+email+https://www.googleapis.com/auth/plus.me+https://www.googleapis.com/auth/userinfo.email",
							"protocol": "https",
							"host": [
								"accounts",
								"google",
								"com"
							],
							"path": [
								"o",
								"oauth2",
								"auth"
							],
							"query": [
								{
									"key": "redirect_uri",
									"value": "https://btauctionsapitest.azurewebsites.net/signin-google"
								},
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "authuser",
									"value": "1"
								},
								{
									"key": "hd",
									"value": "barfoot.co.nz"
								},
								{
									"key": "state",
									"value": "2"
								},
								{
									"key": "callback_url",
									"value": "https://www.getpostman.com/oauth2/callback"
								},
								{
									"key": "scope",
									"value": "openid+email+https://www.googleapis.com/auth/plus.me+https://www.googleapis.com/auth/userinfo.email"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ID Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5dd3b528-1baf-41ef-bd5f-9a751cbbae33",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "50c1142e-d7e2-4369-96e6-1edff7502c6c",
								"exec": [
									"tests[\"Status Code is 200\"] = responseCode.code === 200;",
									"",
									"if(responseCode.code === 200) {",
									"    ",
									"    try{",
									"        var result = JSON.parse(responseBody);",
									"        var newIdToken = result.id_token;",
									"    }",
									"    catch(e){",
									"        console.log(e);",
									"    }",
									"    postman.setEnvironmentVariable(\"id_token\", newIdToken);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"value": "Basic NDI4MTQxMDAxODU1LTNnOGY5YTlzNDFzMjc4aWZpNWRxcTRpa2Mwdms3c2prLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tOnRyMVdfNWRiMkpobkNtd0pTZGJrWW1zUg=="
							},
							{
								"key": "Host",
								"value": "accounts.google.com"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{email}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{authcode}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "https://btauctionsapitest.azurewebsites.net/signin-google",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://accounts.google.com/o/oauth2/token",
							"protocol": "https",
							"host": [
								"accounts",
								"google",
								"com"
							],
							"path": [
								"o",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts - Valid ID Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5dd3b528-1baf-41ef-bd5f-9a751cbbae33",
								"exec": [
									"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
									"    let utils = {};",
									"    utils.responseStatusCode = function responseStatusCode(statusCode)  {",
									"        pm.test(\"Status code is \"+statusCode, function () {pm.response.to.have.status(statusCode);});",
									"    }",
									"    ",
									"    utils.headerElementPresent = function headerElementPresent(element)  {",
									"        pm.test(\"Header element \"+element+\" is present\", function () {pm.response.to.have.status(element);});",
									"    }",
									"    ",
									"    utils.responseLessThan = function responseLessThan(duration)  {",
									"        pm.test(\"Response time is less than \"+duration+\" ms\", function () {pm.expect(pm.response.responseTime).to.be.below(duration);});",
									"    }",
									"    ",
									"    utils.responseHasBody = function responseHasBody() {",
									"        pm.response.to.be.withBody;",
									"    }",
									"    ",
									"    return utils;",
									"} + '; loadUtils();');",
									"",
									"tests['Utils initialized'] = true;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "033bca80-b249-43af-a95b-79eef59dc8ab",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"//Correct Status Code",
									"utils.responseStatusCode(200);",
									"",
									"//Content Type is Present",
									"utils.headerElementPresent(\"OK\");;",
									"",
									"//Response time is less than 3000ms",
									"utils.responseLessThan(3000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{id_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "{{grant_type}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{environment}}/api/v1/Accounts",
							"host": [
								"{{environment}}"
							],
							"path": [
								"api",
								"v1",
								"Accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts - Expired ID Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5dd3b528-1baf-41ef-bd5f-9a751cbbae33",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "76aa3bc8-a387-4b00-b0f7-8e92d45c68d3",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"//Correct Status Code",
									"utils.responseStatusCode(401);",
									"",
									"//Content Type is Present",
									"utils.headerElementPresent(\"Unauthorized\");;",
									"",
									"//Response time is less than 3000ms",
									"utils.responseLessThan(3000);",
									"",
									"//WWW-Authenticate Header-> Bearer Error is Present",
									"pm.test(\"Bearer Error is present\", function () {",
									"    pm.response.to.have.header(\"WWW-Authenticate\", 'Bearer error=\"invalid_token\"');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{expired_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "{{grant_type}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{environment}}/api/v1/Accounts",
							"host": [
								"{{environment}}"
							],
							"path": [
								"api",
								"v1",
								"Accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts - Invalid ID Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5dd3b528-1baf-41ef-bd5f-9a751cbbae33",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2f1f9c7e-9bdd-495b-bbf1-9a898aa859a6",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"//Correct Status Code",
									"utils.responseStatusCode(401);",
									"",
									"//Content Type is Present",
									"utils.headerElementPresent(\"Unauthorized\");;",
									"",
									"//Response time is less than 3000ms",
									"utils.responseLessThan(3000);",
									"",
									"//WWW-Authenticate Header-> Bearer Error is Present",
									"pm.test(\"Bearer Error is present\", function () {",
									"    pm.response.to.have.header(\"WWW-Authenticate\", 'Bearer error=\"invalid_token\"');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{invalid_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "{{grant_type}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{environment}}/api/v1/Accounts",
							"host": [
								"{{environment}}"
							],
							"path": [
								"api",
								"v1",
								"Accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts - No Authorization Header",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5dd3b528-1baf-41ef-bd5f-9a751cbbae33",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9c358fb-bb6d-47c6-90cc-6c3dd840b5b6",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"//Correct Status Code",
									"utils.responseStatusCode(401);",
									"",
									"//Content Type is Present",
									"utils.headerElementPresent(\"Unauthorized\");;",
									"",
									"//Response time is less than 3000ms",
									"utils.responseLessThan(3000);",
									"",
									"//WWW-Authenticate Header-> Bearer Error is Present",
									"pm.test(\"Bearer Error is present\", function () {",
									"    pm.response.to.have.header(\"WWW-Authenticate\", 'Bearer');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "{{grant_type}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{environment}}/api/v1/Accounts",
							"host": [
								"{{environment}}"
							],
							"path": [
								"api",
								"v1",
								"Accounts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Venue",
			"item": [
				{
					"name": "Post Venue Tests",
					"item": [
						{
							"name": "Post Venue - Valid Request - All Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f7d1fe0-e368-49c0-b229-92ce7456aca9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//Store the Venue ID for the other tests",
											"postman.setGlobalVariable(\"venueId\", jsonData.venueId);",
											"",
											"//Venue ID has a value",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId !== undefined;",
											"",
											"//Response body contains \"Name\" Entity",
											"tests[\"Response body includes Name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"name\");",
											"",
											"//Response body contains \"Street\" Entity",
											"tests[\"Response body includes Street entity from JSON data\"] = jsonData.street == postman.getEnvironmentVariable(\"street\");",
											"",
											"//Response body contains \"Suburb\" Entity",
											"tests[\"Response body includes Suburb entity from JSON data\"] = jsonData.suburb == postman.getEnvironmentVariable(\"suburb\");",
											"",
											"//Response body contains \"Region\" Entity",
											"tests[\"Response body includes Region entity from JSON data\"] = jsonData.region == postman.getEnvironmentVariable(\"region\");",
											"",
											"//Response body contains \"On Site\" Entity",
											"tests[\"Response body includes On Site entity from JSON data\"] = jsonData.onSite === false;",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "054dea75-f67b-4ad8-a87d-941473718e98",
										"exec": [
											"",
											"",
											"",
											"postman.setEnvironmentVariable(\"name\", \"Venue Name \" + _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"street\", \"Venue Street \" + _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"suburb\", \"Venue Suburb \" + _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"region\", \"Venue Region \" + _.random(1, 10000000));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"street\": \"{{street}}\",\r\n  \"suburb\": \"{{suburb}}\",\r\n  \"region\": \"{{region}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Venue - Invalid Request - Missing Name Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1b5de4b-99cd-4a73-a67f-bb91389069a3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Venue Name was not provided\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "69705e10-2880-4664-8765-210eb4d4ad16",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"street\": \"{{street}}\",\r\n  \"suburb\": \"{{suburb}}\",\r\n  \"region\": \"{{region}}\",\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Venue - Invalid Request - Name Parameter has a null value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dfc644cd-4c78-48ad-8088-4b29257d6938",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Venue Name was not provided\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "51af147f-27e3-42eb-8d80-933210fb451a",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"street\": \"{{street}}\",\r\n  \"suburb\": \"{{suburb}}\",\r\n  \"region\": \"{{region}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Venue - Invalid Request - Name Parameter has a blank value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8176785-5c18-4d44-842e-feb1069a706a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Venue Name was not provided\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "300824a3-77de-41a3-80e8-e9c1652d38c2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"     \",\r\n  \"street\": \"{{street}}\",\r\n  \"suburb\": \"{{suburb}}\",\r\n  \"region\": \"{{region}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Venue - Invalid Request -  Missing Street Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "490e0cec-6c99-46b2-9bba-c7257692f8d2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Venue's address requires a street, suburb and region\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7f0050b6-a467-4898-ad9e-9897a6d7fa64",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"suburb\": \"{{suburb}}\",\r\n  \"region\": \"{{region}}\",\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Venue - Invalid Request -  Street Parameter has a null value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08dae267-b6de-4a13-b218-8125d2dc2bad",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Venue's address requires a street, suburb and region\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5741d877-6e2c-464b-93d4-152d5846045f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"street\": \"\",\r\n  \"suburb\": \"{{suburb}}\",\r\n  \"region\": \"{{region}}\",\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Venue - Invalid Request - Street Parameter has a blank value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b22d6c8-d2e7-4d9f-b365-75fc4bd4c5f9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Venue's address requires a street, suburb and region\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e0c98bd-fc52-40b3-98d9-c4d829a309f6",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"street\": \"     \",\r\n  \"suburb\": \"{{suburb}}\",\r\n  \"region\": \"{{region}}\",\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Venue - Invalid Request - Missing Suburb Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "810570b6-d342-4c6d-9769-59f1eb89725c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Venue's address requires a street, suburb and region\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9d746953-193d-43d3-a0ec-c99d0cc4881d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"street\": \"{{street}}\",\r\n  \"region\": \"{{region}}\",\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Venue - Invalid Request - Suburb Parameter has a null value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f29656f-9c17-4d56-bb7e-9fd6f53e7038",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Venue's address requires a street, suburb and region\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6be76d3f-c1d4-4960-9c80-b7c2c39320f4",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"street\": \"{{street}}\",\r\n  \"suburb\": \"\",\r\n  \"region\": \"{{region}}\",\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Venue - Invalid Request - Suburb Parameter has a blank value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa8c0295-949c-44ef-84e9-97126be55916",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Venue's address requires a street, suburb and region\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa7c84f3-2ec9-46ab-8493-c5d617f5b559",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"street\": \"{{street}}\",\r\n  \"suburb\": \"    \",\r\n  \"region\": \"{{region}}\",\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Venue - Invalid Request - Missing Region Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf3ab902-8e65-485c-919a-99d89c46dedc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Venue's address requires a street, suburb and region\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "510e9655-ea0b-4b17-a776-4524146a421c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"street\": \"{{street}}\",\r\n  \"suburb\": \"{{suburb}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Venue - Invalid Request - Region Parameter has a null value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ec5ae50-eedf-4a58-90ce-0c1083a332db",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Venue's address requires a street, suburb and region\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf323f40-e51c-4f39-9e6a-9281dbe66b4c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"street\": \"{{street}}\",\r\n  \"suburb\": \"{{suburb}}\",\r\n  \"region\": \"\",\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Venue - Invalid Request - Region Parameter has a blank value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3e72f31-52e3-4431-b3fe-315559bcd03d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Venue's address requires a street, suburb and region\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "60b1fdbd-9625-4383-b143-c3205a3761d1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"street\": \"{{street}}\",\r\n  \"suburb\": \"{{suburb}}\",\r\n  \"region\": \"     \",\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Venue - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15a3d90e-a2aa-454f-af80-e5b5fe504c4e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"var jsonData = JSON.parse(responseBody);",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "59acf3c0-4210-4adb-8c66-c44804c20610",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Venue - Invalid Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee11d00f-99b8-4680-ab71-c597a054238e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a401bd6d-0fc7-43bb-b53b-32f7945b8fe4",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n  \"name\": \"{{name}}\",\r\n  \"street\": \"{{street}}\",\r\n  \"suburb\": \"{{suburb}}\",\r\n  \"region\": \"{{region}}\"\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Venue - Invalid Request - Missing Header - Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ed9475c-2e5f-45a4-930c-f81b305b78c1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"var jsonData = JSON.parse(responseBody);",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7aba39e4-4ecc-4b34-b279-d0b8cfacf7b0",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"street\": \"{{street}}\",\r\n  \"suburb\": \"{{suburb}}\",\r\n  \"region\": \"{{region}}\",\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Venue - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08bd375a-2bff-4c5c-a66a-7f33aa162dfc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0df5db9e-3a6b-42ac-b39f-af771c8aa598",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"street\": \"{{street}}\",\r\n  \"suburb\": \"{{suburb}}\",\r\n  \"region\": \"{{region}}\",\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venue/21",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venue",
										"21"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Venue Tests",
					"item": [
						{
							"name": "Get Venue - Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "179879c1-a2a0-48a6-a8ef-9a9f527effd6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Venues",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Venue - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e06bd85-f317-4bec-8118-625751044db6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Aut",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Venue",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venue"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Venue by ID - Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53b751fe-74dc-49d8-8285-2ff2565e5a60",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//VALIDATE IF ENTITIES EXIST",
											"//Response body contains \"Venue Id\" Entity",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"venueId\");",
											"",
											"//Response body contains \"Name\" Entity",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response body includes Name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"name\");",
											"",
											"//Response body contains \"Suburb\" Entity",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response body includes Suburb entity from JSON data\"] = jsonData.suburb == postman.getEnvironmentVariable(\"suburb\");",
											"",
											"//Response body contains \"Region\" Entity",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response body includes Region entity from JSON data\"] = jsonData.region == postman.getEnvironmentVariable(\"region\");",
											"",
											"//Response body contains \"On Site\" Entity",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response body includes On Site entity from JSON data\"] = jsonData.onSite === false;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{venueId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Venue by ID - Invalid - Non Existing VenueId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c01a7b84-364f-45f4-b44f-44c61189708f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Non Existing VenueId",
											"pm.test(\"Correct Error Message for Non Existing VenueId\", function () {",
											"pm.expect(pm.response.text()).to.include(\"Could not find Venue \" + postman.getGlobalVariable(\"nonexistingvenueId\") + \" in System\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{nonexistingvenueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{nonexistingvenueId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Venue by ID - Invalid - Non Numeric VenueId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65453c7d-206b-4be6-9f42-098019b608be",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Non Numeric VenueId",
											"pm.test(\"Correct Error Message for Non Numeric VenueId\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"invalidvenueId\") + \"' is not valid.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{invalidvenueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{invalidvenueId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Put Venue Tests",
					"item": [
						{
							"name": "Put Venue - Valid Request - Update All Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84bc4be4-c495-417c-8ff3-a10fed8d4cf5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"venueId\");",
											"",
											"//Response body contains \"Name\" Entity",
											"tests[\"Response body includes Name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"name_updated\");",
											"",
											"//Response body contains \"Street\" Entity",
											"tests[\"Response body includes Street entity from JSON data\"] = jsonData.street == postman.getEnvironmentVariable(\"street_updated\");",
											"",
											"//Response body contains \"Suburb\" Entity",
											"tests[\"Response body includes Suburb entity from JSON data\"] = jsonData.suburb == postman.getEnvironmentVariable(\"suburb_updated\");",
											"",
											"//Response body contains \"Region\" Entity",
											"tests[\"Response body includes Region entity from JSON data\"] = jsonData.region == postman.getEnvironmentVariable(\"region_updated\");",
											"",
											"//Response body contains \"On Site\" Entity",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response body includes On Site entity from JSON data\"] = jsonData.onSite === false;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd6ce857-a2fa-4b4e-a969-d84fa85996f4",
										"exec": [
											"postman.setEnvironmentVariable(\"name_updated\", \"Venue Name Updated \" + _.random(1, 1000));",
											"postman.setEnvironmentVariable(\"street_updated\", \"Venue Street Updated \" + _.random(1, 1000));",
											"postman.setEnvironmentVariable(\"suburb_updated\", \"Venue Suburb Updated \" + _.random(1, 1000));",
											"postman.setEnvironmentVariable(\"region_updated\", \"Venue Region Updated \" + _.random(1, 1000));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name_updated}}\",\r\n  \"street\": \"{{street_updated}}\",\r\n  \"suburb\": \"{{suburb_updated}}\",\r\n  \"region\": \"{{region_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{venueId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Venue - Valid Request - Update Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd927d63-4dc9-4e8b-983a-232738def3a9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"venueId\");",
											"",
											"//Response body contains \"Name\" Entity",
											"tests[\"Response body includes Name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"name_updated\");",
											"",
											"//Response body contains \"Street\" Entity",
											"tests[\"Response body includes Street entity from JSON data\"] = jsonData.street == postman.getEnvironmentVariable(\"street_updated\");",
											"",
											"//Response body contains \"Suburb\" Entity",
											"tests[\"Response body includes Suburb entity from JSON data\"] = jsonData.suburb == postman.getEnvironmentVariable(\"suburb_updated\");",
											"",
											"//Response body contains \"Region\" Entity",
											"tests[\"Response body includes Region entity from JSON data\"] = jsonData.region == postman.getEnvironmentVariable(\"region_updated\");",
											"",
											"//Response body contains \"On Site\" Entity",
											"tests[\"Response body includes On Site entity from JSON data\"] = jsonData.onSite === false;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "961fb3bd-e7f3-47c7-ba64-52c33a28050a",
										"exec": [
											"postman.setEnvironmentVariable(\"name_updated\", \"Venue Name Updated \" + _.random(1, 1000));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{venueId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Venue - Valid Request - Update Street",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "880ba33a-2676-4b5c-9792-b0a5f3e4a0a4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"venueId\");",
											"",
											"//Response body contains \"Name\" Entity",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response body includes Name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"name_updated\");",
											"",
											"//Response body contains \"Street\" Entity",
											"tests[\"Response body includes Street entity from JSON data\"] = jsonData.street == postman.getEnvironmentVariable(\"street_updated\");",
											"",
											"//Response body contains \"Suburb\" Entity",
											"tests[\"Response body includes Suburb entity from JSON data\"] = jsonData.suburb == postman.getEnvironmentVariable(\"suburb_updated\");",
											"",
											"//Response body contains \"Region\" Entity",
											"tests[\"Response body includes Region entity from JSON data\"] = jsonData.region == postman.getEnvironmentVariable(\"region_updated\");",
											"",
											"//Response body contains \"On Site\" Entity",
											"tests[\"Response body includes On Site entity from JSON data\"] = jsonData.onSite === false;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a3ba9a75-a0fc-480d-bee2-b1cd3cf3d109",
										"exec": [
											"",
											"postman.setEnvironmentVariable(\"street_updated\", \"Venue Street Updated \" + _.random(1, 1000));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"street\": \"{{street_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{venueId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Venue - Valid Request - Update Suburb",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de2e478e-9f10-4cf8-a4ef-0a51773c2fea",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"venueId\");",
											"",
											"//Response body contains \"Name\" Entity",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response body includes Name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"name_updated\");",
											"",
											"//Response body contains \"Street\" Entity",
											"tests[\"Response body includes Street entity from JSON data\"] = jsonData.street == postman.getEnvironmentVariable(\"street_updated\");",
											"",
											"//Response body contains \"Suburb\" Entity",
											"tests[\"Response body includes Suburb entity from JSON data\"] = jsonData.suburb == postman.getEnvironmentVariable(\"suburb_updated\");",
											"",
											"//Response body contains \"Region\" Entity",
											"tests[\"Response body includes Region entity from JSON data\"] = jsonData.region == postman.getEnvironmentVariable(\"region_updated\");",
											"",
											"//Response body contains \"On Site\" Entity",
											"tests[\"Response body includes On Site entity from JSON data\"] = jsonData.onSite === false;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a724c15-9ee9-44a4-a61a-e04087e03dbc",
										"exec": [
											"postman.setEnvironmentVariable(\"suburb_updated\", \"Venue Suburb Updated \" + _.random(1, 1000));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"suburb\": \"{{suburb_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{venueId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Venue - Valid Request - Update Region",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d08a8541-0e42-4e6f-b3db-b49d8557020e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"venueId\");",
											"",
											"//Response body contains \"Name\" Entity",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response body includes Name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"name_updated\");",
											"",
											"//Response body contains \"Street\" Entity",
											"tests[\"Response body includes Street entity from JSON data\"] = jsonData.street == postman.getEnvironmentVariable(\"street_updated\");",
											"",
											"//Response body contains \"Suburb\" Entity",
											"tests[\"Response body includes Suburb entity from JSON data\"] = jsonData.suburb == postman.getEnvironmentVariable(\"suburb_updated\");",
											"",
											"//Response body contains \"Region\" Entity",
											"tests[\"Response body includes Region entity from JSON data\"] = jsonData.region == postman.getEnvironmentVariable(\"region_updated\");",
											"",
											"//Response body contains \"On Site\" Entity",
											"tests[\"Response body includes On Site entity from JSON data\"] = jsonData.onSite === false;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e6607ab-881d-4098-bea5-b0aa7ef97f8a",
										"exec": [
											"",
											"postman.setEnvironmentVariable(\"region_updated\", \"Venue Region Updated \" + _.random(1, 1000));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"region\": \"{{region_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{venueId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Venue - Valid Request - Update Onsite",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef555376-3a9c-48e8-8e86-7774261e6f17",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"venueId\");",
											"",
											"//Response body contains \"Name\" Entity",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response body includes Name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"name_updated\");",
											"",
											"//Response body contains \"Street\" Entity",
											"tests[\"Response body includes Street entity from JSON data\"] = jsonData.street == postman.getEnvironmentVariable(\"street_updated\");",
											"",
											"//Response body contains \"Suburb\" Entity",
											"tests[\"Response body includes Suburb entity from JSON data\"] = jsonData.suburb == postman.getEnvironmentVariable(\"suburb_updated\");",
											"",
											"//Response body contains \"Region\" Entity",
											"tests[\"Response body includes Region entity from JSON data\"] = jsonData.region == postman.getEnvironmentVariable(\"region_updated\");",
											"",
											"//Response body contains \"On Site\" Entity",
											"tests[\"Response body includes On Site entity from JSON data\"] = jsonData.onSite === true;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "579e5c32-d66a-450d-ac0a-b7d7f43641d3",
										"exec": [
											"postman.setEnvironmentVariable(\"onsite_updated\", true);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"onsite\": \"{{onsite_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{venueId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Venue - Invalid Request - No Change in Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "893ae36f-195c-4cf6-87c5-91cf88fdd1f0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Body contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"No valid venue field updates were received\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e8ef6e98-5a5d-4f68-b19c-e222bb04cfd2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"street\": \"\",\r\n  \"suburb\": \"\",\r\n  \"region\": \"\",\r\n  \"onsite\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{venueId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Venue - Invalid Request - Non Existing Venue ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52426c02-a5c0-4bcb-bece-e28a1d559355",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Non Existing VenueId",
											"pm.test(\"Correct Error Message for Non Existing VenueId\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not find Venue \" + postman.getGlobalVariable(\"nonexistingvenueId\") + \" in System\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02de8bda-85a3-4307-a9b6-889014b029ce",
										"exec": [
											"postman.setEnvironmentVariable(\"name_updated\", \"Venue Name 1 Updated\");",
											"postman.setEnvironmentVariable(\"street_updated\", \"Venue Street 1 Updated\");",
											"postman.setEnvironmentVariable(\"suburb_updated\", \"Venue Suburb 1 Updated\");",
											"postman.setEnvironmentVariable(\"region_updated\", \"Venue Region 1 Updated\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name_updated}}\",\r\n  \"street\": \"{{street_updated}}\",\r\n  \"suburb\": \"{{suburb_updated}}\",\r\n  \"region\": \"{{region_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{nonexistingvenueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{nonexistingvenueId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Venue - Invalid Request - Non Numeric Venue ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1378e185-6c57-4aa6-ab04-1e12cf2a743c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Non Numeric VenueId",
											"pm.test(\"Correct Error Message for Non Numeric VenueId\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"invalidvenueId\") + \"' is not valid.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02de8bda-85a3-4307-a9b6-889014b029ce",
										"exec": [
											"postman.setEnvironmentVariable(\"name_updated\", \"Venue Name 1 Updated\");",
											"postman.setEnvironmentVariable(\"street_updated\", \"Venue Street 1 Updated\");",
											"postman.setEnvironmentVariable(\"suburb_updated\", \"Venue Suburb 1 Updated\");",
											"postman.setEnvironmentVariable(\"region_updated\", \"Venue Region 1 Updated\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name_updated}}\",\r\n  \"street\": \"{{street_updated}}\",\r\n  \"suburb\": \"{{suburb_updated}}\",\r\n  \"region\": \"{{region_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{invalidvenueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{invalidvenueId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Venue - Invalid Request -  Missing Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b969f45-4d63-4378-878e-1caa65920966",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Missing Request Body",
											"pm.test(\"Correct Error Message for Missing Request Body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});",
											"",
											"//include test for the ID",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad88d260-cf4b-4fec-9ab4-ca1690578179",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{venueId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Venue - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47e101e5-78e6-4db9-9af2-d5eb1e98483c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02de8bda-85a3-4307-a9b6-889014b029ce",
										"exec": [
											"postman.setEnvironmentVariable(\"name_updated\", \"Venue Name 1 Updated\");",
											"postman.setEnvironmentVariable(\"street_updated\", \"Venue Street 1 Updated\");",
											"postman.setEnvironmentVariable(\"suburb_updated\", \"Venue Suburb 1 Updated\");",
											"postman.setEnvironmentVariable(\"region_updated\", \"Venue Region 1 Updated\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 182,\r\n  \"name\": \"{{name_updated}}\",\r\n  \"street\": \"{{street_updated}}\",\r\n  \"suburb\": \"{{suburb_updated}}\",\r\n  \"region\": \"{{region_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venue/{{venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venue",
										"{{venueId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Venue - Invalid Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a236e42f-842b-4a40-9b24-14e7d1979f7b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Invalid Request Body",
											"pm.test(\"Correct Error Message for Invalid Request Body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Error converting value\");",
											"});",
											"",
											"//include test for the ID",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02de8bda-85a3-4307-a9b6-889014b029ce",
										"exec": [
											"postman.setEnvironmentVariable(\"name_updated\", \"Venue Name 1 Updated\");",
											"postman.setEnvironmentVariable(\"street_updated\", \"Venue Street 1 Updated\");",
											"postman.setEnvironmentVariable(\"suburb_updated\", \"Venue Suburb 1 Updated\");",
											"postman.setEnvironmentVariable(\"region_updated\", \"Venue Region 1 Updated\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n  \"name\": \"{{name_updated}}\",\r\n  \"street\": \"{{street_updated}}\",\r\n  \"suburb\": \"{{suburb_updated}}\",\r\n  \"region\": \"{{region_updated}}\"\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{venueId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Venue - Invalid Request - Missing Header - Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0da03c74-0c21-46a9-a9c7-a20413d37c4a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"var jsonData = JSON.parse(responseBody);",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02de8bda-85a3-4307-a9b6-889014b029ce",
										"exec": [
											"postman.setEnvironmentVariable(\"name_updated\", \"Venue Name 1 Updated\");",
											"postman.setEnvironmentVariable(\"street_updated\", \"Venue Street 1 Updated\");",
											"postman.setEnvironmentVariable(\"suburb_updated\", \"Venue Suburb 1 Updated\");",
											"postman.setEnvironmentVariable(\"region_updated\", \"Venue Region 1 Updated\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 182,\r\n  \"name\": \"{{name_updated}}\",\r\n  \"street\": \"{{street_updated}}\",\r\n  \"suburb\": \"{{suburb_updated}}\",\r\n  \"region\": \"{{region_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{venueId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Venue Tests",
					"item": [
						{
							"name": "Delete Venue by ID - Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fafd439c-7381-4a9e-85cd-e67e3975ade9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct message for Successful Delete of Venue",
											"pm.test(\"Correct message for Successful Delete of Venue\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Venue Deleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{venueId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Venue by ID - Non Existing VenueId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8035d124-29dc-4e35-ac85-d892f1866f00",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Non Existing VenueId",
											"pm.test(\"Correct Error Message for Non Existing VenueId\", function () {",
											"pm.expect(pm.response.text()).to.include(\"No Venue was found matching ID \" + postman.getGlobalVariable(\"nonexistingvenueId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{nonexistingvenueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{nonexistingvenueId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Venue by ID - Non Numeric VenueId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb1adbae-61fa-4f5e-9fc9-a62afc78de6b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Non Numeric VenueId",
											"pm.test(\"Correct Error Message for Non Numeric VenueId\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"invalidvenueId\") + \"' is not valid.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Venues/{{invalidvenueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venues",
										"{{invalidvenueId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Venue by ID - Invalid URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c43338e-6fea-4519-b9bf-91db1bfc8f5d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Venue/{{venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Venue",
										"{{venueId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Auction Session",
			"item": [
				{
					"name": "Post Auction Session Tests",
					"item": [
						{
							"name": "Post Auction Session - Valid Request - All Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ff252ee-850a-43bb-a5f5-4e6ddffe3567",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Store the auctionSessionId for the other tests",
											"postman.setGlobalVariable(\"auctionSessionId\", jsonData.auctionSessionId);",
											"",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"// var converted_startDate = new Date((Date.parse(postman.getEnvironmentVariable(\"auction_startDate\"))));",
											"//                console.log(converted_startDate);",
											"//                converted_startDate.getTime();",
											"",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate == postman.getEnvironmentVariable(\"auction_startDate\");",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate == postman.getEnvironmentVariable(\"auction_finishDate\");",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId === null;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession == postman.getEnvironmentVariable(\"isInSession\");",
											"",
											"//Response body contains \"auctionSessionAdmin\" Entity",
											"tests[\"Response body includes auctionSessionAdmin entity from JSON data\"] = jsonData.auctionSessionAdmin === null;",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "96422eaa-9528-42e5-9a6e-d5058503d384",
										"exec": [
											"postman.setEnvironmentVariable(\"auction_name\", \"Auction Name \" + _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"auction_startDate\", \"2018-07-01T08:15:30+00:00\");",
											"postman.setEnvironmentVariable(\"auction_finishDate\", \"2018-07-01T08:18:30+00:00\");",
											"postman.setEnvironmentVariable(\"isInSession\", false);",
											"",
											"//Create Venue ID Test Data 1",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/Venues\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"name\": pm.environment.get('name'),",
											"            \"street\": pm.environment.get('street'),",
											"            \"suburb\": pm.environment.get('suburb'),",
											"            \"region\": pm.environment.get('region')",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"auction_venueId\", res.json().venueId);",
											"    }",
											");",
											"",
											"//Create Venue ID Test Data 2",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/Venues\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"name\": pm.environment.get('name'),",
											"            \"street\": pm.environment.get('street'),",
											"            \"suburb\": pm.environment.get('suburb'),",
											"            \"region\": pm.environment.get('region')",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"auction_venueId_updated\", res.json().venueId);",
											"    }",
											");",
											"",
											"//Create Venue ID Test Data 3",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/Venues\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"name\": pm.environment.get('name'),",
											"            \"street\": pm.environment.get('street'),",
											"            \"suburb\": pm.environment.get('suburb'),",
											"            \"region\": pm.environment.get('region')",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"auction_venueId_updated_2\", res.json().venueId);",
											"    }",
											");",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n   \"venueId\": {{auction_venueId}},\n  \"startDate\": \"{{auction_startDate}}\",\n  \"finishDate\": \"{{auction_finishDate}}\",\n   \"isInSession\": {{isInSession}}\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Valid Request - Name Parameter Only",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e33affbc-d3f3-4293-94b9-88ae1c951357",
										"exec": [
											"postman.setEnvironmentVariable(\"auction_name\", \"Auction Name 1\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d29ecb63-946c-45a0-ba25-4e2c9953eaaa",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the auctionSessionId_updated for Put Lot test",
											"postman.setGlobalVariable(\"auctionSessionId_updated\", jsonData.auctionSessionId);",
											"",
											"",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId === null;",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate === null;",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate === null;",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId === null;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession == postman.getEnvironmentVariable(\"isInSession\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Valid Request - All Parameters with valid DisplayGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e30e63a2-34c6-4470-8f04-5886645a7f42",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											"postman.setEnvironmentVariable(\"auction_name\", \"Auction Name 1\");",
											"postman.setEnvironmentVariable(\"auction_startDate\", \"2018-07-01T08:15:30+00:00\");",
											"postman.setEnvironmentVariable(\"auction_finishDate\", \"2018-07-01T08:18:30+00:00\");",
											"",
											"//Create Display Group Test Data",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/DisplayGroups/\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"venueId\": pm.globals.get('auction_venueId'),",
											"            \"name\": pm.environment.get('displayGroupName'),",
											"            \"description\": pm.environment.get('displayGroupDescription'),",
											"            \"displayConfigurationIds\": [],",
											"            \"auctionSessionIds\": []",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"displayGroupId\", res.json().displayGroupId);",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c6b6dc58-ed9d-49d6-9f7b-3c92ffd30b13",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setGlobalVariable(\"auctionSessionId2\", jsonData.auctionSessionId);",
											"",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate == postman.getEnvironmentVariable(\"auction_startDate\");",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate == postman.getEnvironmentVariable(\"auction_finishDate\");",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId == postman.getGlobalVariable(\"displayGroupId\");",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession == postman.getEnvironmentVariable(\"isInSession\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n   \"venueId\": {{auction_venueId}},\n  \"startDate\": \"{{auction_startDate}}\",\n  \"finishDate\": \"{{auction_finishDate}}\",\n  \"displayGroupId\": {{displayGroupId}}\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Valid Request - Create Today's Auction Session",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ef867f8c-0ef0-480f-ae66-a1e771abc187",
										"exec": [
											"//var startDate_current_timestamp = new Date(Date.now() + 43300000);",
											"var startDate_current_timestamp = new Date(Date.now());",
											"console.log(startDate_current_timestamp);",
											"",
											"postman.setEnvironmentVariable(\"auction_startDate_timestamp\", startDate_current_timestamp.toISOString());",
											"console.log(startDate_current_timestamp.toISOString());",
											"",
											"//var finishDate_current_timestamp = new Date(Date.now() + 57600000); // 4hrs in ms",
											"var finishDate_current_timestamp = new Date(Date.now() + 14400000); // 4hrs in ms",
											"postman.setEnvironmentVariable(\"auction_finishDate_timestamp\", finishDate_current_timestamp.toISOString());",
											"",
											"//Create Display Group Test Data for Today's Auction Session",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/DisplayGroups/\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"venueId\": pm.globals.get('auction_venueId'),",
											"            \"name\": pm.environment.get('displayGroupName'),",
											"            \"description\": pm.environment.get('displayGroupDescription'),",
											"            \"displayConfigurationIds\": [],",
											"            \"auctionSessionIds\": []",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"displayGroupId_today\", res.json().displayGroupId);",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7aa575af-20e0-4b81-a251-d69a87ba5e31",
										"exec": [
											" let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setGlobalVariable(\"auctionSessionId_today\", jsonData.auctionSessionId);",
											"    ",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"//var converted_startDate = new Date((postman.getEnvironmentVariable(\"auction_startDate_timestamp\"))).format('{yyyy}-{MM}-{dd}T{HH}:{mm}:{ss}{Z}');",
											"//                console.log(converted_startDate);",
											"                //converted_startDate.getTime();",
											"",
											"//tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate == postman.getEnvironmentVariable(\"auction_startDate_timestamp\");",
											"",
											"//Response body contains \"finishDate\" Entity",
											"//tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate == postman.getEnvironmentVariable(\"auction_finishDate_timestamp\");",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId == postman.getGlobalVariable(\"displayGroupId_today\");",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession == postman.getEnvironmentVariable(\"isInSession\");",
											"",
											"//Response body contains \"auctionSessionAdmin\" Entity",
											"tests[\"Response body includes auctionSessionAdmin entity from JSON data\"] = jsonData.auctionSessionAdmin === null;",
											"       ",
											"//Assign Today's Auction Session to a lot",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/Lots/\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"auctionSessionId\": pm.globals.get('auctionSessionId_today'),",
											"            \"order\": _.random(1, 10000000),",
											"            \"description\": pm.environment.get('description'),",
											"            \"reserveMet\": pm.environment.get('reserveMet'),",
											"            \"listingId\": _.random(1, 900000000),",
											"            \"address\": pm.environment.get('address'),",
											"            \"postponedDateTime\": pm.environment.get('postponedDateTime'),",
											"            \"auctionStatus\": pm.environment.get('auctionStatus'),",
											"            \"featureDescription\": pm.environment.get('featureDescription'),",
											"            \"agentIds\": []",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"lotId_today\", res.json().lotId);",
											"    }",
											");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n   \"venueId\": {{auction_venueId}},\n  \"startDate\": \"{{auction_startDate_timestamp}}\",\n  \"finishDate\": \"{{auction_finishDate_timestamp}}\",\n  \"displayGroupId\": {{displayGroupId_today}}\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Valid Request - Name and Venue ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cb87a11e-1c5a-4f74-86bc-c8ae8c8e1b0a",
										"exec": [
											"postman.setEnvironmentVariable(\"auction_name\", \"Auction Name 1\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c6bf3bf0-4c1c-4c10-9357-b7feebf9bfb1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the auctionSessionId_updated for Put Lot test",
											"postman.setGlobalVariable(\"auctionSessionId_updated2\", jsonData.auctionSessionId);",
											"",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate === null;",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate === null;",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.displayGroupId !== undefined;",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId === null;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession == postman.getEnvironmentVariable(\"isInSession\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n  \"venueId\": {{auction_venueId}}\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Valid Request - Name and StartDate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "198cd1e7-1118-47d5-a8da-0dc5f78146fe",
										"exec": [
											"postman.setEnvironmentVariable(\"auction_name\", \"Auction Name 1\");",
											"postman.setEnvironmentVariable(\"auction_startDate2\", \"2019-07-01T08:15:30+00:00\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "45e32483-0c1c-4017-9cf4-631c15e149c8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setGlobalVariable(\"auctionSessionId3\", jsonData.auctionSessionId);",
											"    ",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId === null;",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate === postman.getEnvironmentVariable(\"auction_startDate2\");",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate === null;",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId === null;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession == postman.getEnvironmentVariable(\"isInSession\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n  \"startDate\": \"{{auction_startDate2}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Valid Request - Name, VenueId and StartDate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d1b61d28-cfa2-41a5-885c-50d4f97c96d3",
										"exec": [
											"postman.setEnvironmentVariable(\"auction_name\", \"Auction Name 1\");",
											"postman.setEnvironmentVariable(\"auction_startDate2\", \"2018-08-01T08:15:30+00:00\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6732ae0b-d573-43d7-a4cd-ccf3a65d1152",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Venue ID for the other tests",
											"postman.setGlobalVariable(\"auction_venueId3\", jsonData.venueId);",
											"postman.setGlobalVariable(\"auctionSessionId4\", jsonData.auctionSessionId);",
											"",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate == postman.getEnvironmentVariable(\"auction_startDate2\");",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate === null;",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId === null;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession == postman.getEnvironmentVariable(\"isInSession\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n  \"venueId\": {{auction_venueId}},\n  \"startDate\": \"{{auction_startDate2}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Valid Request - Name and InSession",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "acbb6997-2320-420e-aae8-ae64821bc459",
										"exec": [
											"postman.setEnvironmentVariable(\"auction_name\", \"Auction Name 1\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cef368bc-e09b-4de8-abea-32f5b1a70ced",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Venue ID for the other tests",
											"postman.setGlobalVariable(\"auctionSessionId7\", jsonData.auctionSessionId);",
											"",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId === null;",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate === null;",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate === null;",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId === null;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession === true;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n   \"isInSession\": true\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Valid Request - Name, InSession and AuctionSessionAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5c1dbeb5-9ce8-4b12-86e4-129d1b9782e5",
										"exec": [
											"postman.setEnvironmentVariable(\"auction_name\", \"Auction Name 1\");",
											"postman.setEnvironmentVariable(\"auctionSessionAdmin\", \"kpatio@barfoot.co.nz\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ff8aa7fe-f95d-4e05-a37f-6b97d012c896",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Venue ID for the other tests",
											"postman.setGlobalVariable(\"auctionSessionId8\", jsonData.auctionSessionId);",
											"",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId === null;",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate === null;",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate === null;",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId === null;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession === true;",
											"",
											"//Response body contains \"auctionSessionAdmin\" Entity",
											"tests[\"Response body includes auctionSessionAdmin entity from JSON data\"] = jsonData.auctionSessionAdmin == postman.getEnvironmentVariable(\"auctionSessionAdmin\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n   \"isInSession\": true,\n   \"auctionSessionAdmin\": \"{{auctionSessionAdmin}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Invalid Request - Valid FinishDate but Null StartDate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "84102407-2579-49a3-a300-0ccfc8171a6f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c258c059-3800-4f19-b64e-862652e9ce8a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Auction Session must have a start date before a finish date can be added\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n  \"finishDate\": \"{{auction_finishDate2}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Invalid Request - Missing Name Parameter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "19fd0fe2-c66e-4fe9-be4f-9d8687c08350",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "41ad001e-9101-43cb-b745-d5342e5ec70d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Auction Session Name was not provided\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"venueId\": {{auction_venueId}},\n  \"startDate\": \"{{auction_startDate}}\",\n  \"finishDate\": \"{{auction_finishDate}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Invalid Request - Name has a null value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "12b96609-22ff-4fa0-95b4-ec221e50875e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0af51e73-008a-41ab-af8e-95c15d1044f1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Auction Session Name was not provided\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"\",\n  \"venueId\": {{auction_venueId}},\n  \"startDate\": \"{{auction_startDate}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Invalid Request - Name has a blank value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8ca0dfd-4183-4f93-903f-438ec3b1f082",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "769760cd-8995-4fe5-9572-364134aa1d02",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Auction Session Name was not provided\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"    \",\n  \"venueId\": {{auction_venueId}},\n  \"startDate\": \"{{auction_startDate}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Invalid Request - Non Existing VenueId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ce6ffca8-929c-4494-8b36-ce9a0ddc9405",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "766ef8d1-33b1-4eb3-91e8-a7fceb9eb92e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: No Venue was found matching ID \" + postman.getGlobalVariable(\"nonexistingvenueId\") + \". Cannot assign Auction Session to Venue.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n   \"venueId\": {{nonexistingvenueId}},\n  \"startDate\": \"{{auction_startDate}}\",\n  \"finishDate\": \"{{auction_finishDate}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Invalid Request - Non Numeric VenueId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "66aa2d36-7fee-4ca4-81a0-f72c9ccaec95",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d19e7486-2257-4040-8d21-6a1930e1a98b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Input string '\" + postman.getGlobalVariable(\"invalidvenueId\") + \"' is not a valid integer.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n   \"venueId\": {{invalidvenueId}},\n  \"startDate\": \"{{auction_startDate}}\",\n  \"finishDate\": \"{{auction_finishDate}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Invalid Request - Invalid StartDate and FinishDate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7263a889-4398-4c42-b597-8dec5147b018",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1f8e6110-761f-416f-a66c-7b5083e07a60",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//startDate has a value",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate !== undefined;",
											"",
											"//finishDate has a value",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.finishDate !== undefined;",
											"",
											"//Validate the correct Error Message for startDate",
											"pm.test(\"Validate the correct error message for startDate\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to DateTimeOffset: \" + postman.getGlobalVariable(\"invalidStartDate\"));",
											"});",
											"",
											"//Validate the correct Error Message for finishDate",
											"pm.test(\"Validate the correct error message for finishDate\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to DateTimeOffset: \" + postman.getGlobalVariable(\"invalidFinishDate\"));",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n   \"venueId\": {{auction_venueId}},\n  \"startDate\": \"{{invalidStartDate}}\",\n  \"finishDate\": \"{{invalidFinishDate}}\"\n}\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7263a889-4398-4c42-b597-8dec5147b018",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cf0d051e-0820-43b6-8f7a-83f444d4f82b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"///Validate the values of the response body",
											"var jsonData = JSON.parse(responseBody);",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Invalid Request - Invalid Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7263a889-4398-4c42-b597-8dec5147b018",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c246ab58-5932-4cd6-9e6d-2a6068def249",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n   \"venueId\": {{auction_venueId}},\n  \"startDate\": \"{{auction_startDate}}\",\n  \"finishDate\": \"{{auction_finishDate}}\"\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Invalid Request - Missing Header - Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7263a889-4398-4c42-b597-8dec5147b018",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5667d631-e70c-4852-a76c-c9f07d64608a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the value of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n   \"venueId\": {{auction_venueId}},\n  \"startDate\": \"{{auction_startDate}}\",\n  \"finishDate\": \"{{auction_finishDate}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Invalid Request URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7263a889-4398-4c42-b597-8dec5147b018",
										"exec": [
											"//Create Display Group Test Data",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/DisplayGroups/\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"venueId\": pm.globals.get('auction_venueId'),",
											"            \"name\": pm.environment.get('displayGroupName'),",
											"            \"description\": pm.environment.get('displayGroupDescription'),",
											"            \"displayConfigurationIds\": [],",
											"            \"auctionSessionIds\": [],",
											"            \"isInUse\": true",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"displayGroupId_overlapping\", res.json().displayGroupId);",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bcea7d4f-4a6e-4881-be49-7cb457036bdf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n   \"venueId\": {{auction_venueId}},\n  \"startDate\": \"{{auction_startDate}}\",\n  \"finishDate\": \"{{auction_finishDate}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSession",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSession"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Invalid Request - Overlapping Auction Sessions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d9a4db3c-827a-4e9a-b02a-f0e16cebfe6f",
										"exec": [
											"//Create Auction Session for Overlapping Test",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/AuctionSessions\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"name\": \"Overlapping Auction Session 1\",",
											"            \"startDate\" : pm.environment.get(\"auction_startDate_timestamp\"),",
											"            \"finishDate\" : pm.environment.get(\"auction_finishDate_timestamp\"),",
											"            \"displayGroupId\": pm.globals.get('displayGroupId_overlapping'),",
											"            \"isInSession\": true,",
											"            \"auctionSessionAdmin\": \"test@barfoot.co.nz\"",
											"            //pm.globals.get('displayGroupId3')",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"auctionSessionId_overlapping\", res.json().auctionSessionId);",
											"    }",
											");",
											"",
											"//Assign Auction Session to a lot",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/Lots/\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"auctionSessionId\": pm.globals.get('auctionSessionId_overlapping'),",
											"            \"order\": _.random(1, 10000000),",
											"            \"description\": pm.environment.get('description'),",
											"            \"reserveMet\": pm.environment.get('reserveMet'),",
											"            \"listingId\": _.random(1, 900000000),",
											"            \"address\": pm.environment.get('address'),",
											"            \"postponedDateTime\": pm.environment.get('postponedDateTime'),",
											"            \"auctionStatus\": pm.environment.get('auctionStatus'),",
											"            \"featureDescription\": pm.environment.get('featureDescription'),",
											"            \"agentIds\": []",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"lotId_today\", res.json().lotId);",
											"    }",
											");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ecacbb90-61ed-4852-8bb2-3befbee86b5f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Display Group \" + postman.getGlobalVariable(\"displayGroupId_overlapping\") + \" is currently being used by Auction Session \" + postman.getGlobalVariable(\"auctionSessionId_overlapping\") + \" at the same time.\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Overlapping Auction Session 2\",\n   \"venueId\": {{auction_venueId}},\n  \"startDate\": \"{{auction_startDate_timestamp}}\",\n  \"displayGroupId\": {{displayGroupId_overlapping}},\n  \"isInSession\": true\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Invalid Request - Non existing displayGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1a969238-8c13-4f5f-bb2b-7b9db261b278",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ff1e7f88-7be8-4e2e-be6e-79c615d972be",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message for startDate",
											"pm.test(\"Validate the correct error message for startDate\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: No Display Group was found matching ID \" + postman.getGlobalVariable(\"nonexistingdisplayGroupId\"));",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n   \"venueId\": {{auction_venueId}},\n  \"startDate\": \"{{auction_startDate}}\",\n  \"finishDate\": \"{{auction_finishDate}}\",\n  \"displayGroupId\": {{nonexistingdisplayGroupId}}\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Auction Session - Invalid Request - Non numeric displayGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "385a0bba-3eb2-4cc4-bbd5-49922a8f3968",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ddac983c-691b-4b9a-924b-a95f746fe3a1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"",
											"//Validate the correct Error Message for startDate",
											"pm.test(\"Validate the correct error message for startDate\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \" + postman.getGlobalVariable(\"nonnumericdisplayGroupId\"));",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name}}\",\n   \"venueId\": {{auction_venueId}},\n  \"startDate\": \"{{auction_startDate}}\",\n  \"finishDate\": \"{{auction_finishDate}}\",\n  \"displayGroupId\": \"{{nonnumericdisplayGroupId}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Auction Session Tests",
					"item": [
						{
							"name": "Get All Auction Sessions - Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81c1113b-fae7-4ddf-b61b-ec8d61db7068",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Auction Sessions - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89edc938-3c33-4f0a-8bcd-bff0416ed4a6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSession",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSession"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Auction Session by ID - Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c069af5-2548-473b-b481-c42f853630d4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId2\");",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate == postman.getEnvironmentVariable(\"auction_startDate\");",
											"console.log(jsonData.startDate);",
											"console.log(postman.getEnvironmentVariable(\"auction_startDate\"));",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate == postman.getEnvironmentVariable(\"auction_finishDate\");",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId == postman.getGlobalVariable(\"displayGroupId\");",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession == postman.getEnvironmentVariable(\"isInSession\");",
											"",
											"//Response body contains \"lotCount\" Entity",
											"tests[\"Response body includes lotCount entity from JSON data\"] = jsonData.lotCount !== undefined;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/GetAuctionSessionById/{{auctionSessionId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"GetAuctionSessionById",
										"{{auctionSessionId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Auction Session by ID - Invalid - Non Existing auctionSessionId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c21e9a9-7c42-4cb9-a635-578be804abf6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Non Existing auctionSessionId",
											"pm.test(\"Correct Error Message for Non Existing auctionSessionId\", function () {",
											"pm.expect(pm.response.text()).to.include(\"Could not find Auction Session \" + postman.getGlobalVariable(\"nonexistingauctionSessionId\") + \" in System\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/GetAuctionSessionById/{{nonexistingauctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"GetAuctionSessionById",
										"{{nonexistingauctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Auction Session by ID - Invalid - Non Numeric auctionSessionId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a90c04ce-3f24-4023-9451-83185ee6a9c8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Non Numeric VenueId",
											"pm.test(\"Correct Error Message for Non Numeric VenueId\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"invalidauctionSessionId\") + \"' is not valid.\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/GetAuctionSessionById/{{invalidauctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"GetAuctionSessionById",
										"{{invalidauctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Auction Sessions - Valid Request - No Values indicated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75b5fcee-9d24-42b8-98fd-a80a4df0199a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems === 0;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber === 0;",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize === 0;",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list == \"\";",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages === 1;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage === false;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage === true;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber === 1;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber === 1;",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22c519eb-7978-42ab-8519-fd03068c2781",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber\", \"1\");",
											"postman.setEnvironmentVariable(\"pageSize\", \"20\");",
											"",
											"//var startDate_current_timestamp = new Date(Date.now() + 43300000);",
											"var auction_currentDate_timestamp = new Date(Date.now() + 43300000);",
											"console.log(auction_currentDate_timestamp);",
											"",
											"postman.setEnvironmentVariable(\"auction_currentDate_timestamp\", auction_currentDate_timestamp.toISOString());",
											"console.log(auction_currentDate_timestamp.toISOString());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/GetPagedAuctionSessions",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"GetPagedAuctionSessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Auction Sessions - Valid Request - Today's Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "348df1b6-4d50-4ede-aaae-bfdb33ce09bc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems !== undefined;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber == postman.getEnvironmentVariable(\"pageNumber\");",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize == postman.getEnvironmentVariable(\"pageSize\");",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list !== undefined;",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages !== undefined;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage !== undefined;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage !== undefined;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber !== undefined;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"pm.test(\"Validate each Auction Sessions inside List\", () => {",
											"   for (i = 0; i < jsonData.list.length; i++) {",
											"       ",
											" //var todayDate = new Date(Date.parse(postman.getEnvironmentVariable(\"auction_startDate_timestamp\")));",
											" //               console.log(todayDate);",
											" //               todayDate.getTime();",
											" ",
											"var moment = require('moment');",
											"//pm.globals.set(\"timestamp\", moment().format(\"MM/DD/YYYY\"));",
											"",
											" var todayDate = new Date(Date.parse(moment().format(\"MM/DD/YYYY\"))); //convert to NZ time",
											"                //console.log(todayDate);",
											"                todayDate.getTime();",
											"                ",
											"                var auction_startDate = new Date(Date.parse(jsonData.list[i].startDate)); //change this once they implemented UTC",
											"                //var auction_startDate = new Date(Date.parse(\"2018-08-20T08:15:30Z\"))",
											"                console.log(auction_startDate);",
											"                auction_startDate.getTime();",
											"                ",
											"            pm.expect(auction_startDate).to.be.above(todayDate);",
											"            ",
											"            ",
											"            ",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.list[i].auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.list[i].venueId !== undefined;",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.list[i].name !== undefined;",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.list[i].finishDate !== undefined;",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.list[i].displayGroupId !== undefined;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.list[i].isInSession !== undefined;",
											"",
											"//Response body contains \"lotCount\" Entity",
											"tests[\"Response body includes lotCount entity from JSON data\"] = jsonData.list[i].lotCount !== undefined;",
											"",
											"   }",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22c519eb-7978-42ab-8519-fd03068c2781",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber\", \"1\");",
											"postman.setEnvironmentVariable(\"pageSize\", \"20\");",
											"",
											"//var startDate_current_timestamp = new Date(Date.now() + 43300000);",
											"var auction_currentDate_timestamp = new Date(Date.now() + 43300000);",
											"console.log(auction_currentDate_timestamp);",
											"",
											"postman.setEnvironmentVariable(\"auction_currentDate_timestamp\", auction_currentDate_timestamp.toISOString());",
											"console.log(auction_currentDate_timestamp.toISOString());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/GetPagedAuctionSessions?pageNumber={{pageNumber}}&pageSize={{pageSize}}&currentDate={{auction_currentDate_timestamp}}&timeZone={{validtimezone}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"GetPagedAuctionSessions"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "currentDate",
											"value": "{{auction_currentDate_timestamp}}"
										},
										{
											"key": "timeZone",
											"value": "{{validtimezone}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Auction Sessions - Valid Request - Page Number has no results",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3ee8437-db65-4bb9-858e-98a64df166b7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems !== undefined;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber == postman.getEnvironmentVariable(\"pageNumber_noresults\");",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize == postman.getEnvironmentVariable(\"pageSize\");",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list == \"\";",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages !== undefined;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage !== undefined;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage !== undefined;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber !== undefined;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d378e1e1-c8c9-4193-8cec-cbb645254a01",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber_noresults\", \"3000\");",
											"postman.setEnvironmentVariable(\"pageSize\", \"20\");",
											"postman.setEnvironmentVariable(\"currentDate\", \"2018-08-14T00:00:00\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/GetPagedAuctionSessions?pageNumber={{pageNumber_noresults}}&pageSize={{pageSize}}&currentDate={{auction_startDate_timestamp}}&timeZone={{validtimezone}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"GetPagedAuctionSessions"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber_noresults}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "currentDate",
											"value": "{{auction_startDate_timestamp}}"
										},
										{
											"key": "timeZone",
											"value": "{{validtimezone}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Auction Sessions - Valid Request - Page Size has no results",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a2cec86-1ee2-4e26-975e-44d383600f09",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems !== undefined;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber == postman.getEnvironmentVariable(\"pageNumber_noresults\");",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize === 0;",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list == \"\";",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages !== undefined;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage !== undefined;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage !== undefined;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber !== undefined;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e80fc083-b4fd-414a-9dd1-1d1427aeeee6",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber_noresults\", \"3000\");",
											"postman.setEnvironmentVariable(\"pageSize_noresults\", \"0\");",
											"postman.setEnvironmentVariable(\"currentDate\", \"2018-08-14T00:00:00\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/GetPagedAuctionSessions?pageNumber={{pageNumber_noresults}}&pageSize={{pageSize_noresults}}&currentDate={{auction_startDate_timestamp}}&timeZone={{validtimezone}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"GetPagedAuctionSessions"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber_noresults}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize_noresults}}"
										},
										{
											"key": "currentDate",
											"value": "{{auction_startDate_timestamp}}"
										},
										{
											"key": "timeZone",
											"value": "{{validtimezone}}"
										},
										{
											"key": null,
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Auction Sessions - Valid Request - Date has no results",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c3ff986-5dc0-468e-ac73-901484694925",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems === 0;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber == postman.getEnvironmentVariable(\"pageNumber\");",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize == postman.getEnvironmentVariable(\"pageSize\");",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list == \"\";",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages === 1;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage === false;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage === false;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber === 1;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "182a1174-e176-4706-bb93-af9cb2109b69",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber\", \"1\");",
											"postman.setEnvironmentVariable(\"pageSize\", \"20\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/GetPagedAuctionSessions?pageNumber={{pageNumber}}&pageSize={{pageSize}}&currentDate={{noresult_startdate}}&timeZone={{validtimezone}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"GetPagedAuctionSessions"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "currentDate",
											"value": "{{noresult_startdate}}"
										},
										{
											"key": "timeZone",
											"value": "{{validtimezone}}"
										},
										{
											"key": null,
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Auction Sessions - Invalid Request - Invalid Page Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f14bfaf-cc90-4390-9103-bdcc76b20fa0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Invalid Page Number",
											"pm.test(\"Correct Error Message for Invalid Page Number\", function () {",
											"pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getEnvironmentVariable(\"pageNumber_invalid\") + \"' is not valid.\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d66d054d-d703-4f0b-83cc-e53d3b8940ef",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber_invalid\", \"30000000000000\");",
											"postman.setEnvironmentVariable(\"pageSize\", \"20\");",
											"postman.setEnvironmentVariable(\"currentDate\", \"2018-08-14T00:00:00\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/GetPagedAuctionSessions?pageNumber={{pageNumber_invalid}}&pageSize={{pageSize}}&currentDate={{currentDate}}&timeZone={{validtimezone}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"GetPagedAuctionSessions"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber_invalid}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "currentDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "timeZone",
											"value": "{{validtimezone}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Auction Sessions - Invalid Request - Invalid Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f685d16c-7985-431f-95bd-bc3222674047",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Invalid Date",
											"pm.test(\"Correct Error Message for Invalid Page Number\", function () {",
											"pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getEnvironmentVariable(\"invalidcurrentDate\") + \"' is not valid.\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e20069da-a4a3-49dd-83be-e73f1c8862da",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/GetPagedAuctionSessions?pageNumber={{pageNumber}}&pageSize={{pageSize}}&currentDate={{invalidcurrentDate}}&timeZone={{validtimezone}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"GetPagedAuctionSessions"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "currentDate",
											"value": "{{invalidcurrentDate}}"
										},
										{
											"key": "timeZone",
											"value": "{{validtimezone}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Auction Sessions - Invalid Request - Invalid Page Size",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04f5ba47-595f-4aa9-9b42-bee0f3e9f8c6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Invalid Page Size",
											"pm.test(\"Correct Error Message for Invalid Page Number\", function () {",
											"pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getEnvironmentVariable(\"invalidcurrentDate\") + \"' is not valid.\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "68f51afc-654c-4a0a-90d1-8ac3b2a4f22b",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber\", \"2\");",
											"postman.setEnvironmentVariable(\"invalidpageSize\", \"300000000000\");",
											"postman.setEnvironmentVariable(\"currentDate\", \"2018-08-14T00:00:00\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/GetPagedAuctionSessions?pageNumber={{pageNumber}}&pageSize={{pageSize}}&currentDate={{invalidcurrentDate}}&timeZone={{validtimezone}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"GetPagedAuctionSessions"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "currentDate",
											"value": "{{invalidcurrentDate}}"
										},
										{
											"key": "timeZone",
											"value": "{{validtimezone}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Auction Sessions - Valid Request - Missing Page Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4da51fbf-1b5b-4815-84ed-b2df16be8936",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems !== undefined;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber === 0;",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize == postman.getEnvironmentVariable(\"pageSize\");",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list !== undefined;",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages !== undefined;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage !== undefined;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage !== undefined;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber !== undefined;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"pm.test(\"Validate each Auction Sessions inside List\", () => {",
											"   for (i = 0; i < jsonData.list.length; i++) {",
											"       ",
											" //var todayDate = new Date(Date.parse(postman.getEnvironmentVariable(\"auction_startDate_timestamp\")));",
											" //               console.log(todayDate);",
											" //               todayDate.getTime();",
											" ",
											"var moment = require('moment');",
											"//pm.globals.set(\"timestamp\", moment().format(\"MM/DD/YYYY\"));",
											"",
											" var todayDate = new Date(Date.parse(moment().format(\"MM/DD/YYYY\"))); //convert to NZ time",
											"                console.log(todayDate);",
											"                todayDate.getTime();",
											"                ",
											"                var auction_startDate = new Date(Date.parse(jsonData.list[i].startDate)); //change this once they implemented UTC",
											"                //var auction_startDate = new Date(Date.parse(\"2018-08-20T08:15:30Z\"))",
											"                console.log(auction_startDate);",
											"                auction_startDate.getTime();",
											"                ",
											"            pm.expect(auction_startDate).to.be.above(todayDate);",
											"            ",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.list[i].auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.list[i].venueId !== undefined;",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.list[i].name !== undefined;",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.list[i].finishDate !== undefined;",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.list[i].displayGroupId !== undefined;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.list[i].isInSession !== undefined;",
											"",
											"//Response body contains \"lotCount\" Entity",
											"tests[\"Response body includes lotCount entity from JSON data\"] = jsonData.list[i].lotCount !== undefined;",
											"",
											"   }",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ba130850-6046-4c52-ba02-b26e1084ac5a",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber\", \"1\");",
											"postman.setEnvironmentVariable(\"pageSize\", \"20\");",
											"",
											"//var startDate_current_timestamp = new Date(Date.now() + 43300000);",
											"var auction_currentDate_timestamp = new Date(Date.now() + 43300000);",
											"console.log(auction_currentDate_timestamp);",
											"",
											"postman.setEnvironmentVariable(\"auction_currentDate_timestamp\", auction_currentDate_timestamp.toISOString());",
											"console.log(auction_currentDate_timestamp.toISOString());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/GetPagedAuctionSessions?pageSize={{pageSize}}&currentDate={{auction_currentDate_timestamp}}&timeZone={{validtimezone}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"GetPagedAuctionSessions"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "currentDate",
											"value": "{{auction_currentDate_timestamp}}"
										},
										{
											"key": "timeZone",
											"value": "{{validtimezone}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Auction Sessions - Valid Request - Missing Page Size",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "563c4c77-931f-4efb-bcf9-1c55219fb2ca",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems !== undefined;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber == postman.getEnvironmentVariable(\"pageNumber\");",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize === 0;",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list !== undefined;",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages !== undefined;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage !== undefined;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage !== undefined;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber !== undefined;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"pm.test(\"Validate each Auction Sessions inside List\", () => {",
											"   for (i = 0; i < jsonData.list.length; i++) {",
											"       ",
											" //var todayDate = new Date(Date.parse(postman.getEnvironmentVariable(\"auction_startDate_timestamp\")));",
											" //               console.log(todayDate);",
											" //               todayDate.getTime();",
											" ",
											"var moment = require('moment');",
											"//pm.globals.set(\"timestamp\", moment().format(\"MM/DD/YYYY\"));",
											"",
											" var todayDate = new Date(Date.parse(moment().format(\"MM/DD/YYYY\"))); //convert to NZ time",
											"                console.log(todayDate);",
											"                todayDate.getTime();",
											"                ",
											"                var auction_startDate = new Date(Date.parse(jsonData.list[i].startDate)); //change this once they implemented UTC",
											"                //var auction_startDate = new Date(Date.parse(\"2018-08-20T08:15:30Z\"))",
											"                console.log(auction_startDate);",
											"                auction_startDate.getTime();",
											"                ",
											"            pm.expect(auction_startDate).to.be.above(todayDate);",
											"            ",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.list[i].auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.list[i].venueId !== undefined;",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.list[i].name !== undefined;",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.list[i].finishDate !== undefined;",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.list[i].displayGroupId !== undefined;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.list[i].isInSession !== undefined;",
											"",
											"//Response body contains \"lotCount\" Entity",
											"tests[\"Response body includes lotCount entity from JSON data\"] = jsonData.list[i].lotCount !== undefined;",
											"",
											"   }",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "abbf2f25-aa15-4f51-b664-d52e76891fa6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/GetPagedAuctionSessions?pageNumber={{pageNumber}}&currentDate={{auction_currentDate_timestamp}}&timeZone={{validtimezone}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"GetPagedAuctionSessions"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "currentDate",
											"value": "{{auction_currentDate_timestamp}}"
										},
										{
											"key": "timeZone",
											"value": "{{validtimezone}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Auction Sessions - Valid Request - Missing Current Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea63820c-19d6-47f0-924a-a4a0742bc53e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems !== undefined;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber == postman.getEnvironmentVariable(\"pageNumber\");",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize == postman.getEnvironmentVariable(\"pageSize\");",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list !== undefined;",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages !== undefined;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage !== undefined;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage !== undefined;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber !== undefined;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"pm.test(\"Validate each Auction Sessions inside List\", () => {",
											"   for (i = 0; i < jsonData.list.length; i++) {",
											"       ",
											" //var todayDate = new Date(Date.parse(postman.getEnvironmentVariable(\"auction_startDate_timestamp\")));",
											" //               console.log(todayDate);",
											" //               todayDate.getTime();",
											" ",
											"var moment = require('moment');",
											"//pm.globals.set(\"timestamp\", moment().format(\"MM/DD/YYYY\"));",
											"",
											" var todayDate = new Date(Date.parse(moment().format(\"MM/DD/YYYY\"))); //convert to NZ time",
											"                console.log(todayDate);",
											"                todayDate.getTime();",
											"                ",
											"                var auction_startDate = new Date(Date.parse(jsonData.list[i].startDate)); //change this once they implemented UTC",
											"                //var auction_startDate = new Date(Date.parse(\"2018-08-20T08:15:30Z\"))",
											"                console.log(auction_startDate);",
											"                auction_startDate.getTime();",
											"                ",
											"            pm.expect(auction_startDate).to.be.above(todayDate);",
											"            ",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.list[i].auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.list[i].venueId !== undefined;",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.list[i].name !== undefined;",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.list[i].finishDate !== undefined;",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.list[i].displayGroupId !== undefined;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.list[i].isInSession !== undefined;",
											"",
											"//Response body contains \"lotCount\" Entity",
											"tests[\"Response body includes lotCount entity from JSON data\"] = jsonData.list[i].lotCount !== undefined;",
											"",
											"   }",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6e4c82c1-45a6-46f4-b0eb-559024c042ec",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/GetPagedAuctionSessions?pageNumber={{pageNumber}}&pageSize={{pageSize}}&timeZone={{validtimezone}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"GetPagedAuctionSessions"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "timeZone",
											"value": "{{validtimezone}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Auction Sessions - Valid Request - Missing Timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c80e0ba4-b5bf-4b4d-8b75-41118e02725d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems !== undefined;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber == postman.getEnvironmentVariable(\"pageNumber\");",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize == postman.getEnvironmentVariable(\"pageSize\");",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list !== undefined;",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages !== undefined;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage !== undefined;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage !== undefined;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber !== undefined;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"pm.test(\"Validate each Auction Sessions inside List\", () => {",
											"   for (i = 0; i < jsonData.list.length; i++) {",
											"       ",
											" //var todayDate = new Date(Date.parse(postman.getEnvironmentVariable(\"auction_startDate_timestamp\")));",
											" //               console.log(todayDate);",
											" //               todayDate.getTime();",
											" ",
											"var moment = require('moment');",
											"//pm.globals.set(\"timestamp\", moment().format(\"MM/DD/YYYY\"));",
											"",
											" var todayDate = new Date(Date.parse(moment().format(\"MM/DD/YYYY\"))); //convert to NZ time",
											"                console.log(todayDate);",
											"                todayDate.getTime();",
											"                ",
											"                var auction_startDate = new Date(Date.parse(jsonData.list[i].startDate)); //change this once they implemented UTC",
											"                //var auction_startDate = new Date(Date.parse(\"2018-08-20T08:15:30Z\"))",
											"                console.log(auction_startDate);",
											"                auction_startDate.getTime();",
											"                ",
											"            pm.expect(auction_startDate).to.be.above(todayDate);",
											"            ",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.list[i].auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.list[i].venueId !== undefined;",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.list[i].name !== undefined;",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.list[i].finishDate !== undefined;",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.list[i].displayGroupId !== undefined;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.list[i].isInSession !== undefined;",
											"",
											"//Response body contains \"lotCount\" Entity",
											"tests[\"Response body includes lotCount entity from JSON data\"] = jsonData.list[i].lotCount !== undefined;",
											"",
											"   }",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6e4c82c1-45a6-46f4-b0eb-559024c042ec",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/GetPagedAuctionSessions?pageNumber={{pageNumber}}&pageSize={{pageSize}}&currentDate={{auction_currentDate_timestamp}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"GetPagedAuctionSessions"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "currentDate",
											"value": "{{auction_currentDate_timestamp}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Auction Sessions - Invalid Request - Invalid Time Zone",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f818bc7-5ea9-4d42-8f4e-671d39f63711",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Invalid Time Zone",
											"pm.test(\"Correct Error Message for Invalid Time Zone\", function () {",
											"pm.expect(pm.response.text()).to.include(\"Invalid timezone provided\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "74ca2aa1-121c-495d-8a0a-b6781581f394",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber_invalid\", \"30000000000000\");",
											"postman.setEnvironmentVariable(\"pageSize\", \"20\");",
											"postman.setEnvironmentVariable(\"currentDate\", \"2018-08-14T00:00:00\");",
											"postman.setEnvironmentVariable(\"pageNumber_noresults\", \"3000\");",
											"postman.setEnvironmentVariable(\"invalidtimezone\", \"Manila Time\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/GetPagedAuctionSessions?pageNumber={{pageNumber}}&pageSize={{pageSize}}&currentDate={{currentDate}}&timeZone={{invalidtimezone}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"GetPagedAuctionSessions"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "currentDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "timeZone",
											"value": "{{invalidtimezone}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Auction Results Test",
					"item": [
						{
							"name": "Get Auction Result - Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6158675-7b69-487e-97f9-b2b83a05cce4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionResults",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionResults"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Auction Result - Valid - No search results for the specified dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a7aa2a1-ef34-4d38-8c74-a1535517009f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(204);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"No Content\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff837177-391e-4ff7-8a4e-ba457ce8bb56",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionResults?startDate={{auction_startDate_noresult_filter}}&finishDate={{auction_finishDate_noresult_filter}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionResults"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{auction_startDate_noresult_filter}}"
										},
										{
											"key": "finishDate",
											"value": "{{auction_finishDate_noresult_filter}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Auction Result - Valid - StartDate only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55d4eecb-21ea-41ed-9db4-11e74eb4d3b6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Auction Sessions greater than auction_startDate\", ()=> {",
											"            for(i=0;i<jsonData.length;i++){",
											"                var auction_startDate_filter = new Date(Date.parse(postman.getEnvironmentVariable(\"auction_startDate_filter\")));",
											"                auction_startDate_filter.getTime();",
											"                ",
											"                var auction_startDate_result = new Date(Date.parse(jsonData[i].startDate));",
											"                auction_startDate_result.getTime();",
											"                ",
											"            pm.expect(auction_startDate_result).to.be.above(auction_startDate_filter);",
											"            }",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff837177-391e-4ff7-8a4e-ba457ce8bb56",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionResults?startDate={{auction_startDate_filter}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionResults"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{auction_startDate_filter}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Auction Result - Valid - FinishDate only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17de1dd9-a1d6-478e-9f3a-60604b6cc4c2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Auction Sessions greater than auction_finishDate\", ()=> {",
											"            for(i=0;i<jsonData.length;i++){",
											"               ",
											"            if(jsonData[i].finishDate !== null){",
											"                 var auction_finishDate_filter = new Date(Date.parse(postman.getEnvironmentVariable(\"auction_finishDate_filter\")));",
											"                auction_finishDate_filter.getTime();",
											"                ",
											"                var auction_finishDate_result = new Date(Date.parse(jsonData[i].finishDate));",
											"                auction_finishDate_result.getTime();",
											"                //console.log(auction_finishDate_result.getTime());",
											"                ",
											"                pm.expect(auction_finishDate_result).to.be.below(auction_finishDate_filter);",
											"    }    ",
											"            }",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff837177-391e-4ff7-8a4e-ba457ce8bb56",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionResults?finishDate={{auction_finishDate_filter}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionResults"
									],
									"query": [
										{
											"key": "finishDate",
											"value": "{{auction_finishDate_filter}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Auction Result - Valid - StartDate and FinishDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9cf855f8-4a51-473c-b88d-a06a2995c11c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Auction Sessions greater than auction_startDate\", ()=> {",
											"            for(i=0;i<jsonData.length;i++){",
											"                var auction_startDate_filter = new Date(Date.parse(postman.getEnvironmentVariable(\"auction_startDate_filter\")));",
											"                auction_startDate_filter.getTime();",
											"                ",
											"                var auction_startDate_result = new Date(Date.parse(jsonData[i].startDate));",
											"                auction_startDate_result.getTime();",
											"                ",
											"            pm.expect(auction_startDate_result).to.be.above(auction_startDate_filter);",
											"            }",
											"}); ",
											"",
											"pm.test(\"Auction Sessions less than auction_finishDate\", ()=> {",
											"            for(i=0;i<jsonData.length;i++){",
											"               ",
											"            if(jsonData[i].finishDate !== null){",
											"                 var auction_finishDate_filter = new Date(Date.parse(postman.getEnvironmentVariable(\"auction_finishDate_filter\")));",
											"                auction_finishDate_filter.getTime();",
											"                ",
											"                var auction_finishDate_result = new Date(Date.parse(jsonData[i].finishDate));",
											"                auction_finishDate_result.getTime();",
											"                //console.log(auction_finishDate_result.getTime());",
											"                ",
											"                pm.expect(auction_finishDate_result).to.be.below(auction_finishDate_filter);",
											"    }    ",
											"            }",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff837177-391e-4ff7-8a4e-ba457ce8bb56",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionResults?startDate={{auction_startDate_filter}}&finishDate={{auction_finishDate_filter}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionResults"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{auction_startDate_filter}}"
										},
										{
											"key": "finishDate",
											"value": "{{auction_finishDate_filter}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Put Auction Tests",
					"item": [
						{
							"name": "Put Auction Session - Valid - Update All Parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b56e2dfd-2ac4-4367-acc3-403f2aa19830",
										"exec": [
											"postman.setEnvironmentVariable(\"auction_name_updated\", \"Auction Name Updated 1\");",
											"postman.setEnvironmentVariable(\"auction_startDate_updated\", \"2018-09-01T08:15:30+00:00\");",
											"postman.setEnvironmentVariable(\"auction_finishDate_updated\", \"2018-09-01T08:18:30+00:00\");",
											"postman.setEnvironmentVariable(\"auctionSessionAdmin_updated\", \"test@barfoot.co.nz\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "41953d68-7ac8-41e7-8bcd-c21d55db130f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId_updated\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name_updated\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate == postman.getEnvironmentVariable(\"auction_startDate_updated\");",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate == postman.getEnvironmentVariable(\"auction_finishDate_updated\");",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId == postman.getGlobalVariable(\"displayGroupId\");",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession == postman.getEnvironmentVariable(\"isInSession\");",
											"",
											"//Response body contains \"auctionSessionAdmin\" Entity",
											"tests[\"Response body includes auctionSessionAdmin entity from JSON data\"] = jsonData.auctionSessionAdmin == postman.getEnvironmentVariable(\"auctionSessionAdmin_updated\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name_updated}}\",\n   \"venueId\": {{auction_venueId_updated}},\n  \"startDate\": \"{{auction_startDate_updated}}\",\n  \"finishDate\": \"{{auction_finishDate_updated}}\",\n  \"displayGroupId\": {{displayGroupId}},\n  \"auctionSessionAdmin\": \"{{auctionSessionAdmin_updated}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/{{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"{{auctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Auction Session - Valid - Update Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0a8e534b-f728-4b85-8eb4-9208a87c959f",
										"exec": [
											"postman.setEnvironmentVariable(\"auction_name_only\", \"Auction Name Only\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "85c65a3c-458b-44e9-be04-9d59c9f6e8fa",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId_updated\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name_only\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate == postman.getEnvironmentVariable(\"auction_startDate_updated\");",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate == postman.getEnvironmentVariable(\"auction_finishDate_updated\");",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId === null;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession == postman.getEnvironmentVariable(\"isInSession\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name_only}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/{{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"{{auctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Auction Session - Valid - Update VenueId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a2d0afe1-0842-430a-880f-7f9de845d01e",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4f2534a8-3dae-46f0-b6e2-3a891b85b4ab",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId_updated_2\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name_only\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate == postman.getEnvironmentVariable(\"auction_startDate_updated\");",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate == postman.getEnvironmentVariable(\"auction_finishDate_updated\");",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId === null;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession == postman.getEnvironmentVariable(\"isInSession\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n   \"venueId\": {{auction_venueId_updated_2}}\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/{{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"{{auctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Auction Session - Valid - Update Auction StartDate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4d991633-1d83-4e3b-b3ab-9db860023bcf",
										"exec": [
											"",
											"postman.setEnvironmentVariable(\"auction_startDate_only\", \"2018-08-01T17:15:00+00:00\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "84d97940-e819-43c6-9dae-12641fd965b4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId_updated_2\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name_only\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate == postman.getEnvironmentVariable(\"auction_startDate_only\");",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate == postman.getEnvironmentVariable(\"auction_finishDate_updated\");",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId === null;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession == postman.getEnvironmentVariable(\"isInSession\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"startDate\": \"{{auction_startDate_only}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/{{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"{{auctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Auction Session - Valid - Update Auction FinishDate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "69458650-9303-4793-9843-0c1cd39cf6ca",
										"exec": [
											"postman.setEnvironmentVariable(\"auction_finishDate_only\", \"2018-08-01T18:20:00+00:00\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d2feca3-b148-4942-b41b-d381fd61c722",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId_updated_2\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name_only\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate == postman.getEnvironmentVariable(\"auction_startDate_only\");",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate == postman.getEnvironmentVariable(\"auction_finishDate_only\");",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId === null;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession == postman.getEnvironmentVariable(\"isInSession\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"finishDate\": \"{{auction_finishDate_only}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/{{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"{{auctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Auction Session - Valid - Update DisplayGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9f24b003-cc23-4516-b2e8-639f7281a7e2",
										"exec": [
											"//Create Display Group Test Data for Update",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/DisplayGroups/\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"venueId\": pm.globals.get('auction_venueId_updated_2'),",
											"            \"name\": pm.environment.get('displayGroupName'),",
											"            \"description\": pm.environment.get('displayGroupDescription'),",
											"            \"displayConfigurationIds\": [],",
											"            \"auctionSessionIds\": []",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"displayGroupId2\", res.json().displayGroupId);",
											"    }",
											");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8f13e24f-3774-4fc5-a3f1-d193b6f8af3b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId_updated_2\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name_only\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate == postman.getEnvironmentVariable(\"auction_startDate_only\");",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate == postman.getEnvironmentVariable(\"auction_finishDate_only\");",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId == postman.getGlobalVariable(\"displayGroupId2\");",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession == postman.getEnvironmentVariable(\"isInSession\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"displayGroupId\": {{displayGroupId2}}\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/{{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"{{auctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Auction Session - Valid - No Change in Parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0e52dc15-ca93-47f2-85cd-642aad45736c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "24b6810c-4b58-4fb3-be7e-75062250b49b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//auctionSessionId has a value",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId_updated_2\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"auction_name_only\");",
											"",
											"//Response body contains \"startDate\" Entity",
											"tests[\"Response body includes startDate entity from JSON data\"] = jsonData.startDate == postman.getEnvironmentVariable(\"auction_startDate_only\");",
											"",
											"//Response body contains \"finishDate\" Entity",
											"tests[\"Response body includes finishDate entity from JSON data\"] = jsonData.finishDate == postman.getEnvironmentVariable(\"auction_finishDate_only\");",
											"",
											"//Response body contains \"displayGroupId\" Entity",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.displayGroupId === null;",
											"",
											"//Response body contains \"isInSession\" Entity",
											"tests[\"Response body includes isInSession entity from JSON data\"] = jsonData.isInSession == postman.getEnvironmentVariable(\"isInSession\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"\",\n   \"venueId\": \"\",\n  \"startDate\": \"\",\n  \"finishDate\": \"\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/{{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"{{auctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Auction Session - Invalid - Non Existing auctionSessionId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0e52dc15-ca93-47f2-85cd-642aad45736c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0559f5a7-0751-4fdc-82e6-3247f444874b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Body contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not find Auction Session \" + postman.getGlobalVariable(\"nonexistingauctionSessionId\") + \" in System\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name_updated}}\",\n   \"venueId\": {{auction_venueId_updated}},\n  \"startDate\": \"{{auction_startDate_updated}}\",\n  \"finishDate\": \"{{auction_finishDate_updated}}\",\n  \"displayGroupId\": {{displayGroupId}}\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/{{nonexistingauctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"{{nonexistingauctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Auction Session - Invalid - Missing Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0e52dc15-ca93-47f2-85cd-642aad45736c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a3bf3888-9aa5-4c71-b4f4-72d79664f3f6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Body contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/{{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"{{auctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Auction Session - Invalid  Request URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0e52dc15-ca93-47f2-85cd-642aad45736c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "43652a88-4b0b-405c-a8e0-d7a87ecda884",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name_updated}}\",\n   \"venueId\": {{auction_venueId_updated}},\n  \"startDate\": \"{{auction_startDate_updated}}\",\n  \"finishDate\": \"{{auction_finishDate_updated}}\"\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSession/{{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSession",
										"{{auctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Auction Session - Invalid  Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0e52dc15-ca93-47f2-85cd-642aad45736c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d7d0a3b9-8edd-43ea-a5c1-6022dd1724fd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name_updated}}\",\n   \"venueId\": {{auction_venueId_updated}},\n  \"startDate\": \"{{auction_startDate_updated}}\",\n  \"finishDate\": \"{{auction_finishDate_updated}}\"\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/{{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"{{auctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Auction Session - Invalid  Request - Missing Header - Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0e52dc15-ca93-47f2-85cd-642aad45736c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8a47c986-6508-4efe-a974-abaadd3d982b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"var jsonData = JSON.parse(responseBody);",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{auction_name_updated}}\",\n   \"venueId\": {{auction_venueId_updated}},\n  \"startDate\": \"{{auction_startDate_updated}}\",\n  \"finishDate\": \"{{auction_finishDate_updated}}\"\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/{{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"{{auctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Auction Session - Invalid - Non Existing VenueId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a88e1fce-718e-40cc-becc-623d56331e48",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a3861d6c-5080-4cc2-992b-a987152f57ce",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Non Existing VenueId",
											"pm.test(\"Correct Error Message for Non Existing VenueId\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"No Venue was found matching ID \" + postman.getGlobalVariable(\"nonexistingvenueId\") + \". Cannot assign Auction Session to Venue\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n   \"venueId\": {{nonexistingvenueId}},\n}\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/{{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"{{auctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Auction Session - Invalid - Non Numeric VenueId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a88e1fce-718e-40cc-becc-623d56331e48",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b1a43340-9898-412e-9b5c-38071ba3b58e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Non Existing VenueId",
											"pm.test(\"Correct Error Message for Non Existing VenueId\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Input string '\" + postman.getGlobalVariable(\"invalidvenueId\") + \"' is not a valid integer.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n   \"venueId\": {{invalidvenueId}},\n}\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/{{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"{{auctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Auction Session - Invalid - Non Numeric DisplayGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a88e1fce-718e-40cc-becc-623d56331e48",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e0e6c7ab-d8b3-4fb4-af78-1f12b96dd9ca",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Non Existing VenueId",
											"pm.test(\"Correct Error Message for Non Existing VenueId\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \" + postman.getGlobalVariable(\"nonnumericdisplayGroupId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n  \"displayGroupId\": \"{{nonnumericdisplayGroupId}}\"\n}\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/{{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"{{auctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Auction Session - Invalid - Non Existing DisplayGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a88e1fce-718e-40cc-becc-623d56331e48",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ef4d711a-b717-46d5-9355-39da38b1ee92",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Non Existing VenueId",
											"pm.test(\"Correct Error Message for Non Existing VenueId\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"No Display Group was found matching ID \" + postman.getGlobalVariable(\"nonexistingdisplayGroupId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n  \"displayGroupId\": \"{{nonexistingdisplayGroupId}}\"\n}\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/{{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"{{auctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Auction Session - Invalid - Overlapping Auction Sessions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dad5068f-902c-4606-917d-774d227dcb7d",
										"exec": [
											"//Create Auction Session Test Data",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/AuctionSessions/\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"name\": pm.environment.get('auction_name'),",
											"            \"venueId\": pm.globals.get('auction_venueId'),",
											"            \"startDate\" :pm.environment.get(\"auction_startDate_timestamp\"),",
											"            \"finishDate\" : pm.environment.get(\"auction_finishDate_timestamp\"),",
											"            \"displayGroupId\": pm.globals.get('displayGroupId_overlapping'),",
											"            \"isInSession\": true",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"auctionSessionId_overlapping2\", res.json().auctionSessionId);",
											"    }",
											");",
											"",
											"//Assign Auction Session to a lot",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/Lots/\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"auctionSessionId\": pm.globals.get('auctionSessionId_overlapping2'),",
											"            \"order\": _.random(1, 10000000),",
											"            \"description\": pm.environment.get('description'),",
											"            \"reserveMet\": pm.environment.get('reserveMet'),",
											"            \"listingId\": _.random(1, 900000000),",
											"            \"address\": pm.environment.get('address'),",
											"            \"postponedDateTime\": pm.environment.get('postponedDateTime'),",
											"            \"auctionStatus\": pm.environment.get('auctionStatus'),",
											"            \"featureDescription\": pm.environment.get('featureDescription'),",
											"            \"agentIds\": [],",
											"            ",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"lotId_today\", res.json().lotId);",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bb43403c-ed90-475f-ad05-8ac053f0da29",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Display Group \" + postman.getGlobalVariable(\"displayGroupId_overlapping\") + \" is currently being used by Auction Session \" + postman.getGlobalVariable(\"auctionSessionId_overlapping2\") + \" at the same time.\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{auction_startDate_timestamp}}\",\r\n  \"finishDate\": \"{{auction_finishDate_timestamp}}\",\r\n  \"displayGroupId\": {{displayGroupId_overlapping}},\r\n  \"isInSession\": true\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/AuctionSessions/{{auctionSessionId3}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"AuctionSessions",
										"{{auctionSessionId3}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Lot",
			"item": [
				{
					"name": "Post Lot",
					"item": [
						{
							"name": "Post Lot - Valid Request - All Parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "081fd3b8-8829-4637-a871-282cfb7eb9d9",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"postman.setEnvironmentVariable(\"isSalePriceHidden\", false);",
											"postman.setEnvironmentVariable(\"isPaused\", false);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f9bb1b6b-0378-4068-807d-14dd76625198",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Lot ID for the other tests",
											"postman.setGlobalVariable(\"lotId\", jsonData.lotId);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId !== undefined;",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId\");",
											"",
											"//Response body contains \"order\" Entity",
											"tests[\"Response body includes order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"order\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"postponedDateTime\" Entity",
											"tests[\"Response body includes postponedDateTime entity from JSON data\"] = jsonData.postponedDateTime == postman.getEnvironmentVariable(\"postponedDateTime\");",
											"",
											"//Response body contains \"isSalePriceHidden\" Entity",
											"tests[\"Response body includes isSalePriceHidden entity from JSON data\"] = jsonData.isSalePriceHidden == postman.getEnvironmentVariable(\"isSalePriceHidden\");",
											"",
											"//Response body contains \"isPaused\" Entity",
											"tests[\"Response body includes isPaused entity from JSON data\"] = jsonData.isPaused == postman.getEnvironmentVariable(\"isPaused\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"featureDescription\" Entity",
											"tests[\"Response body includes featureDescription entity from JSON data\"] = jsonData.featureDescription == postman.getEnvironmentVariable(\"featureDescription\");",
											"",
											"//Response body contains \"soldDate\" Entity",
											"tests[\"Response body includes soldDate entity from JSON data\"] = jsonData.soldDate == postman.getEnvironmentVariable(\"soldDate\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice == postman.getEnvironmentVariable(\"soldPrice\");",
											"",
											"//Response body contains \"images\" Entity",
											"tests[\"Response body includes images entity from JSON data\"] = jsonData.images === null;",
											"",
											"//Response body contains \"lotDetail\" Entity",
											"tests[\"Response body includes lotDetail entity from JSON data\"] = jsonData.lotDetail === null;",
											"",
											"//Response body contains \"bids\" Entity",
											"tests[\"Response body includes bids entity from JSON data\"] = jsonData.bids === null;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"isSalePriceHidden\": {{isSalePriceHidden}},\r\n  \"isPaused\": {{isPaused}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Duplicate ListingID in an Auction Session Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f8616e09-d968-4056-85b6-ebd2cb7c3c61",
										"exec": [
											"postman.setEnvironmentVariable(\"order1\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"postman.setEnvironmentVariable(\"agentIds\", \"1,3,4\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3501a98f-478d-4dca-99ef-611aedf3db75",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A listing ID must be unique to the auction session. Listing ID \" + postman.getEnvironmentVariable(\"listingId\") + \" already exists\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order1}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Duplicate Order in an Auction Session",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b1263db0-a231-4b1a-a89a-2206898f42f6",
										"exec": [
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"postman.setEnvironmentVariable(\"agentIds\", \"1,3,4\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "16ceaf2c-c260-4995-a742-d5ae2f69c9a9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include((\"Process has been cancelled: Order number \") + postman.getEnvironmentVariable(\"order\") +  (\" is not unique against the Auction Session\"));",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Valid Request - AuctionStatus=0 None",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "113ba789-3865-4f29-9a97-2f8be2050856",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c736e806-97b3-4033-afeb-cd1f6dd08e47",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Lot ID for the other tests",
											"postman.setGlobalVariable(\"lotId_today_1\", jsonData.lotId);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId !== undefined;",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"order\" Entity",
											"tests[\"Response body includes order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"order\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"postponedDateTime\" Entity",
											"tests[\"Response body includes postponedDateTime entity from JSON data\"] = jsonData.postponedDateTime == postman.getEnvironmentVariable(\"postponedDateTime\");",
											"",
											"//Response body contains \"plusGST\" Entity",
											"tests[\"Response body includes plusGST entity from JSON data\"] = jsonData.plusGST == postman.getEnvironmentVariable(\"plusGST\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"featureDescription\" Entity",
											"tests[\"Response body includes featureDescription entity from JSON data\"] = jsonData.featureDescription == postman.getEnvironmentVariable(\"featureDescription\");",
											"",
											"//Response body contains \"soldDate\" Entity",
											"tests[\"Response body includes soldDate entity from JSON data\"] = jsonData.soldDate === null;",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice === null;",
											"",
											"//Response body contains \"images\" Entity",
											"tests[\"Response body includes images entity from JSON data\"] = jsonData.images === null;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Valid Request - IsSalePriceHidden=True",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8aa181a7-8e00-480b-9081-ffa90fb2a656",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"postman.setEnvironmentVariable(\"isSalePriceHidden\", 1);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9b85ae59-c126-4026-b532-85fe26118807",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Lot ID for the other tests",
											"postman.setGlobalVariable(\"lotId2\", jsonData.lotId);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId !== undefined;",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId\");",
											"",
											"//Response body contains \"order\" Entity",
											"tests[\"Response body includes order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"order\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"postponedDateTime\" Entity",
											"tests[\"Response body includes postponedDateTime entity from JSON data\"] = jsonData.postponedDateTime == postman.getEnvironmentVariable(\"postponedDateTime\");",
											"",
											"//Response body contains \"plusGST\" Entity",
											"tests[\"Response body includes plusGST entity from JSON data\"] = jsonData.plusGST == postman.getEnvironmentVariable(\"plusGST\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"featureDescription\" Entity",
											"tests[\"Response body includes featureDescription entity from JSON data\"] = jsonData.featureDescription == postman.getEnvironmentVariable(\"featureDescription\");",
											"",
											"//Response body contains \"soldDate\" Entity",
											"tests[\"Response body includes soldDate entity from JSON data\"] = jsonData.soldDate == postman.getEnvironmentVariable(\"soldDate\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice == postman.getEnvironmentVariable(\"soldPrice\");",
											"",
											"",
											"//Response body contains \"images\" Entity",
											"tests[\"Response body includes images entity from JSON data\"] = jsonData.images === null;",
											"",
											"//Response body contains \"isSalePriceHidden\" Entity",
											"tests[\"Response body includes isSalePriceHidden entity from JSON data\"] = jsonData.isSalePriceHidden == postman.getEnvironmentVariable(\"isSalePriceHidden\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"isSalePriceHidden\": {{isSalePriceHidden}},\r\n  \"isPaused\": {{isPaused}},\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Valid Request - IsPaused=True",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d6272c6a-3d2d-4d75-ac04-2a1ce3c71614",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"postman.setEnvironmentVariable(\"isPaused\", 1);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "507f9e10-099d-4ed2-9b9e-0e81316a5f2c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Lot ID for the other tests",
											"postman.setGlobalVariable(\"lotId2\", jsonData.lotId);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId !== undefined;",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId\");",
											"",
											"//Response body contains \"order\" Entity",
											"tests[\"Response body includes order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"order\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"postponedDateTime\" Entity",
											"tests[\"Response body includes postponedDateTime entity from JSON data\"] = jsonData.postponedDateTime == postman.getEnvironmentVariable(\"postponedDateTime\");",
											"",
											"//Response body contains \"plusGST\" Entity",
											"tests[\"Response body includes plusGST entity from JSON data\"] = jsonData.plusGST == postman.getEnvironmentVariable(\"plusGST\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"featureDescription\" Entity",
											"tests[\"Response body includes featureDescription entity from JSON data\"] = jsonData.featureDescription == postman.getEnvironmentVariable(\"featureDescription\");",
											"",
											"//Response body contains \"soldDate\" Entity",
											"tests[\"Response body includes soldDate entity from JSON data\"] = jsonData.soldDate == postman.getEnvironmentVariable(\"soldDate\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice == postman.getEnvironmentVariable(\"soldPrice\");",
											"",
											"//Response body contains \"images\" Entity",
											"tests[\"Response body includes images entity from JSON data\"] = jsonData.images === null;",
											"",
											"//Response body contains \"isPaused\" Entity",
											"tests[\"Response body includes isPaused entity from JSON data\"] = jsonData.isPaused == postman.getEnvironmentVariable(\"isPaused\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"isSalePriceHidden\": {{isSalePriceHidden}},\r\n  \"isPaused\": {{isPaused}},\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Valid Request - Add Lot Details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "949f47e3-7923-4c46-82ad-827a54589e8e",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"1\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "97d2b230-4978-451e-901b-ac10bbb316ac",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Lot ID for the other tests",
											"postman.setGlobalVariable(\"lotId_today_10\", jsonData.lotId);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId !== undefined;",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"order\" Entity",
											"tests[\"Response body includes order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"order\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"postponedDateTime\" Entity",
											"tests[\"Response body includes postponedDateTime entity from JSON data\"] = jsonData.postponedDateTime == postman.getEnvironmentVariable(\"postponedDateTime\");",
											"",
											"//Response body contains \"plusGST\" Entity",
											"tests[\"Response body includes plusGST entity from JSON data\"] = jsonData.plusGST == postman.getEnvironmentVariable(\"plusGST\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"featureDescription\" Entity",
											"tests[\"Response body includes featureDescription entity from JSON data\"] = jsonData.featureDescription == postman.getEnvironmentVariable(\"featureDescription\");",
											"",
											"//Response body contains \"soldDate\" Entity",
											"tests[\"Response body includes soldDate entity from JSON data\"] = jsonData.soldDate === null;",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice === null;",
											"",
											"//Response body contains \"images\" Entity",
											"tests[\"Response body includes images entity from JSON data\"] = jsonData.images === null;",
											"",
											"pm.test(\"Test for LotId in LotDetail\", () => {",
											"   for (i = 0; i < jsonData.lotDetail.length-1; i++) {",
											"      tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotDetail[i].lotId == postman.getGlobalVariable(\"lotId_today_10\");",
											"      console.log(jsonData.lotDetail[i].lotId);",
											"   }",
											"});",
											"",
											"pm.test(\"Test if key_agent is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].key == postman.getEnvironmentVariable(\"key_agent\")) {",
											"    console.log(\"key_agent is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if key_agent2 is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].key == postman.getEnvironmentVariable(\"key_agent2\")) {",
											"    console.log(\"key_agent2 is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if value_agent is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].value == postman.getEnvironmentVariable(\"value_agent\")) {",
											"    console.log(\"value_agent is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if value_agent2 is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].value == postman.getEnvironmentVariable(\"value_agent2\")) {",
											"    console.log(\"value_agent2 is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if value_branch is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].value == postman.getEnvironmentVariable(\"value_branch\")) {",
											"    console.log(\"value_branch is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if value_branch2 is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].value == postman.getEnvironmentVariable(\"value_branch2\")) {",
											"    console.log(\"value_branch2 is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n   \"lotDetail\": [\r\n        {\r\n            \"key\": \"{{key_agent}}\",\r\n            \"value\": \"{{value_agent}}\"\r\n        },\r\n        {\r\n            \"key\": \"{{key_branch}}\",\r\n            \"value\": \"{{value_branch}}\"\r\n        },\r\n        {\r\n            \"key\": \"{{key_agent2}}\",\r\n            \"value\": \"{{value_agent2}}\"\r\n        },\r\n        {\r\n           \"key\": \"{{key_branch2}}\",\r\n            \"value\": \"{{value_branch2}}\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Valid Request - Add Images",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "949f47e3-7923-4c46-82ad-827a54589e8e",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"1\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "97d2b230-4978-451e-901b-ac10bbb316ac",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Lot ID for the other tests",
											"postman.setGlobalVariable(\"lotId_today_12\", jsonData.lotId);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId !== undefined;",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"order\" Entity",
											"tests[\"Response body includes order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"order\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"postponedDateTime\" Entity",
											"tests[\"Response body includes postponedDateTime entity from JSON data\"] = jsonData.postponedDateTime == postman.getEnvironmentVariable(\"postponedDateTime\");",
											"",
											"//Response body contains \"plusGST\" Entity",
											"tests[\"Response body includes plusGST entity from JSON data\"] = jsonData.plusGST == postman.getEnvironmentVariable(\"plusGST\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"featureDescription\" Entity",
											"tests[\"Response body includes featureDescription entity from JSON data\"] = jsonData.featureDescription == postman.getEnvironmentVariable(\"featureDescription\");",
											"",
											"//Response body contains \"soldDate\" Entity",
											"tests[\"Response body includes soldDate entity from JSON data\"] = jsonData.soldDate === null;",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice === null;",
											"",
											"//Image ID has a value",
											"tests[\"Response body includes imageId entity from JSON data\"] = jsonData.images[0].imageId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.images[0].lotId == postman.getGlobalVariable(\"lotId_today_12\");",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.images[0].order == postman.getEnvironmentVariable(\"image_order\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.images[0].url == postman.getEnvironmentVariable(\"image_URL\");",
											"",
											"//Response body contains \"isDisplayed\" Entity",
											"tests[\"Response body includes isDisplayed entity from JSON data\"] = jsonData.images[0].isDisplayed == postman.getEnvironmentVariable(\"isDisplayed\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n   \"images\": [\r\n      {\r\n        \"order\": {{image_order}},\r\n\t\t\"url\": \"{{image_URL}}\",\r\n\t\t\"isDisplayed\": {{isDisplayed}}\r\n      }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Valid Request - AuctionStatus=1 InProgress",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "949f47e3-7923-4c46-82ad-827a54589e8e",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", 2);",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"1\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "97d2b230-4978-451e-901b-ac10bbb316ac",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Lot ID for the other tests",
											"postman.setGlobalVariable(\"lotId_today_2\", jsonData.lotId);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId !== undefined;",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"order\" Entity",
											"tests[\"Response body includes order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"order\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"postponedDateTime\" Entity",
											"tests[\"Response body includes postponedDateTime entity from JSON data\"] = jsonData.postponedDateTime == postman.getEnvironmentVariable(\"postponedDateTime\");",
											"",
											"//Response body contains \"plusGST\" Entity",
											"tests[\"Response body includes plusGST entity from JSON data\"] = jsonData.plusGST == postman.getEnvironmentVariable(\"plusGST\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"featureDescription\" Entity",
											"tests[\"Response body includes featureDescription entity from JSON data\"] = jsonData.featureDescription == postman.getEnvironmentVariable(\"featureDescription\");",
											"",
											"//Response body contains \"soldDate\" Entity",
											"tests[\"Response body includes soldDate entity from JSON data\"] = jsonData.soldDate === null;",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice === null;",
											"",
											"//Response body contains \"images\" Entity",
											"tests[\"Response body includes images entity from JSON data\"] = jsonData.images === null;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Valid Request - AuctionStatus=2 NoBids",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bda62acd-6815-421b-bf9f-af09fa44ce77",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", 3);",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"2\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3eb1b5ae-0e20-4881-adb4-fe5d3eab241e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Lot ID for the other tests",
											"postman.setGlobalVariable(\"lotId_today_3\", jsonData.lotId);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId !== undefined;",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"order\" Entity",
											"tests[\"Response body includes order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"order\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"postponedDateTime\" Entity",
											"tests[\"Response body includes postponedDateTime entity from JSON data\"] = jsonData.postponedDateTime == postman.getEnvironmentVariable(\"postponedDateTime\");",
											"",
											"//Response body contains \"plusGST\" Entity",
											"tests[\"Response body includes plusGST entity from JSON data\"] = jsonData.plusGST == postman.getEnvironmentVariable(\"plusGST\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"featureDescription\" Entity",
											"tests[\"Response body includes featureDescription entity from JSON data\"] = jsonData.featureDescription == postman.getEnvironmentVariable(\"featureDescription\");",
											"",
											"//Response body contains \"soldDate\" Entity",
											"tests[\"Response body includes soldDate entity from JSON data\"] = jsonData.soldDate === null;",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice === null;",
											"",
											"//Response body contains \"images\" Entity",
											"tests[\"Response body includes images entity from JSON data\"] = jsonData.images === null;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Valid Request - AuctionStatus=3 PassedIn",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d30a51f9-1d6c-4047-9c13-d636702bbad5",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", 4);",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"3\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a0c49ba9-2c0c-44b8-ab25-396a76333452",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Lot ID for the other tests",
											"postman.setGlobalVariable(\"lotId_today_4\", jsonData.lotId);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId !== undefined;",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"order\" Entity",
											"tests[\"Response body includes order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"order\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"postponedDateTime\" Entity",
											"tests[\"Response body includes postponedDateTime entity from JSON data\"] = jsonData.postponedDateTime == postman.getEnvironmentVariable(\"postponedDateTime\");",
											"",
											"//Response body contains \"plusGST\" Entity",
											"tests[\"Response body includes plusGST entity from JSON data\"] = jsonData.plusGST == postman.getEnvironmentVariable(\"plusGST\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"featureDescription\" Entity",
											"tests[\"Response body includes featureDescription entity from JSON data\"] = jsonData.featureDescription == postman.getEnvironmentVariable(\"featureDescription\");",
											"",
											"//Response body contains \"soldDate\" Entity",
											"tests[\"Response body includes soldDate entity from JSON data\"] = jsonData.soldDate === null;",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice === null;",
											"",
											"//Response body contains \"images\" Entity",
											"tests[\"Response body includes images entity from JSON data\"] = jsonData.images === null;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Valid Request - AuctionStatus=4 Sold",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c7e0d0b4-26c1-4ed2-9038-db6d8c0c609e",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", 5);",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"4\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "24f4d882-3869-4a08-91b7-fe95dc2f2a74",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Lot ID for the other tests",
											"postman.setGlobalVariable(\"lotId_today_5\", jsonData.lotId);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId !== undefined;",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"order\" Entity",
											"tests[\"Response body includes order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"order\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"postponedDateTime\" Entity",
											"tests[\"Response body includes postponedDateTime entity from JSON data\"] = jsonData.postponedDateTime == postman.getEnvironmentVariable(\"postponedDateTime\");",
											"",
											"//Response body contains \"plusGST\" Entity",
											"tests[\"Response body includes plusGST entity from JSON data\"] = jsonData.plusGST == postman.getEnvironmentVariable(\"plusGST\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"featureDescription\" Entity",
											"tests[\"Response body includes featureDescription entity from JSON data\"] = jsonData.featureDescription == postman.getEnvironmentVariable(\"featureDescription\");",
											"",
											"//Response body contains \"soldDate\" Entity",
											"tests[\"Response body includes soldDate entity from JSON data\"] = jsonData.soldDate == postman.getEnvironmentVariable(\"soldDate\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice == postman.getEnvironmentVariable(\"soldPrice\");",
											"",
											"//Response body contains \"images\" Entity",
											"tests[\"Response body includes images entity from JSON data\"] = jsonData.images === null;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Valid Request - AuctionStatus=5 Selling",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "17970cbf-f940-4df0-8bbd-967d9b956c05",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", 6);",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"5\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8fbb6f2d-81db-4078-8877-bfa30dcf542f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Lot ID for the other tests",
											"postman.setGlobalVariable(\"lotId_today_6\", jsonData.lotId);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId !== undefined;",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"order\" Entity",
											"tests[\"Response body includes order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"order\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"postponedDateTime\" Entity",
											"tests[\"Response body includes postponedDateTime entity from JSON data\"] = jsonData.postponedDateTime == postman.getEnvironmentVariable(\"postponedDateTime\");",
											"",
											"//Response body contains \"plusGST\" Entity",
											"tests[\"Response body includes plusGST entity from JSON data\"] = jsonData.plusGST == postman.getEnvironmentVariable(\"plusGST\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"featureDescription\" Entity",
											"tests[\"Response body includes featureDescription entity from JSON data\"] = jsonData.featureDescription == postman.getEnvironmentVariable(\"featureDescription\");",
											"",
											"//Response body contains \"soldDate\" Entity",
											"tests[\"Response body includes soldDate entity from JSON data\"] = jsonData.soldDate == postman.getEnvironmentVariable(\"soldDate\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice == postman.getEnvironmentVariable(\"soldPrice\");",
											"",
											"//Response body contains \"images\" Entity",
											"tests[\"Response body includes images entity from JSON data\"] = jsonData.images === null;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Valid Request - AuctionStatus=6 Withdrawn",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4078a830-122c-4d03-88ef-2627ecd1ae35",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", 7);",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"6\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ab327095-fd2a-4049-87c2-b1cf1d6579c6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Lot ID for the other tests",
											"postman.setGlobalVariable(\"lotId_today_7\", jsonData.lotId);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId !== undefined;",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"order\" Entity",
											"tests[\"Response body includes order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"order\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"postponedDateTime\" Entity",
											"tests[\"Response body includes postponedDateTime entity from JSON data\"] = jsonData.postponedDateTime == postman.getEnvironmentVariable(\"postponedDateTime\");",
											"",
											"//Response body contains \"plusGST\" Entity",
											"tests[\"Response body includes plusGST entity from JSON data\"] = jsonData.plusGST == postman.getEnvironmentVariable(\"plusGST\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"featureDescription\" Entity",
											"tests[\"Response body includes featureDescription entity from JSON data\"] = jsonData.featureDescription == postman.getEnvironmentVariable(\"featureDescription\");",
											"",
											"//Response body contains \"soldDate\" Entity",
											"tests[\"Response body includes soldDate entity from JSON data\"] = jsonData.soldDate === null;",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice === null;",
											"",
											"//Response body contains \"images\" Entity",
											"tests[\"Response body includes images entity from JSON data\"] = jsonData.images === null;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Valid Request - AuctionStatus=7 SoldPrior",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bd5db3f4-d7a8-46ed-823f-b557e5f9aaa9",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", 8);",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"7\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ade57b70-6e55-484c-b866-478c16cb6cea",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Lot ID for the other tests",
											"postman.setGlobalVariable(\"lotId_today_8\", jsonData.lotId);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId !== undefined;",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"order\" Entity",
											"tests[\"Response body includes order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"order\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"postponedDateTime\" Entity",
											"tests[\"Response body includes postponedDateTime entity from JSON data\"] = jsonData.postponedDateTime == postman.getEnvironmentVariable(\"postponedDateTime\");",
											"",
											"//Response body contains \"plusGST\" Entity",
											"tests[\"Response body includes plusGST entity from JSON data\"] = jsonData.plusGST == postman.getEnvironmentVariable(\"plusGST\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"featureDescription\" Entity",
											"tests[\"Response body includes featureDescription entity from JSON data\"] = jsonData.featureDescription == postman.getEnvironmentVariable(\"featureDescription\");",
											"",
											"//Response body contains \"soldDate\" Entity",
											"tests[\"Response body includes soldDate entity from JSON data\"] = jsonData.soldDate === null;",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice === null;",
											"",
											"//Response body contains \"images\" Entity",
											"tests[\"Response body includes images entity from JSON data\"] = jsonData.images === null;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Valid Request - AuctionStatus=8 Postponed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d487b2d6-d09b-4c80-b20f-8b7aa8ada11b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", 9);",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"8\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"agentIds\", \"1,3,4\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d81aa936-32ce-4a17-97ec-c00b6b9a6a47",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Lot ID for the other tests",
											"postman.setGlobalVariable(\"lotId_today_9\", jsonData.lotId);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId !== undefined;",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"order\" Entity",
											"tests[\"Response body includes order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"order\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"postponedDateTime\" Entity",
											"tests[\"Response body includes postponedDateTime entity from JSON data\"] = jsonData.postponedDateTime == postman.getEnvironmentVariable(\"postponedDateTime\");",
											"",
											"//Response body contains \"plusGST\" Entity",
											"tests[\"Response body includes plusGST entity from JSON data\"] = jsonData.plusGST == postman.getEnvironmentVariable(\"plusGST\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"featureDescription\" Entity",
											"tests[\"Response body includes featureDescription entity from JSON data\"] = jsonData.featureDescription == postman.getEnvironmentVariable(\"featureDescription\");",
											"",
											"//Response body contains \"soldDate\" Entity",
											"tests[\"Response body includes soldDate entity from JSON data\"] = jsonData.soldDate === null;",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice === null;",
											"",
											"//Response body contains \"images\" Entity",
											"tests[\"Response body includes images entity from JSON data\"] = jsonData.images === null;",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Valid Request - Required Parameters Only",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "60906309-a1c3-4c39-b264-5dc4157dc291",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1a485c6e-ce17-4e30-9085-d93961cd0039",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Lot ID for test SoldPrice, SoldDate and AuctionStatus test",
											"postman.setGlobalVariable(\"lotId_sold\", jsonData.lotId);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId !== undefined;",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_updated2\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"order\" Entity",
											"tests[\"Response body includes order entity from JSON data\"] = jsonData.order === 0;",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet === false;",
											"",
											"//Response body contains \"postponedDateTime\" Entity",
											"tests[\"Response body includes postponedDateTime entity from JSON data\"] = jsonData.postponedDateTime === null;",
											"",
											"//Response body contains \"plusGST\" Entity",
											"tests[\"Response body includes plusGST entity from JSON data\"] = jsonData.plusGST === false;",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus === 0;",
											"",
											"//Response body contains \"featureDescription\" Entity",
											"tests[\"Response body includes featureDescription entity from JSON data\"] = jsonData.featureDescription === null;",
											"",
											"//Response body contains \"soldDate\" Entity",
											"tests[\"Response body includes soldDate entity from JSON data\"] = jsonData.soldDate === null;",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice === null;",
											"",
											"//Response body contains \"images\" Entity",
											"tests[\"Response body includes images entity from JSON data\"] = jsonData.images === null;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_updated2}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Missing AuctionSessionID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "19dce734-82cb-480f-b06a-1570b9b9b600",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", \"1\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"postman.setEnvironmentVariable(\"agentIds\", \"1,3,4\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2451305e-bbe4-4654-a462-f3df3f11de38",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: No Auction Session was found matching ID 0\");",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - AuctionSessionID has a null value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "19dce734-82cb-480f-b06a-1570b9b9b600",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", \"1\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"postman.setEnvironmentVariable(\"agentIds\", \"1,3,4\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8ae82d59-3e8a-4fd6-b485-b775a2b827c2",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: No Auction Session was found matching ID 0\");",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": \"\",\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - AuctionSessionID has a blank value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "19dce734-82cb-480f-b06a-1570b9b9b600",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", \"1\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"postman.setEnvironmentVariable(\"agentIds\", \"1,3,4\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ef256949-0194-48a6-8e2c-d477c6866375",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer\");",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": \" \",\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Non Existing AuctionSessionID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "19dce734-82cb-480f-b06a-1570b9b9b600",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", \"1\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"postman.setEnvironmentVariable(\"agentIds\", \"1,3,4\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e4cb7236-db30-430e-8a54-5e4233550779",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: No Auction Session was found matching ID \" + postman.getGlobalVariable(\"nonexistingauctionSessionId\"));",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": \"{{nonexistingauctionSessionId}}\",\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Invalid AuctionSessionID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1f358ac3-eb61-4222-be62-2251f966baa7",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", \"1\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "063d0c04-b35a-49d3-a63b-dcfc7b7a9662",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \" + postman.getGlobalVariable(\"invalidauctionSessionId\"));",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": \"{{invalidauctionSessionId}}\",\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Missing ListingID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b6981e49-3893-4434-8df0-79903e0ca81e",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0b0f45fb-fb68-4762-9f6a-5d33b05de86a",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A Listing ID is required\");",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - ListingID has a null value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f9c43d6c-2da4-4d4e-956a-f4fa72d294a5",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bd5c56fe-ae5e-4da1-b916-89990d7d6cf5",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A Listing ID is required\");",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": \"\",\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - ListingID has a blank value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ffc1fd39-eb66-43a8-b13a-49a1ec744bc4",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3210bab7-282d-41c0-b916-0846ae91b464",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n   \"listingId\": \"  \",\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Missing Address",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d9a12a5a-da23-43a1-9419-ffbd5025a36f",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", \"1\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db63cdb3-114b-445c-b011-cb896c0c7cdf",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Lot address is required\");",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Address has a null value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8323a55b-a9db-4c2c-9309-1f9a94677801",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", \"1\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "24153d6e-96bb-4d4f-8ab9-ed13d548f5aa",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Lot address is required\");",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Address has blank value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ba439994-1aa5-4a7a-8b82-a2ff2ad11dc2",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", \"1\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7201846f-b669-45d5-b0ed-df6a00f1eb9a",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Lot address is required\");",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"   \",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "505f3430-a19a-42f2-b5d2-bda40ffa781d",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", \"1\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e47f892d-d7b3-464e-9a3c-ed4549cc9fd4",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lot",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lot"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Missing Header - Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b88e6b51-5805-4f20-9ee7-bbbaae4eb581",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", \"1\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b4d68a83-1f48-4676-8db9-2e49ad1350f3",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the value of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Invalid Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "769c15d3-7ee4-4d98-98c9-5d03927fe3bb",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bc85c28e-111f-4027-997a-80dcc7b8eedf",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_updated2}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  "
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "769c15d3-7ee4-4d98-98c9-5d03927fe3bb",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6705ec7a-2913-4b48-b255-f479fb3943af",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"///Validate the values of the response body",
											"var jsonData = JSON.parse(responseBody);",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Null Sold Price when AuctionStatus is set to Sold",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d5388e49-15e8-448c-b303-75a4ad433432",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fb40198e-d812-410a-83ed-09a649932cab",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A Sold Price is required to set a Lot Status to Sold\");",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"4\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Null Sold Date when AuctionStatus is set to Sold",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9a528939-7572-417b-9c94-3a2e128ed15d",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a670669-209a-4dd8-8966-5fca3f069834",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A Sold Date is required to set a Lot Status to Sold\");",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"4\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Unsupported Sold Price",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "de1c081a-d9a8-46ef-93ec-c60b1cfc267c",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f277b182-ae5b-4fa9-ac71-34d55b6fcb9e",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Sold Price must be positive and below 999999999999.99\");",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"10000000000000000000000\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Invalid Auction Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2380e83f-64d1-4981-a6a0-5b3da658b075",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"invalidauctionstatus\", \"10\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "21e8cd2e-96a0-4415-9bbf-aa9be4805880",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The provided Auction Status is not a recognised status\");",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": {{invalidauctionstatus}},\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Invalid PlusGST value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7766d1c9-311c-45e5-adcd-859031cf7b1b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "791df21c-5602-4fab-87f9-cc4fea42d1ff",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": \"abc\",\r\n  \"auctionStatus\": 10,\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Invalid PostponedDateTime",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d355c6bf-7396-49af-82ea-9051fee69772",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d8aa7b8f-856f-4189-92de-a98d860f3dfd",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to DateTime:\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"20019-07-11T04:33:23.985Z\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": 4,\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot - Invalid Request - Invalid SoldDate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5d6bd05c-4c02-4dff-afd8-2b5f0bda5fe2",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0c28aba0-8bf1-482d-b46e-3e565b43daf1",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to DateTime:\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"2019-70-11T04:33:23.985Z\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Put Lot",
					"item": [
						{
							"name": "Put Lot - Valid Request - Update All Parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "905eebd9-846f-41e3-94cc-eccec84e7805",
										"exec": [
											"postman.setEnvironmentVariable(\"order_updated\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet_updated\", 1);",
											"postman.setEnvironmentVariable(\"listingId_updated\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address_updated\", \"10 Waterloo St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime_updated\", \"2018-10-05T13:15:32\");",
											"postman.setEnvironmentVariable(\"plusGST_updated\", \"0\");",
											"postman.setEnvironmentVariable(\"auctionStatus_updated\", \"1\");",
											"postman.setEnvironmentVariable(\"featureDescription_updated\", \"Sample Test Description Updated\");",
											"postman.setEnvironmentVariable(\"soldDate_updated\", \"2018-11-05T18:17:31\");",
											"postman.setEnvironmentVariable(\"isSalePriceHidden\", 1);",
											"postman.setEnvironmentVariable(\"isPaused\", 1);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "52938787-263b-4b80-a9e2-6a525bd0ff22",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_updated\");",
											"",
											"//Response body contains \"order\" Entity",
											"tests[\"Response body includes order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"order_updated\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet_updated\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId_updated\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address_updated\");",
											"",
											"//Response body contains \"postponedDateTime\" Entity",
											"tests[\"Response body includes postponedDateTime entity from JSON data\"] = jsonData.postponedDateTime == postman.getEnvironmentVariable(\"postponedDateTime_updated\");",
											"",
											"//Response body contains \"plusGST\" Entity",
											"tests[\"Response body includes plusGST entity from JSON data\"] = jsonData.plusGST == postman.getEnvironmentVariable(\"plusGST_updated\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus_updated\");",
											"",
											"//Response body contains \"featureDescription\" Entity",
											"tests[\"Response body includes featureDescription entity from JSON data\"] = jsonData.featureDescription == postman.getEnvironmentVariable(\"featureDescription_updated\");",
											"",
											"//Response body contains \"soldDate\" Entity",
											"tests[\"Response body includes soldDate entity from JSON data\"] = jsonData.soldDate == postman.getEnvironmentVariable(\"soldDate_updated\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice == postman.getEnvironmentVariable(\"soldPrice_updated\");",
											"",
											"//Response body contains \"isSalePriceHidden\" Entity",
											"tests[\"Response body includes isSalePriceHidden entity from JSON data\"] = jsonData.isSalePriceHidden == postman.getEnvironmentVariable(\"isSalePriceHidden\");",
											"",
											"//Response body contains \"isPaused\" Entity",
											"tests[\"Response body includes isPaused entity from JSON data\"] = jsonData.isPaused == postman.getEnvironmentVariable(\"isPaused\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": \"{{auctionSessionId_updated}}\",\r\n  \"order\": {{order_updated}},\r\n  \"reserveMet\": {{reserveMet_updated}},\r\n  \"listingId\": {{listingId_updated}},\r\n  \"address\": \"{{address_updated}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime_updated}}\",\r\n  \"plusGST\": {{plusGST_updated}},\r\n  \"auctionStatus\": \"{{auctionStatus_updated}}\",\r\n  \"isSalePriceHidden\": {{isSalePriceHidden}},\r\n  \"isPaused\": {{isPaused}},\r\n  \"featureDescription\": \"{{featureDescription_updated}}\",\r\n  \"soldDate\": \"{{soldDate_updated}}\",\r\n  \"soldPrice\": \"{{soldPrice_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - Duplicate Order in an Auction Session",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f79fce2f-45a2-4ef1-95ed-afcfd41b4986",
										"exec": [
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8909dbb9-9969-4d24-9fe4-649cd778f5d9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Order number \" + postman.getEnvironmentVariable(\"order_updated\") + \" is not unique against the Auction Session\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_updated}},\r\n  \"order\": {{order_updated}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Valid Request - Required Parameters Only",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f766f2c4-68d4-4042-a664-9a7aef9b36b0",
										"exec": [
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7fbfc64a-3f62-4a53-8e88-c65f31d0268c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Valid Request - Update IsSalePriceHidden",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3e76c403-8998-4fcd-9bcb-d61dc4d93237",
										"exec": [
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"isSalePriceHidden\", 0);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a5b8f134-dfc7-4860-9326-dc216006a5c4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"isSalePriceHidden\" Entity",
											"tests[\"Response body includes isSalePriceHidden entity from JSON data\"] = jsonData.isSalePriceHidden == postman.getEnvironmentVariable(\"isSalePriceHidden\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isSalePriceHidden\": {{isSalePriceHidden}}\r\n  \r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Valid Request - Update IsPaused",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3e76c403-8998-4fcd-9bcb-d61dc4d93237",
										"exec": [
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"isSalePriceHidden\", 0);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "758663c7-044f-44cf-873f-0e9c76384cef",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"isPaused\" Entity",
											"tests[\"Response body includes isPaused entity from JSON data\"] = jsonData.isPaused == postman.getEnvironmentVariable(\"isPaused\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isPaused\": {{isPaused}}\r\n  \r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Valid Request - Update AuctionStatus=1 InProgress",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "677726ee-0e7e-4ec1-97aa-e5ccf97342e0",
										"exec": [
											"postman.setEnvironmentVariable(\"soldPrice_updated\", \"50000\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"1\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "70ce6fae-09a7-4422-b5cf-ca4c7742c6e0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice == postman.getEnvironmentVariable(\"soldPrice_updated\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"soldPrice\": \"{{soldPrice_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Valid Request - Update AuctionStatus=2 NoBids",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ebb5b565-957e-4368-adc8-f41c7dc7aa35",
										"exec": [
											"postman.setEnvironmentVariable(\"auctionStatus\", \"1\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"soldPrice_updated\", \"0\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5aae1b16-e42c-4d67-a61f-f2c4fd18f01d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice == postman.getEnvironmentVariable(\"soldPrice_updated\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"soldPrice\": \"{{soldPrice_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Valid Request - Update AuctionStatus=3 PassedIn",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec99d0f2-9a9a-49b2-b013-966969eb03ab",
										"exec": [
											"postman.setEnvironmentVariable(\"auctionStatus\", \"3\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"soldPrice_updated\", \"500000\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a3586510-a8a2-4234-a208-6f9c85092be1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice == postman.getEnvironmentVariable(\"soldPrice_updated\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n    \"soldPrice\": \"{{soldPrice_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Valid Request - Update AuctionStatus=4 Sold",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5e75f13c-e92c-4d11-b4d8-98f952c8c622",
										"exec": [
											"postman.setEnvironmentVariable(\"auctionStatus\", \"4\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"soldPrice_updated\", \"7500000\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "76fc8cb7-dcf8-43bc-a5d0-b58328d552ed",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice == postman.getEnvironmentVariable(\"soldPrice_updated\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Valid Request - Update AuctionStatus=5 Selling",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5fd607af-ae0e-4761-98bc-ace209c2b0e4",
										"exec": [
											"postman.setEnvironmentVariable(\"auctionStatus\", \"5\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"soldPrice_updated\", \"6500000\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5eb9f907-5d42-4208-b159-543203975941",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice == postman.getEnvironmentVariable(\"soldPrice_updated\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n    \"soldPrice\": \"{{soldPrice_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Valid Request - Update AuctionStatus=6 Withdrawn",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cd2ef470-150c-465e-8724-e08ed7824499",
										"exec": [
											"postman.setEnvironmentVariable(\"auctionStatus\", \"6\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"soldPrice_updated\", \"0\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "727db996-94c8-44e9-a2b7-9d1c7aed711d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice == postman.getEnvironmentVariable(\"soldPrice_updated\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n    \"soldPrice\": \"{{soldPrice_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Valid Request - Update AuctionStatus=7 Sold Prior",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7bd01f7c-3357-4398-970d-9617fc6ad4af",
										"exec": [
											"postman.setEnvironmentVariable(\"auctionStatus\", \"7\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"soldPrice_updated\", \"8500000\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "552a6d40-c906-4c41-81ea-34e132ab4146",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice == postman.getEnvironmentVariable(\"soldPrice_updated\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n    \"soldPrice\": \"{{soldPrice_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Valid Request - Update AuctionStatus=8 Postponed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1802e38a-f539-480d-ad07-7c6b51c63573",
										"exec": [
											"postman.setEnvironmentVariable(\"auctionStatus\", \"8\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"soldPrice_updated\", \"0\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "24faca5a-9e64-4a9c-b0e5-a67272c014ae",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice == postman.getEnvironmentVariable(\"soldPrice_updated\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_today}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n    \"soldPrice\": \"{{soldPrice_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Valid Request - Update Lot Details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1802e38a-f539-480d-ad07-7c6b51c63573",
										"exec": [
											"postman.setEnvironmentVariable(\"auctionStatus\", \"8\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "24faca5a-9e64-4a9c-b0e5-a67272c014ae",
										"exec": [
											"/* PUT BACK AFTER FIX",
											"",
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice === null;",
											"",
											"pm.test(\"Test if key_agent is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].key == postman.getEnvironmentVariable(\"key_agent\")) {",
											"    console.log(\"key_agent is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if key_agent2 is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].key == postman.getEnvironmentVariable(\"key_agent2\")) {",
											"    console.log(\"key_agent2 is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if value_agent is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].value == postman.getEnvironmentVariable(\"value_agent\")) {",
											"    console.log(\"value_agent is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if value_agent2 is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].value == postman.getEnvironmentVariable(\"value_agent2\")) {",
											"    console.log(\"value_agent2 is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if value_branch is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].value == postman.getEnvironmentVariable(\"value_branch\")) {",
											"    console.log(\"value_branch is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if value_branch2 is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].value == postman.getEnvironmentVariable(\"value_branch2\")) {",
											"    console.log(\"value_branch2 is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"lotDetail\": [\r\n        {\r\n            \"key\": \"{{key_agent}}\",\r\n            \"value\": \"{{value_agent}}\"\r\n        },\r\n        {\r\n            \"key\": \"{{key_branch}}\",\r\n            \"value\": \"{{value_branch}}\"\r\n        },\r\n        {\r\n            \"key\": \"{{key_agent2}}\",\r\n            \"value\": \"{{value_agent2}}\"\r\n        },\r\n        {\r\n           \"key\": \"{{key_branch2}}\",\r\n            \"value\": \"{{value_branch2}}\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Valid Request - Update Images",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1802e38a-f539-480d-ad07-7c6b51c63573",
										"exec": [
											"postman.setEnvironmentVariable(\"auctionStatus\", \"8\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "24faca5a-9e64-4a9c-b0e5-a67272c014ae",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice === null;",
											"",
											"",
											"pm.test(\"Test if key_agent is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].key == postman.getEnvironmentVariable(\"key_agent\")) {",
											"    console.log(\"key_agent is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if key_agent2 is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].key == postman.getEnvironmentVariable(\"key_agent2\")) {",
											"    console.log(\"key_agent2 is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if value_agent is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].value == postman.getEnvironmentVariable(\"value_agent\")) {",
											"    console.log(\"value_agent is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if value_agent2 is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].value == postman.getEnvironmentVariable(\"value_agent2\")) {",
											"    console.log(\"value_agent2 is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if value_branch is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].value == postman.getEnvironmentVariable(\"value_branch\")) {",
											"    console.log(\"value_branch is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if value_branch2 is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].value == postman.getEnvironmentVariable(\"value_branch2\")) {",
											"    console.log(\"value_branch2 is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.images[0].lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"",
											"//Image ID has a value",
											"tests[\"Response body includes imageId entity from JSON data\"] = jsonData.images[0].imageId !== undefined;",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.images[0].order == postman.getEnvironmentVariable(\"image_order\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.images[0].url == postman.getEnvironmentVariable(\"image_URL\");",
											"",
											"//Response body contains \"isDisplayed\" Entity",
											"tests[\"Response body includes isDisplayed entity from JSON data\"] = jsonData.images[0].isDisplayed == postman.getEnvironmentVariable(\"isDisplayed\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"images\": [\r\n      {\r\n        \"order\": {{image_order}},\r\n\t\t\"url\": \"{{image_URL}}\",\r\n\t\t\"isDisplayed\": {{isDisplayed}}\r\n      }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Valid Request - Update Multiple Images",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1802e38a-f539-480d-ad07-7c6b51c63573",
										"exec": [
											"postman.setEnvironmentVariable(\"auctionStatus\", \"8\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "24faca5a-9e64-4a9c-b0e5-a67272c014ae",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Lot ID has a value",
											"tests[\"Response body includes lotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"auctionSessionId\" Entity",
											"tests[\"Response body includes auctionSessionId entity from JSON data\"] = jsonData.auctionSessionId == postman.getGlobalVariable(\"auctionSessionId_today\");",
											"",
											"//Response body contains \"listingId\" Entity",
											"tests[\"Response body includes listingId entity from JSON data\"] = jsonData.listingId == postman.getEnvironmentVariable(\"listingId\");",
											"",
											"//Response body contains \"address\" Entity",
											"tests[\"Response body includes address entity from JSON data\"] = jsonData.address == postman.getEnvironmentVariable(\"address\");",
											"",
											"//Response body contains \"auctionStatus\" Entity",
											"tests[\"Response body includes auctionStatus entity from JSON data\"] = jsonData.auctionStatus == postman.getEnvironmentVariable(\"auctionStatus\");",
											"",
											"//Response body contains \"soldPrice\" Entity",
											"tests[\"Response body includes soldPrice entity from JSON data\"] = jsonData.soldPrice === null;",
											"",
											"pm.test(\"Test if key_agent is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].key == postman.getEnvironmentVariable(\"key_agent\")) {",
											"    console.log(\"key_agent is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if key_agent2 is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].key == postman.getEnvironmentVariable(\"key_agent2\")) {",
											"    console.log(\"key_agent2 is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if value_agent is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].value == postman.getEnvironmentVariable(\"value_agent\")) {",
											"    console.log(\"value_agent is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if value_agent2 is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].value == postman.getEnvironmentVariable(\"value_agent2\")) {",
											"    console.log(\"value_agent2 is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if value_branch is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].value == postman.getEnvironmentVariable(\"value_branch\")) {",
											"    console.log(\"value_branch is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test if value_branch2 is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.lotDetail.length; i++) {",
											"  if (jsonData.lotDetail[i].value == postman.getEnvironmentVariable(\"value_branch2\")) {",
											"    console.log(\"value_branch2 is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.images[0].lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Image ID has a value",
											"tests[\"Response body includes imageId entity from JSON data\"] = jsonData.images[0].imageId !== undefined;",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.images[0].order == postman.getEnvironmentVariable(\"image_order\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.images[0].url == postman.getEnvironmentVariable(\"image_URL\");",
											"",
											"//Response body contains \"isDisplayed\" Entity",
											"tests[\"Response body includes isDisplayed entity from JSON data\"] = jsonData.images[0].isDisplayed == postman.getEnvironmentVariable(\"isDisplayed\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"images\": [\r\n      {\r\n        \"order\": {{image_order}},\r\n\t\t\"url\": \"{{image_URL}}\",\r\n\t\t\"isDisplayed\": {{isDisplayed}}\r\n      },\r\n      {\r\n        \"order\": {{image_order}},\r\n\t\t\"url\": \"{{image_URL}}\",\r\n\t\t\"isDisplayed\": {{isDisplayed}}\r\n      }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - AuctionSessionID has a blank value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c0d1dbd7-5f03-4fef-ba9b-ff3cfe15fc08",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", \"1\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5f488976-53e9-4af8-9ded-dd1bddfef602",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": \" \",\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - Non Existing AuctionSessionID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9dfa8f42-b24f-4248-b1de-2ca49c654a97",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", \"1\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2756e440-06d3-4fa5-ac33-d86ac16d014a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"No Auction Session was found matching ID \" + postman.getGlobalVariable(\"nonexistingauctionSessionId\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": \"{{nonexistingauctionSessionId}}\",\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - Invalid AuctionSessionID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8e6c020b-a457-40fd-b2b7-34eac9a24d4e",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", \"1\");",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "017ac7b0-494a-4132-bac4-e40af60e1f17",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \" + postman.getGlobalVariable(\"invalidauctionSessionId\"));",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": \"{{invalidauctionSessionId}}\",\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - ListingID has a blank value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c8337ad0-2787-4bf5-86ea-e796154d98e4",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "31866ac1-f50b-4c00-ab47-da41ab39d48a",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n   \"listingId\": \"  \",\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "554a55c4-f463-4dbb-b33a-a94352de4746",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", \"1\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"postman.setEnvironmentVariable(\"agentIds\", \"1,3,4\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f75d2d52-de33-4ee6-932e-1bf9a1ffdb6c",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lot/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lot",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - Missing Header - Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "63ce21a9-1ad2-40cb-9dce-6d1919bd6cd1",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", \"1\");",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", \"1\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8ff010fc-04a0-4c2d-a0f4-ecc4e578fa5a",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - Invalid Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "769c15d3-7ee4-4d98-98c9-5d03927fe3bb",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2eac0f6b-17be-4640-84dc-2193e1202167",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId_updated2}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  "
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "769c15d3-7ee4-4d98-98c9-5d03927fe3bb",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f53a085c-927a-4abf-ad9e-4a4e133125d2",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"///Validate the values of the response body",
											"var jsonData = JSON.parse(responseBody);",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - Null Sold Price when AuctionStatus is set to Sold",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b20a1823-f4be-4d93-b416-21f3e27a8d5a",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8dc48d49-3e2e-40e9-b444-7a070e9688ad",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A Sold Price is required to set a Lot Status to Sold\");",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"4\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId_sold}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId_sold}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - Null Sold Date when AuctionStatus is set to Sold",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f06a1efe-c35e-4c77-b442-837cdf018cdb",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e999797b-baa7-4433-8e62-1ee3d3606666",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A Sold Date is required to set a Lot Status to Sold\");",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"4\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId_sold}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId_sold}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - Unsupported Sold Price",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0ba95c47-f684-4ccc-b045-5f2e230ca2e7",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5c3ee7b6-d375-4dc5-a079-e237e60ef9da",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Sold Price must be positive and below 999999999999.99\");",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"10000000000000000000000\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - Invalid Auction Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d437e503-4194-4d8d-a7ac-fa040975b739",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"invalidauctionstatus\", \"12\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dc2463a5-cfe5-4915-9b61-3ead305723f5",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The provided Auction Status is not a recognised status\");",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": {{invalidauctionstatus}},\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - Invalid PlusGST value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eae78903-fe8e-4d10-99e8-d8cbb56fa499",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1678bd77-e472-48fa-b702-54dd8dcc06cc",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": \"abc\",\r\n  \"auctionStatus\": 10,\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - Invalid PostponedDateTime",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ae045572-213d-44ce-9f15-d1a5681ee32e",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7f264242-7e2d-476e-8826-ab9a4b2d88d3",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to DateTime:\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"20019-07-11T04:33:23.985Z\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": 4,\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - Invalid SoldDate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5fd913ee-bb78-424b-bca1-9603e8d88965",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e37e3a9d-ad9e-408a-a283-6359c542679c",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to DateTime:\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"2019-70-11T04:33:23.985Z\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - Invalid LotId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "026c3f85-8fff-4cd2-899a-b0047f15c61d",
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"invalidLotId\", \"11a\");",
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "609efb6f-d9f0-40dd-a11e-a281f40e6f46",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"invalidLotId\") + \"' is not valid.\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{invalidLotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{invalidLotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot - Invalid Request - Non Existing LotId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c6eb852e-99cf-4d75-8950-036456d6d17b",
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"nonexistinglotId\", \"1000000\");",
											"postman.setEnvironmentVariable(\"order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"reserveMet\", false);",
											"postman.setEnvironmentVariable(\"listingId\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"address\", \"75 Queen St. Auckland City, 1010\");",
											"postman.setEnvironmentVariable(\"postponedDateTime\", \"2018-11-05T13:15:30\");",
											"postman.setEnvironmentVariable(\"plusGST\", \"1\");",
											"postman.setEnvironmentVariable(\"auctionStatus\", \"0\");",
											"postman.setEnvironmentVariable(\"featureDescription\", \"Sample Test Description\");",
											"postman.setEnvironmentVariable(\"soldDate\", \"2018-12-05T18:17:30\");",
											"postman.setEnvironmentVariable(\"soldPrice\", 999999.99);",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f5c0b93d-edd6-490e-99bd-89a112142501",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not find Lot \" + postman.getGlobalVariable(\"nonexistinglotId\") + \" in System\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionId\": {{auctionSessionId}},\r\n  \"order\": {{order}},\r\n  \"reserveMet\": {{reserveMet}},\r\n  \"listingId\": {{listingId}},\r\n  \"address\": \"{{address}}\",\r\n  \"postponedDateTime\": \"{{postponedDateTime}}\",\r\n  \"plusGST\": {{plusGST}},\r\n  \"auctionStatus\": \"{{auctionStatus}}\",\r\n  \"featureDescription\": \"{{featureDescription}}\",\r\n  \"soldDate\": \"{{soldDate}}\",\r\n  \"soldPrice\": \"{{soldPrice}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{nonexistinglotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{nonexistinglotId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Lot",
					"item": [
						{
							"name": "Get Lots  - Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "599f248c-29e2-48c6-b9a1-bf184abf4cb7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lots  - Valid Request - By AuctionSessionId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8e6a768-dff4-4e26-b78a-226592fdb42d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Test for AuctionSessionId\", () => {",
											"   for (i = 0; i < jsonData.length-1; i++) {",
											"      tests[\"Response body includes AuctionSessionId entity from JSON data\"] = jsonData[i].auctionSessionId == postman.getGlobalVariable(\"auctionSessionId\");",
											"   }",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{auctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lots  - Invalid Request - Non Existing AuctionSessionId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d91b41a-5f8b-47df-b7a4-de5402017768",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(204);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"No Content\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{nonexistingauctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{nonexistingauctionSessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lots  - Invalid Request - Non Numeric AuctionSessionId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98b8ef02-9c61-4446-a4b1-fc293819d36f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Lots/{{invalidauctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Lots",
										"{{invalidauctionSessionId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Display",
			"item": [
				{
					"name": "Post Display",
					"item": [
						{
							"name": "Post Display - Valid Request - All Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b49efbe3-782a-477a-bf1f-6a1b20f714e5",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the Venue ID for the other tests",
											"postman.setGlobalVariable(\"displayId\", jsonData.displayId);",
											"",
											"//Display ID has a value",
											"tests[\"Response body includes displayId entity from JSON data\"] = jsonData.displayId !== undefined;",
											"",
											"//Response body contains \"displayName\" Entity",
											"tests[\"Response body includes displayName entity from JSON data\"] = jsonData.displayName == postman.getEnvironmentVariable(\"displayName\");",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId3\");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d1e0d30c-08e3-432f-acdc-3452720976f6",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayName\", \"Display Test 1\");",
											"",
											"//Create Venue ID Test Data 4",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/Venues\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"name\": pm.environment.get('name'),",
											"            \"street\": pm.environment.get('street'),",
											"            \"suburb\": pm.environment.get('suburb'),",
											"            \"region\": pm.environment.get('region')",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"auction_venueId3\", res.json().venueId);",
											"    }",
											");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"{{displayName}}\",\r\n  \"venueId\": {{auction_venueId3}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display - Invalid Request - Missing Display Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e61e6828-5fa3-4b53-97a8-18c475aea16c",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A Display Name is required\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ebae0e03-6932-4c13-b6f5-fdd058542d65",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayName\", \"Display Test 1\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"venueId\": {{venueId}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display - Invalid Request - Missing Venue ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb1962ac-f349-4b49-ae36-84f36d551d2d",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: No Venue was found matching ID 0\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ebae0e03-6932-4c13-b6f5-fdd058542d65",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayName\", \"Display Test 1\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"{{displayName}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5078621d-ed54-416d-a06f-a004304b022d",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ebae0e03-6932-4c13-b6f5-fdd058542d65",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayName\", \"Display Test 1\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"{{displayName}}\",\r\n  \"venueId\": {{venueId}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Display/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Display",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display - Invalid Request - Missing Request Header - Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b29fac68-bace-439f-ab31-c9f787c40310",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ebae0e03-6932-4c13-b6f5-fdd058542d65",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayName\", \"Display Test 1\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"{{displayName}}\",\r\n  \"venueId\": {{venueId}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e64331b-88cd-4d12-969a-16342fcace9d",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ebae0e03-6932-4c13-b6f5-fdd058542d65",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayName\", \"Display Test 1\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display - Invalid Request - Empty Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ca0fe26-5688-432f-9b93-2ebb2e8ceeb8",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A Display Name is required\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ebae0e03-6932-4c13-b6f5-fdd058542d65",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayName\", \"Display Test 1\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display - Invalid Request - Invalid Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18798ca2-2fca-4324-b51c-a93c8e9530a6",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ebae0e03-6932-4c13-b6f5-fdd058542d65",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayName\", \"Display Test 1\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"{{displayName}}\",\r\n  \"venueId\": {{auction_venueId3}}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Put Display",
					"item": [
						{
							"name": "Put Display - Valid Request - All Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bd36dbe-b48a-406b-8288-1e0bc35b320d",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the Venue ID for the other tests",
											"//postman.setGlobalVariable(\"displayId\", jsonData.displayId);",
											"",
											"//Display ID has a value",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.display !== undefined;",
											"",
											"//Response body contains \"displayName\" Entity",
											"tests[\"Response body includes displayName entity from JSON data\"] = jsonData.displayName == postman.getEnvironmentVariable(\"displayName\");",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId3\");",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e881c42-8442-4b4b-bf11-5e602b26c480",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayName\", \"Display Test 2\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"{{displayName}}\",\r\n  \"venueId\": {{auction_venueId3}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/{{displayId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										"{{displayId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display - Valid Request - Update Venue ID only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63a5f92c-2a96-4660-8dc4-0900f3655309",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Display ID has a value",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.display === postman.getGlobalVariable(\"displayId\");",
											"",
											"//Response body contains \"displayName\" Entity",
											"tests[\"Response body includes displayName entity from JSON data\"] = jsonData.displayName == postman.getEnvironmentVariable(\"displayName\");",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId2\");",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c4001bd2-f991-452c-a1e4-fe8e0e036789",
										"type": "text/javascript",
										"exec": [
											"//Create Venue ID Test Data 5",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/Venues\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"name\": pm.environment.get('name'),",
											"            \"street\": pm.environment.get('street'),",
											"            \"suburb\": pm.environment.get('suburb'),",
											"            \"region\": pm.environment.get('region')",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"auction_venueId2\", res.json().venueId);",
											"    }",
											");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"venueId\": {{auction_venueId2}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/{{displayId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										"{{displayId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display - Valid Request - Update Display Name only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db668c57-57f1-49f6-ba66-0a5afc81c0de",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Display ID has a value",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.display === postman.getGlobalVariable(\"displayId\");",
											"",
											"//Response body contains \"displayName\" Entity",
											"tests[\"Response body includes displayName entity from JSON data\"] = jsonData.displayName == postman.getEnvironmentVariable(\"displayName_updated\");",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId2\");",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "59a73f3a-d6b5-4b99-8491-6b99b735fe20",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayName_updated\", \"Display Test 3\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"{{displayName_updated}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/{{displayId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										"{{displayId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92359c54-1638-474e-b04f-d6ca5dd517fd",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ebae0e03-6932-4c13-b6f5-fdd058542d65",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayName\", \"Display Test 1\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"{{displayName}}\",\r\n  \"venueId\": {{venueId}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Display/{{displayId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Display",
										"{{displayId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display - Invalid Request - Missing Request Header - Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63d5e467-cf2b-4336-80cc-ceca5fd33d14",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ebae0e03-6932-4c13-b6f5-fdd058542d65",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayName\", \"Display Test 1\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"{{displayName}}\",\r\n  \"venueId\": {{venueId}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/{{displayId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										"{{displayId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7faeaff9-fa81-4ace-b51f-2f086cd5855a",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ebae0e03-6932-4c13-b6f5-fdd058542d65",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayName\", \"Display Test 1\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/{{displayId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										"{{displayId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display - Invalid Request - Invalid Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c86909b8-ef6c-48c7-bef4-6c890acd9eb3",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ebae0e03-6932-4c13-b6f5-fdd058542d65",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayName\", \"Display Test 1\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"{{displayName}}\",\r\n  \"venueId\": {{auction_venueId3}}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/{{displayId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										"{{displayId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Display",
					"item": [
						{
							"name": "Get Display by venueId - Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af3b556d-b937-4e95-a550-96613fe95e30",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Display ID has a value",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData[0].display == postman.getGlobalVariable(\"displayId\");",
											"",
											"//Response body contains \"displayName\" Entity",
											"tests[\"Response body includes displayName entity from JSON data\"] = jsonData[0].displayName == postman.getEnvironmentVariable(\"displayName_updated\");",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData[0].venueId == postman.getGlobalVariable(\"auction_venueId2\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/{{auction_venueId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										"{{auction_venueId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Display by Non Numeric venueId - Invalid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16d50618-1537-4040-888e-9766e8401963",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"invalidvenueId\") + \"' is not valid.\");",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/{{invalidvenueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										"{{invalidvenueId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Display by Non Existing venueId - Invalid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ca23255-671d-4ff3-a58c-6d2034917e7c",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(204);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"No Content\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/{{nonexistingvenueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										"{{nonexistingvenueId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Display",
					"item": [
						{
							"name": "Delete Display - Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82206938-eb54-45b2-880e-98bbc04b2697",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Display Deleted\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"displayConfigurationIds\": [\r\n    0\r\n  ],\r\n  \"auctionSessionIds\": [\r\n    0\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/{{displayId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										"{{displayId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Display - Invalid Request - Non Existing DisplayId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "577da9e1-94ce-41d3-bf0e-1b83dca42dea",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"No Display was found matching ID \" + postman.getGlobalVariable(\"nonexistingDisplayId\"));",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "631db461-a31a-48c1-9c7c-13aa212311ca",
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"nonexistingDisplayId\", \"10000999\");"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"displayConfigurationIds\": [\r\n    0\r\n  ],\r\n  \"auctionSessionIds\": [\r\n    0\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/{{nonexistingDisplayId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										"{{nonexistingDisplayId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Display - Invalid Request - Non Numeric DisplayId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3058358c-ecd8-42ca-80a4-92a060c3c332",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"nonnumericDisplayId\") + \"' is not valid.\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b295789a-d291-47f3-be93-3eff5f7ba398",
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"nonnumericDisplayId\", \"10ab9\");"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"displayConfigurationIds\": [\r\n    0\r\n  ],\r\n  \"auctionSessionIds\": [\r\n    0\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Displays/{{nonnumericDisplayId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Displays",
										"{{nonnumericDisplayId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Display - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d95ac9f-1d35-4670-8293-f56e53a95b0e",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b295789a-d291-47f3-be93-3eff5f7ba398",
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"nonnumericDisplayId\", \"10ab9\");"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"displayConfigurationIds\": [\r\n    0\r\n  ],\r\n  \"auctionSessionIds\": [\r\n    0\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Display",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Display"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Display Configuration",
			"item": [
				{
					"name": "Post Display Configuration",
					"item": [
						{
							"name": "Post Display Configuration - Valid Request - Required Parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6ce98565-2c5e-4e99-84e2-5578c5fd26ad",
										"type": "text/javascript",
										"exec": [
											"//Create Display ID Test Data 1",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/Displays\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"displayName\": pm.environment.get('displayName'),",
											"            \"venueId\": pm.globals.get('auction_venueId')",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"displayId2\", res.json().displayId);",
											"    }",
											");",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7254c10a-e5f7-4d3d-a3c3-395e8e57b700",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the Venue ID for the other tests",
											"postman.setGlobalVariable(\"displayConfigurationId\", jsonData.displayConfigurationId);",
											"",
											"//displayConfigurationId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayConfigurationId !== undefined;",
											"",
											"//Response body contains \"displayId\" Entity",
											"tests[\"Response body includes displayId entity from JSON data\"] = jsonData.displayId == postman.getGlobalVariable(\"displayId2\");",
											"",
											"//Response body contains \"playVideo\" Entity",
											"tests[\"Response body includes playVideo entity from JSON data\"] = jsonData.playVideo === false;",
											"",
											"//Response body contains \"playAudio\" Entity",
											"tests[\"Response body includes playAudio entity from JSON data\"] = jsonData.playAudio === false;",
											"",
											"//Response body contains \"isActive\" Entity",
											"tests[\"Response body includes isActive entity from JSON data\"] = jsonData.isActive === false;",
											"",
											"//Response body contains \"displayMode\" Entity",
											"tests[\"Response body includes displayMode entity from JSON data\"] = jsonData.displayMode === 0;",
											"",
											"//Response body contains \"displayGroupIds\" Entity",
											"tests[\"Response body includes displayGroupIds entity from JSON data\"] = jsonData.displayGroupIds === null;",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Valid Request - All Parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "34cd2dc4-b05b-42aa-b792-ab2ff15a23ab",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"",
											"//Create Display Group 4 Test Data",
											"        pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/DisplayGroups/\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"venueId\": pm.globals.get('auction_venueId_updated_2'),",
											"            \"name\": pm.environment.get('displayGroupName'),",
											"            \"description\": pm.environment.get('displayGroupDescription'),",
											"            \"displayConfigurationIds\": [],",
											"            \"auctionSessionIds\": []",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"displayGroupId4\", res.json().displayGroupId);",
											"    }",
											");",
											"",
											"",
											"//Create Display Group 5 Test Data",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/DisplayGroups/\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"venueId\": pm.globals.get('auction_venueId_updated_2'),",
											"            \"name\": pm.environment.get('displayGroupName'),",
											"            \"description\": pm.environment.get('displayGroupDescription'),",
											"            \"displayConfigurationIds\": [],",
											"            \"auctionSessionIds\": []",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"displayGroupId5\", res.json().displayGroupId);",
											"    }",
											");",
											" ",
											"",
											"//Create Display Group 6 Test Data",
											" pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/DisplayGroups/\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"venueId\": pm.globals.get('auction_venueId_updated_2'),",
											"            \"name\": pm.environment.get('displayGroupName'),",
											"            \"description\": pm.environment.get('displayGroupDescription'),",
											"            \"displayConfigurationIds\": [],",
											"            \"auctionSessionIds\": []",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"displayGroupId6\", res.json().displayGroupId);",
											"    }",
											");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "da7f58cf-caac-4af5-a778-30858ef6c274",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the Venue ID for the other tests",
											"postman.setGlobalVariable(\"displayConfigurationId2\", jsonData.displayConfigurationId);",
											"",
											"//displayConfigurationId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayConfigurationId !== undefined;",
											"",
											"//Response body contains \"displayId\" Entity",
											"tests[\"Response body includes displayId entity from JSON data\"] = jsonData.displayId == postman.getGlobalVariable(\"displayId2\");",
											"",
											"//Response body contains \"playVideo\" Entity",
											"tests[\"Response body includes playVideo entity from JSON data\"] = jsonData.playVideo == postman.getEnvironmentVariable(\"playVideo\");",
											"",
											"//Response body contains \"playAudio\" Entity",
											"tests[\"Response body includes playAudio entity from JSON data\"] = jsonData.playAudio == postman.getEnvironmentVariable(\"playAudio\");",
											"",
											"//Response body contains \"isActive\" Entity",
											"tests[\"Response body includes isActive entity from JSON data\"] = jsonData.isActive == postman.getEnvironmentVariable(\"isActive\");",
											"",
											"//Response body contains \"displayMode\" Entity",
											"tests[\"Response body includes displayMode entity from JSON data\"] = jsonData.displayMode == postman.getEnvironmentVariable(\"displayMode\");",
											"",
											"/*",
											"",
											"//Response body contains \"displayGroupId4\" Entity",
											"tests[\"Response body includes displayGroupId4 entity from JSON data\"] = jsonData.displayGroupIds[0] == postman.getGlobalVariable(\"displayGroupId4\");",
											"",
											"//Response body contains \"displayGroupId5\" Entity",
											"tests[\"Response body includes displayGroupId5 entity from JSON data\"] = jsonData.displayGroupIds[1] == postman.getGlobalVariable(\"displayGroupId5\");",
											"",
											"//Response body contains \"displayGroupId6\" Entity",
											"tests[\"Response body includes displayGroupId6 entity from JSON data\"] = jsonData.displayGroupIds[2] == postman.getGlobalVariable(\"displayGroupId6\");",
											"*/",
											"",
											"",
											"",
											"/*",
											"",
											"pm.test('Matches displayGroupId4 value', () => {",
											"    _.each(pm.response.json().displayGroupIds, (arrItem) => {",
											"        if (arrItem.displayGroupIds == postman.getGlobalVariable(\"displayGroupId4\")) {",
											"            throw new Error(`Array contains ${arrItem.displayGroupIds}`)",
											"            console.log(arrItem.displayGroupIds);",
											"        }",
											"    })",
											"});",
											"",
											"*/",
											"",
											"pm.test(\"Test if displayGroupId4 is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.displayGroupIds.length; i++) {",
											"    console.log(jsonData.displayGroupIds.length);",
											"  if (jsonData.displayGroupIds[i] == postman.getGlobalVariable(\"displayGroupId4\")) {",
											"    console.log(\"displayGroupId4 is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"",
											"pm.test(\"Test if displayGroupId5 is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.displayGroupIds.length; i++) {",
											"  if (jsonData.displayGroupIds[i] == postman.getGlobalVariable(\"displayGroupId5\")) {",
											"    console.log(\"displayGroupId5 is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"",
											"pm.test(\"Test if displayGroupId6 is present\", function () {",
											"var flag = false;",
											"for(var i = 0; i<jsonData.displayGroupIds.length; i++) {",
											"  if (jsonData.displayGroupIds[i] == postman.getGlobalVariable(\"displayGroupId6\")) {",
											"    console.log(\"displayGroupId6 is present\");",
											"    flag = true;",
											"  }",
											"}",
											"pm.expect(flag).to.eql(true);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupId4}},{{displayGroupId5}},{{displayGroupId6}}]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Valid Request - Single Existing DisplayGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ecd241e6-791e-4b11-87e3-7b311392a9d7",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupId_single\", \"4\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "312c76d2-5ecc-45de-9f17-1f8050735593",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the Venue ID for the other tests",
											"postman.setGlobalVariable(\"displayConfigurationId3\", jsonData.displayConfigurationId);",
											"",
											"//displayConfigurationId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayConfigurationId !== undefined;",
											"",
											"//Response body contains \"displayId\" Entity",
											"tests[\"Response body includes displayId entity from JSON data\"] = jsonData.displayId == postman.getGlobalVariable(\"displayId2\");",
											"",
											"//Response body contains \"playVideo\" Entity",
											"tests[\"Response body includes playVideo entity from JSON data\"] = jsonData.playVideo == postman.getEnvironmentVariable(\"playVideo\");",
											"",
											"//Response body contains \"playAudio\" Entity",
											"tests[\"Response body includes playAudio entity from JSON data\"] = jsonData.playAudio == postman.getEnvironmentVariable(\"playAudio\");",
											"",
											"//Response body contains \"isActive\" Entity",
											"tests[\"Response body includes isActive entity from JSON data\"] = jsonData.isActive == postman.getEnvironmentVariable(\"isActive\");",
											"",
											"//Response body contains \"displayMode\" Entity",
											"tests[\"Response body includes displayMode entity from JSON data\"] = jsonData.displayMode == postman.getEnvironmentVariable(\"displayMode\");",
											"",
											"//Response body contains \"displayGroupIds\" Entity",
											"tests[\"Response body includes displayGroupIds entity from JSON data\"] = jsonData.displayGroupIds == postman.getGlobalVariable(\"displayGroupId_today\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupId_today}}]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Valid Request - Duplicate DisplayGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1d6b6c1c-8ff5-4c92-8e1e-756f69a25ad8",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"",
											"//Create Display Group 6 Test Data",
											" pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/DisplayGroups/\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"venueId\": pm.globals.get('auction_venueId_updated_2'),",
											"            \"name\": pm.environment.get('displayGroupName'),",
											"            \"description\": pm.environment.get('displayGroupDescription'),",
											"            \"displayConfigurationIds\": [],",
											"            \"auctionSessionIds\": []",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"displayGroupId_single\", res.json().displayGroupId);",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "10ecc097-45d1-4d9d-bd9d-a0c8b545c282",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the Venue ID for the other tests",
											"postman.setGlobalVariable(\"displayConfigurationId4\", jsonData.displayConfigurationId);",
											"",
											"//displayConfigurationId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayConfigurationId !== undefined;",
											"",
											"//Response body contains \"displayId\" Entity",
											"tests[\"Response body includes displayId entity from JSON data\"] = jsonData.displayId == postman.getGlobalVariable(\"displayId2\");",
											"",
											"//Response body contains \"playVideo\" Entity",
											"tests[\"Response body includes playVideo entity from JSON data\"] = jsonData.playVideo == postman.getEnvironmentVariable(\"playVideo\");",
											"",
											"//Response body contains \"playAudio\" Entity",
											"tests[\"Response body includes playAudio entity from JSON data\"] = jsonData.playAudio == postman.getEnvironmentVariable(\"playAudio\");",
											"",
											"//Response body contains \"isActive\" Entity",
											"tests[\"Response body includes isActive entity from JSON data\"] = jsonData.isActive == postman.getEnvironmentVariable(\"isActive\");",
											"",
											"//Response body contains \"displayMode\" Entity",
											"tests[\"Response body includes displayMode entity from JSON data\"] = jsonData.displayMode == postman.getEnvironmentVariable(\"displayMode\");",
											"",
											"//Response body contains \"displayGroupIds\" Entity",
											"tests[\"Response body includes displayGroupIds entity from JSON data\"] = jsonData.displayGroupIds == postman.getEnvironmentVariable(\"displayGroupId_single\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupId_single}},{{displayGroupId_single}}]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request - Non Numeric DisplayGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "50a62675-b497-41cd-ba4c-51b80c21701b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1f43f30e-a28e-4fc4-b338-2fd11ad0dea4",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \" + postman.getGlobalVariable(\"nonnumericdisplayGroupId\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [\"{{nonnumericdisplayGroupId}}\"\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request - Non Existing DisplayGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "50a62675-b497-41cd-ba4c-51b80c21701b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "66614a90-e3b7-4c8a-a052-9a700c7db65b",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: No DisplayGroup was found matching ID \" + postman.getGlobalVariable(\"nonexistingdisplayGroupId\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{nonexistingdisplayGroupId}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3fdc62c6-16e7-448f-b015-e056a58238ed",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfiguration",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfiguration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4989e479-f79d-45ff-9aa7-a56e101f549b",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request - Empty Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "61e0e577-762f-4d2b-bc43-85b111739751",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A display ID is required to create a display configuration\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request - Missing Header - Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "662134c4-000c-4900-8a9f-f270d7a739f9",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request - Missing DisplayId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "00afbe61-493c-47a8-bdde-9b9c4959fc64",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A display ID is required to create a display configuration\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request - Null DisplayId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "22a6f449-ec43-4311-9aa4-4f5af16b5481",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A display ID is required to create a display configuration\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request - Non Existing DisplayId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32020f7c-b3fd-4cf2-8806-644bc8983fc1",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Could not find Display \" + postman.getGlobalVariable(\"nonexistingDisplayId\") + \" in the system. Please create the display before assigning it to a configuration\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{nonexistingDisplayId}}\",\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request - Non Numeric DisplayId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0471f6b7-f3cf-40a2-9cce-8a9980ac8b55",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \" + postman.getGlobalVariable(\"nonnumericDisplayId\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{nonnumericDisplayId}}\",\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request - Blank DisplayId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1ce50d4a-5232-4b9b-99c3-25b26d2e3a78",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"   \",\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request - Invalid DisplayMode",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6e349492-0f74-4066-a0e6-6469bb6e1e96",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"invaliddisplayMode\", 5);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bc6461b1-0350-40b5-a950-1fdd38ccf1f5",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The provided Display Mode was not a recognised mode\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"venueId\": {{auction_venueId2}},\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{invaliddisplayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request - Invalid PlayVideo",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b830ee64-9a18-4eab-a271-a7fed7a6f929",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalidplayVideo\", \"abc\");",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 2);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6c1741b1-dce6-4bc7-95ae-b1ec804acce3",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to boolean: \" + postman.getEnvironmentVariable(\"invalidplayVideo\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"venueId\": {{auction_venueId2}},\r\n  \"playVideo\": \"{{invalidplayVideo}}\",\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request - Invalid PlayAudio",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b830ee64-9a18-4eab-a271-a7fed7a6f929",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalidplayVideo\", \"abc\");",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 2);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "57e6f4ea-be68-4538-ab5d-ba28c5689d16",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to boolean: \" + postman.getEnvironmentVariable(\"invalidplayVideo\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"venueId\": {{auction_venueId2}},\r\n  \"playVideo\": \"{{invalidplayVideo}}\",\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request - Invalid isActive",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "78bbbb3a-ac40-46f6-8a64-38a77521f01b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalidplayVideo\", \"abc\");",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"invalidisActive\", \"a99\");",
											"postman.setEnvironmentVariable(\"displayMode\", 2);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "20911392-57d0-4ba1-94d2-157a73538540",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to boolean: \" + postman.getEnvironmentVariable(\"invalidisActive\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"venueId\": {{auction_venueId2}},\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": \"{{invalidisActive}}\",\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request - Invalid Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "78bbbb3a-ac40-46f6-8a64-38a77521f01b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalidplayVideo\", \"abc\");",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"invalidisActive\", \"a99\");",
											"postman.setEnvironmentVariable(\"displayMode\", 2);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cf5ff96a-ac2b-4fde-a018-09679427c8aa",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"venueId\": {{auction_venueId2}},\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  \r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Put Display Configuration",
					"item": [
						{
							"name": "Put Display Configuration - Valid Request - Update Required Parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "822cbfac-05ad-4b5f-8bc0-324414d0ba59",
										"type": "text/javascript",
										"exec": [
											"//Create Display ID Test Data 2",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/Displays\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"displayName\": pm.environment.get('displayName'),",
											"            \"venueId\": pm.globals.get('auction_venueId2')",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"displayId4\", res.json().displayId);",
											"    }",
											");",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3297a6d6-9d3e-48b9-8925-86e8866bb581",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//displayConfigurationId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayConfigurationId !== undefined;",
											"",
											"//Response body contains \"displayId\" Entity",
											"tests[\"Response body includes displayId entity from JSON data\"] = jsonData.displayId == postman.getGlobalVariable(\"displayId4\");",
											"",
											"",
											"//Response body contains \"playVideo\" Entity",
											"tests[\"Response body includes playVideo entity from JSON data\"] = jsonData.playVideo === false;",
											"",
											"//Response body contains \"playAudio\" Entity",
											"tests[\"Response body includes playAudio entity from JSON data\"] = jsonData.playAudio === false;",
											"",
											"//Response body contains \"isActive\" Entity",
											"tests[\"Response body includes isActive entity from JSON data\"] = jsonData.isActive === false;",
											"",
											"//Response body contains \"displayMode\" Entity",
											"tests[\"Response body includes displayMode entity from JSON data\"] = jsonData.displayMode === 0;",
											"",
											"//Response body contains \"displayGroupIds\" Entity",
											"tests[\"Response body includes displayGroupIds entity from JSON data\"] = jsonData.displayGroupIds === null;",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId4}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Valid Request - All Parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a502110a-318d-428a-bc04-6985f4c9c61b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 2);",
											"//postman.setEnvironmentVariable(\"displayGroupIds\", \"5,6,7\");",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "95594c7b-07ac-40fb-bb8c-2ee32da332c9",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//displayConfigurationId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayConfigurationId !== undefined;",
											"",
											"//Response body contains \"displayId\" Entity",
											"tests[\"Response body includes displayId entity from JSON data\"] = jsonData.displayId == postman.getGlobalVariable(\"displayId4\");",
											"",
											"",
											"//Response body contains \"playVideo\" Entity",
											"tests[\"Response body includes playVideo entity from JSON data\"] = jsonData.playVideo == postman.getEnvironmentVariable(\"playVideo\");",
											"",
											"//Response body contains \"playAudio\" Entity",
											"tests[\"Response body includes playAudio entity from JSON data\"] = jsonData.playAudio == postman.getEnvironmentVariable(\"playAudio\");",
											"",
											"//Response body contains \"isActive\" Entity",
											"tests[\"Response body includes isActive entity from JSON data\"] = jsonData.isActive == postman.getEnvironmentVariable(\"isActive\");",
											"",
											"//Response body contains \"displayMode\" Entity",
											"tests[\"Response body includes displayMode entity from JSON data\"] = jsonData.displayMode == postman.getEnvironmentVariable(\"displayMode\");",
											"",
											"//Response body contains \"displayGroupId1\" Entity",
											"tests[\"Response body includes displayGroupId4 entity from JSON data\"] = jsonData.displayGroupIds[0] == postman.getGlobalVariable(\"displayGroupId\");",
											"",
											"//Response body contains \"displayGroupId2\" Entity",
											"tests[\"Response body includes displayGroupId5 entity from JSON data\"] = jsonData.displayGroupIds[1] == postman.getGlobalVariable(\"displayGroupId2\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId4}}\",\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupId}},{{displayGroupId2}}]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Valid Request - Update to Single Existing DisplayGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4403040d-9475-437f-b2ab-d7d427203a02",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6a94b54b-5a7a-4b15-b444-d68bef9649f1",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//displayConfigurationId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayConfigurationId !== undefined;",
											"",
											"//Response body contains \"displayId\" Entity",
											"tests[\"Response body includes displayId entity from JSON data\"] = jsonData.displayId == postman.getGlobalVariable(\"displayId4\");",
											"",
											"",
											"//Response body contains \"playVideo\" Entity",
											"tests[\"Response body includes playVideo entity from JSON data\"] = jsonData.playVideo == postman.getEnvironmentVariable(\"playVideo\");",
											"",
											"//Response body contains \"playAudio\" Entity",
											"tests[\"Response body includes playAudio entity from JSON data\"] = jsonData.playAudio == postman.getEnvironmentVariable(\"playAudio\");",
											"",
											"//Response body contains \"isActive\" Entity",
											"tests[\"Response body includes isActive entity from JSON data\"] = jsonData.isActive == postman.getEnvironmentVariable(\"isActive\");",
											"",
											"//Response body contains \"displayMode\" Entity",
											"tests[\"Response body includes displayMode entity from JSON data\"] = jsonData.displayMode == postman.getEnvironmentVariable(\"displayMode\");",
											"",
											"//Response body contains \"displayGroupIds\" Entity",
											"tests[\"Response body includes displayGroupIds entity from JSON data\"] = jsonData.displayGroupIds == postman.getGlobalVariable(\"displayGroupId6\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayGroupIds\": [{{displayGroupId6}}]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Valid Request - Update Non Required Parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fc7cb4c2-62cd-4827-beca-e9070033d4bb",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 2);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"9,10,11\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d3c77065-9872-4b27-aece-a0f5cd067c72",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//displayConfigurationId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayConfigurationId !== undefined;",
											"",
											"//Response body contains \"displayId\" Entity",
											"tests[\"Response body includes displayId entity from JSON data\"] = jsonData.displayId == postman.getGlobalVariable(\"displayId4\");",
											"",
											"//Response body contains \"playVideo\" Entity",
											"tests[\"Response body includes playVideo entity from JSON data\"] = jsonData.playVideo == postman.getEnvironmentVariable(\"playVideo\");",
											"",
											"//Response body contains \"playAudio\" Entity",
											"tests[\"Response body includes playAudio entity from JSON data\"] = jsonData.playAudio == postman.getEnvironmentVariable(\"playAudio\");",
											"",
											"//Response body contains \"isActive\" Entity",
											"tests[\"Response body includes isActive entity from JSON data\"] = jsonData.isActive == postman.getEnvironmentVariable(\"isActive\");",
											"",
											"//Response body contains \"displayMode\" Entity",
											"tests[\"Response body includes displayMode entity from JSON data\"] = jsonData.displayMode == postman.getEnvironmentVariable(\"displayMode\");",
											"",
											"//Response body contains \"displayGroupIds\" Entity",
											"tests[\"Response body includes displayGroupIds entity from JSON data\"] = jsonData.displayGroupIds == postman.getGlobalVariable(\"displayGroupId_today\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupId_today}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Invalid Request - Non Numeric DisplayGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "50a62675-b497-41cd-ba4c-51b80c21701b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "500a5aae-ae5d-4db6-89a3-a03db4b3081f",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \" + postman.getGlobalVariable(\"nonnumericdisplayGroupId\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [\"{{nonnumericdisplayGroupId}}\"\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Invalid Request - Non Existing DisplayGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "15428354-f274-425b-b21b-9ee61ab53cce",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setGlobalVariable(\"nonexistingdisplayGroupId\", 1111111);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d180616e-0c0a-49e0-9877-0921a9fae8a8",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"No DisplayGroup was found matching ID \" + postman.getGlobalVariable(\"nonexistingdisplayGroupId\"));",
											"    console.log(pm.response.text());",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{nonexistingdisplayGroupId}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Invalid Request - Non Existing DisplayId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2441606a-7962-454d-a5b2-ff8eac75f34e",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not find Display \" + postman.getGlobalVariable(\"nonexistingDisplayId\") + \" in the system. Please create the display before assigning it to a configuration\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{nonexistingDisplayId}}\",\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Invalid Request - Non Numeric DisplayId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "916e51b2-4e59-447a-9562-e5d1a7a86769",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \" + postman.getGlobalVariable(\"nonnumericDisplayId\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{nonnumericDisplayId}}\",\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Invalid Request - Blank DisplayId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9edf54e4-b39f-4b77-9f8f-1304973e27c0",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"   \",\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Invalid Request - Invalid DisplayMode",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "179dfe1d-b225-4a40-b74d-aecefd38c516",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"invaliddisplayMode\", 6);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4d2fa966-c61d-4086-aad0-400e64d19b82",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The provided Display Mode was not a recognised mode\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"venueId\": {{auction_venueId2}},\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{invaliddisplayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Invalid Request - Invalid PlayVideo",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b830ee64-9a18-4eab-a271-a7fed7a6f929",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalidplayVideo\", \"abc\");",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 2);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4b577c58-52d7-402d-91fb-2282adcf1e15",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to boolean: \" + postman.getEnvironmentVariable(\"invalidplayVideo\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"venueId\": {{auction_venueId2}},\r\n  \"playVideo\": \"{{invalidplayVideo}}\",\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Invalid Request - Invalid PlayAudio",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b830ee64-9a18-4eab-a271-a7fed7a6f929",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalidplayVideo\", \"abc\");",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 2);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "71e84187-67e8-4b66-9360-cf31784ad28e",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to boolean: \" + postman.getEnvironmentVariable(\"invalidplayVideo\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"venueId\": {{auction_venueId2}},\r\n  \"playVideo\": \"{{invalidplayVideo}}\",\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Invalid Request - Invalid isActive",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "78bbbb3a-ac40-46f6-8a64-38a77521f01b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalidplayVideo\", \"abc\");",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"invalidisActive\", \"a99\");",
											"postman.setEnvironmentVariable(\"displayMode\", 2);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5d9841c4-0235-4748-9c8a-b1e3583910e2",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to boolean: \" + postman.getEnvironmentVariable(\"invalidisActive\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"venueId\": {{auction_venueId2}},\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": \"{{invalidisActive}}\",\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Invalid Request URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "55a123db-bac3-4536-bc68-809755af227d",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"venueId\": {{auction_venueId2}},\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfiguration/{{displayConfigurationId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfiguration",
										"{{displayConfigurationId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ee97c487-4556-4441-9594-483394ec93cc",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Invalid Request - Empty Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "971f82e8-e9e8-4762-b7da-e3f79e56cc4c",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"No valid DisplayConfiguration field updates were received\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Invalid Request - Missing Header - Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "57ab88ea-c51b-4736-a903-da96385f9319",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"venueId\": {{auction_venueId2}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Invalid Request - Non Numeric DisplayConfigurationId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d04e74e6-cd47-4037-bfbe-6996daf843db",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "48740b8d-5cde-4f69-9d4e-e86bb96b9ae1",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"nonnumericdisplayConfigurationId\") + \"' is not valid.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"venueId\": {{auction_venueId_only}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{nonnumericdisplayConfigurationId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{nonnumericdisplayConfigurationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Invalid Request - Non Existing DisplayConfigurationId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d04e74e6-cd47-4037-bfbe-6996daf843db",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2ddf78c3-61fc-4e22-91d5-9ee833211075",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"    ",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not find Display Configuration \" + postman.getGlobalVariable(\"nonexistingdisplayConfigurationId\") + \" in System\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"venueId\": {{auction_venueId_only}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{nonexistingdisplayConfigurationId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{nonexistingdisplayConfigurationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Configuration - Invalid Request - Invalid Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "78bbbb3a-ac40-46f6-8a64-38a77521f01b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalidplayVideo\", \"abc\");",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"invalidisActive\", \"a99\");",
											"postman.setEnvironmentVariable(\"displayMode\", 2);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b59d177c-e4b8-4899-871a-3d963e6f1eee",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayId\": \"{{displayId2}}\",\r\n  \"venueId\": {{auction_venueId2}},\r\n  \"playVideo\": {{playVideo}},\r\n  \"playAudio\": {{playAudio}},\r\n  \"isActive\": {{isActive}},\r\n  \"displayMode\": \"{{displayMode}}\",\r\n  \"displayGroupIds\": [{{displayGroupIds}}\r\n  \r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Display Configuration",
					"item": [
						{
							"name": "Get Display Configuration by displayGroupId",
							"item": [
								{
									"name": "Get Display Configuration - Valid Request -  Existing displayGroupId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "686e8eed-9023-4317-aa43-0f1d9f38e34e",
												"type": "text/javascript",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"//Correct Status Code",
													"utils.responseStatusCode(200);",
													"",
													"//Content Type is Present",
													"utils.headerElementPresent(\"OK\");;",
													"",
													"//Response time is less than 3000ms",
													"utils.responseLessThan(3000);",
													"",
													"//Response has a body",
													"utils.responseHasBody();",
													"",
													"//Validate the values of the response body",
													"    var jsonData = JSON.parse(responseBody);",
													"",
													"pm.test(\"Validate the Display Configuration parameters\", () => {",
													"   for (i = 0; i < jsonData.length-1; i++) {",
													"       ",
													"//displayConfigurationId has a value",
													"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData[i].displayConfigurationId !== undefined;",
													"",
													"//Response body contains \"displayId\" Entity",
													"tests[\"Response body includes displayId entity from JSON data\"] = jsonData[i].displayId !== undefined;",
													"",
													"//Response body contains \"venueId\" Entity",
													"//tests[\"Response body includes venueId entity from JSON data\"] = jsonData[i].venueId !== undefined;",
													"",
													"//Response body contains \"playVideo\" Entity",
													"tests[\"Response body includes playVideo entity from JSON data\"] = jsonData[i].playVideo !== undefined;",
													"",
													"//Response body contains \"playAudio\" Entity",
													"tests[\"Response body includes playAudio entity from JSON data\"] = jsonData[i].playAudio !== undefined;",
													"",
													"//Response body contains \"isActive\" Entity",
													"tests[\"Response body includes isActive entity from JSON data\"] = jsonData[i].isActive !== undefined;",
													"",
													"//Response body contains \"displayMode\" Entity",
													"tests[\"Response body includes displayMode entity from JSON data\"] = jsonData[i].displayMode !== undefined;",
													"",
													"//Response body contains \"displayGroupIds\" Entity",
													"tests[\"Response body includes displayGroupIds entity from JSON data\"] = jsonData[i].displayGroupIds !== undefined;",
													"",
													"   }",
													"});",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{id_token}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{environment}}/api/v1/DisplayConfigurations/GetDisplayGroupConfigurationsByDisplayGroupId/{{displayGroupId}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"api",
												"v1",
												"DisplayConfigurations",
												"GetDisplayGroupConfigurationsByDisplayGroupId",
												"{{displayGroupId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Display Configuration - Invalid Request -  Non Existing displayGroupId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e70eb927-c532-46bb-9758-c1d4e0f0b88a",
												"type": "text/javascript",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"//Correct Status Code",
													"utils.responseStatusCode(200);",
													"",
													"//Content Type is Present",
													"utils.headerElementPresent(\"OK\");;",
													"",
													"//Response time is less than 3000ms",
													"utils.responseLessThan(3000);",
													"",
													"//Response has a body",
													"utils.responseHasBody();",
													"",
													"//Validate the values of the response body",
													"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"[]\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{id_token}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{environment}}/api/v1/DisplayConfigurations/GetDisplayGroupConfigurationsByDisplayGroupId/{{nonexistingdisplayGroupId}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"api",
												"v1",
												"DisplayConfigurations",
												"GetDisplayGroupConfigurationsByDisplayGroupId",
												"{{nonexistingdisplayGroupId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Display Configuration - Invalid Request -  Non Numeric displayGroupId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06e53143-11e6-4ab9-b881-4af19251b243",
												"type": "text/javascript",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"//Correct Status Code",
													"utils.responseStatusCode(400);",
													"",
													"//Content Type is Present",
													"utils.headerElementPresent(\"Bad Request\");;",
													"",
													"//Response time is less than 3000ms",
													"utils.responseLessThan(3000);",
													"",
													"//Response has a body",
													"utils.responseHasBody();",
													"",
													"//Validate the values of the response body",
													"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"nonnumericdisplayGroupId\") + \"' is not valid.\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{id_token}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{environment}}/api/v1/DisplayConfigurations/GetDisplayGroupConfigurationsByDisplayGroupId/{{nonnumericdisplayGroupId}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"api",
												"v1",
												"DisplayConfigurations",
												"GetDisplayGroupConfigurationsByDisplayGroupId",
												"{{nonnumericdisplayGroupId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Display Configuration",
					"item": [
						{
							"name": "Delete Display Configuration - Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4bd8357-ab2e-4afc-9887-5160696a6dbb",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Display Configuration Deleted\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "763923b5-7c4c-407e-82f2-dc99e2bcb637",
										"type": "text/javascript",
										"exec": [
											"//Create Display Configuration Test Data",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/DisplayConfigurations\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"displayId\": pm.globals.get('displayId4'),",
											"            \"playVideo\": 1,",
											"            \"playAudio\": 0,",
											"            \"isActive\": 1,",
											"            \"displayMode\": pm.environment.get('displayMode'),",
											"            \"displayGroupIds\": [pm.globals.get('displayGroupId4')]",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"displayConfigurationId_delete\", res.json().displayConfigurationId);",
											"    }",
											");"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{displayConfigurationId_delete}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{displayConfigurationId_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Display Configuration - Invalid Request - Non Existing DisplayGroupId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81eb5181-4ffd-4ae9-b4ea-5c4f1b24c6ce",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"No DisplayConfiguration was found matching ID \" + postman.getGlobalVariable(\"nonexistingdisplayConfigurationId\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfigurations/{{nonexistingdisplayConfigurationId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfigurations",
										"{{nonexistingdisplayConfigurationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Display Group - Invalid Request - Non Numeric DisplayGroupId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3cd0cef6-e0d8-480f-b92d-213169ffb9f0",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"nonnumericdisplayGroupId\") + \"' is not valid.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{nonnumericdisplayGroupId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{nonnumericdisplayGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Display Group - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e93f177d-9225-4d1c-bc37-6e066ef9be6e",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayConfiguration/{{displayConfigurationId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayConfiguration",
										"{{displayConfigurationId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Display Group",
			"item": [
				{
					"name": "Post Display Group",
					"item": [
						{
							"name": "Post Display Group - Valid Request - Required Parameters Only",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32e61898-652a-4375-bdfa-515ed2b21cdc",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Venue ID for the other tests",
											"postman.setGlobalVariable(\"displayGroupId\", jsonData.displayGroupId);",
											"",
											"//displayGroupId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayGroupId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId2\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"displayGroupName\");",
											"",
											"//Response body contains \"description\" Entity",
											"tests[\"Response body includes description entity from JSON data\"] = jsonData.description === null;",
											"",
											"//Response body contains \"displayConfigurationIds\" Entity",
											"tests[\"Response body includes displayConfigurationIds entity from JSON data\"] = jsonData.displayConfigurationIds === null;",
											"",
											"//Response body contains \"auctionSessionIds\" Entity",
											"tests[\"Response body includes auctionSessionIds entity from JSON data\"] = jsonData.auctionSessionIds === null;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"venueId\": {{auction_venueId2}},\r\n  \"name\": \"{{displayGroupName}}\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Valid Request - Single DisplayConfigurationId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a32418d3-fa81-4e9b-a060-7b74eb4d44e2",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											"postman.setEnvironmentVariable(\"displayGroupDescription\", \"Display Group Description 1 \");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bd7130f2-b30b-4e4a-bbfb-bf15bc9e323a",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Venue ID for the other tests",
											"postman.setGlobalVariable(\"displayGroupId3\", jsonData.displayGroupId);",
											"",
											"//displayGroupId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayGroupId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId2\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"displayGroupName\");",
											"",
											"//Response body contains \"description\" Entity",
											"tests[\"Response body includes description entity from JSON data\"] = jsonData.description == postman.getEnvironmentVariable(\"displayGroupDescription\");",
											"",
											"//Response body contains \"displayConfigurationId1\" Entity",
											"tests[\"Response body includes displayConfigurationId1 entity from JSON data\"] = jsonData.displayConfigurationIds[0] == postman.getGlobalVariable(\"displayConfigurationId4\");",
											"",
											"//Response body contains \"auctionSessionIds1\" Entity",
											"tests[\"Response body includes auctionSessionIds1 entity from JSON data\"] = jsonData.auctionSessionIds === null;",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"venueId\": {{auction_venueId2}},\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId4}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Valid Request - All Parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a32418d3-fa81-4e9b-a060-7b74eb4d44e2",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											"postman.setEnvironmentVariable(\"displayGroupDescription\", \"Display Group Description 1 \");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "664c20a2-5217-43b0-8b1a-71c0ff4e68d4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the Venue ID for the other tests",
											"postman.setGlobalVariable(\"displayGroupId2\", jsonData.displayGroupId);",
											"",
											"//displayGroupId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayGroupId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId2\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"displayGroupName\");",
											"",
											"//Response body contains \"description\" Entity",
											"tests[\"Response body includes description entity from JSON data\"] = jsonData.description == postman.getEnvironmentVariable(\"displayGroupDescription\");",
											"",
											"//Response body contains \"displayConfigurationId1\" Entity",
											"tests[\"Response body includes displayConfigurationId1 entity from JSON data\"] = jsonData.displayConfigurationIds[0] == postman.getGlobalVariable(\"displayConfigurationId\");",
											"",
											"//Response body contains \"displayConfigurationId2\" Entity",
											"tests[\"Response body includes displayConfigurationId2 entity from JSON data\"] = jsonData.displayConfigurationIds[1] == postman.getGlobalVariable(\"displayConfigurationId2\");",
											"",
											"//Response body contains \"displayConfigurationId3\" Entity",
											"tests[\"Response body includes displayConfigurationId3 entity from JSON data\"] = jsonData.displayConfigurationIds[2] == postman.getGlobalVariable(\"displayConfigurationId3\");",
											"",
											"//Response body contains \"auctionSessionIds1\" Entity",
											"tests[\"Response body includes auctionSessionIds1 entity from JSON data\"] = jsonData.auctionSessionIds[0] == postman.getGlobalVariable(\"auctionSessionId3\");",
											"",
											"//Response body contains \"auctionSessionIds1\" Entity",
											"tests[\"Response body includes auctionSessionIds2 entity from JSON data\"] = jsonData.auctionSessionIds[1] == postman.getGlobalVariable(\"auctionSessionId4\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"venueId\": {{auction_venueId2}},\n  \"name\": \"{{displayGroupName}}\",\n  \"description\": \"{{displayGroupDescription}}\",\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid - Assign an Auction Session ID that is already assigned to a different display group",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f71f49fd-ca85-480b-9351-b35584aa4a1d",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Auction Session \" + postman.getGlobalVariable(\"auctionSessionId3\") + \" has already been assigned a display group. Please remove the display group from the auction session to proceed.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"venueId\": {{auction_venueId2}},\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group [INPROGRESS]  - Invalid -  Assign Overlapping Auction Sessions to a Display Group",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2ac1516b-03a9-4a88-a996-f54093d8c384",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"/*",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Auction Session \" + postman.getGlobalVariable(\"auctionSessionId3\") + \" has already been assigned a display group. Please remove the display group from the auction session to proceed.\");",
											"});",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"venueId\": {{auction_venueId2}},\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId_overlapping}},{{auctionSessionId_overlapping2}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid Request - Missing Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "58933469-7577-48a9-a1cf-d497a40cb6f2",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A Display Group Name is required\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"venueId\": {{auction_venueId2}},\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\r\n\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid Request - Blank Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "eb54e3fe-a090-44c9-a8f0-043c47f027f2",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A Display Group Name is required\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"venueId\": {{auction_venueId2}},\r\n  \"name\": \"   \",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid Request - Null Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3ee998fa-7d6d-44b1-8fc9-aa80d1a9d0d9",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A Display Group Name is required\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"venueId\": {{auction_venueId2}},\r\n  \"name\": \"\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid Request - Non Existing Display Configuration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d80cb6a9-6ae1-44d1-b3d5-51ebc4279b61",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: No Display Configuration was found matching ID \" + postman.getGlobalVariable(\"nonexistingdisplayConfigurationId\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"venueId\": {{auction_venueId2}},\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{nonexistingdisplayConfigurationId}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid Request - Non Numeric Display Configuration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2698579e-750f-4ff7-8f12-3ca9b249993d",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Input string '\" + postman.getGlobalVariable(\"nonnumericdisplayConfigurationId\") + \"' is not a valid integer.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"venueId\": {{auction_venueId2}},\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{nonnumericdisplayConfigurationId}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid Request - Non Existing AuctionSessionID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a1415faf-cff4-496c-9bbc-f0b1cde47b53",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: No Auction Session was found matching ID \" + postman.getGlobalVariable(\"nonexistingauctionSessionId\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"venueId\": {{auction_venueId2}},\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}}],\r\n  \"auctionSessionIds\": [{{nonexistingauctionSessionId}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid Request - Non Numeric AuctionSessionID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8f4adf56-c3e5-4222-87cf-f405609a17ef",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \" + postman.getGlobalVariable(\"invalidauctionSessionId\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"venueId\": {{auction_venueId2}},\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}}],\r\n  \"auctionSessionIds\": [\"{{invalidauctionSessionId}}\"]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid Request URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "31cb31d4-1bb7-461f-aa8d-436c219e7168",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"venueId\": {{auction_venueId2}},\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}}],\r\n  \"auctionSessionIds\": [\"{{invalidauctionSessionId}}\"]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroup/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroup",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "51f1a2f0-52f5-44fa-9293-999d89507804",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid Request - Invalid Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "12930863-150e-422e-80a4-24d8bfefdd90",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"venueId\": {{auction_venueId2}},\r\n  \"name\": \"{{displayGroupName}}\"\r\n\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid Request - Empty Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "941aa47d-4092-4de5-9069-ed9f12f3f89f",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A Display Group Name is required\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid Request - Missing Header - Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6d5d9d61-54f9-4ec4-89d4-abdb4d687a23",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid Request - Missing VenueId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f56c13af-8528-4330-b26a-4c8f4d13b835",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: No Venue was found matching ID 0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid Request - Null VenueId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "374ef922-c3b9-42f4-b53e-149ed7409ca9",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: No Venue was found matching ID 0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"venueId\": \"\",\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid Request - Blank VenueId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c2472af4-3d2d-4e93-928a-9841d4e4b508",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer:\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"venueId\": \"   \",\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Configuration - Invalid Request - Non Existing VenueId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a2553384-1ab9-46cb-9528-9ef57358bbf2",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: No Venue was found matching ID \" + postman.getGlobalVariable(\"nonexistingvenueId\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"venueId\": {{nonexistingvenueId}},\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Display Group - Invalid Request - Non Numeric VenueId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d48e44a-6f05-45f0-a317-c3cd75e6f162",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Input string '\" + postman.getGlobalVariable(\"invalidvenueId\") + \"' is not a valid integer.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"venueId\": {{invalidvenueId}},\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Put Display Group",
					"item": [
						{
							"name": "Put Display Group - Valid Request - Update Display Group Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec8ed1b1-7249-4de7-9930-7b8030a94e95",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1 Updated\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0c4494cb-108d-464a-aac8-490d29917f6e",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//displayGroupId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayGroupId !== undefined;",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"displayGroupName\");",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId2\");",
											"",
											"//Response body contains \"description\" Entity",
											"tests[\"Response body includes description entity from JSON data\"] = jsonData.description == postman.getEnvironmentVariable(\"displayGroupDescription\");",
											"",
											"//Response body contains \"displayConfigurationId1\" Entity",
											"tests[\"Response body includes displayConfigurationId1 entity from JSON data\"] = jsonData.displayConfigurationIds[0] == postman.getGlobalVariable(\"displayConfigurationId\");",
											"",
											"//Response body contains \"displayConfigurationId2\" Entity",
											"tests[\"Response body includes displayConfigurationId2 entity from JSON data\"] = jsonData.displayConfigurationIds[1] == postman.getGlobalVariable(\"displayConfigurationId2\");",
											"",
											"//Response body contains \"displayConfigurationId3\" Entity",
											"tests[\"Response body includes displayConfigurationId3 entity from JSON data\"] = jsonData.displayConfigurationIds[2] == postman.getGlobalVariable(\"displayConfigurationId3\");",
											"",
											"//Response body contains \"auctionSessionIds1\" Entity",
											"tests[\"Response body includes auctionSessionIds1 entity from JSON data\"] = jsonData.auctionSessionIds[0] == postman.getGlobalVariable(\"auctionSessionId3\");",
											"",
											"//Response body contains \"auctionSessionIds1\" Entity",
											"tests[\"Response body includes auctionSessionIds2 entity from JSON data\"] = jsonData.auctionSessionIds[1] == postman.getGlobalVariable(\"auctionSessionId4\");"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{displayGroupName}}\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Valid Request - Update VenueId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec8ed1b1-7249-4de7-9930-7b8030a94e95",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1 Updated\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b4633abf-9962-4582-9f9d-3d02f789082c",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//displayGroupId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayGroupId !== undefined;",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"displayGroupName\");",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId3\");",
											"",
											"//Response body contains \"description\" Entity",
											"tests[\"Response body includes description entity from JSON data\"] = jsonData.description == postman.getEnvironmentVariable(\"displayGroupDescription\");",
											"",
											"//Response body contains \"displayConfigurationId1\" Entity",
											"tests[\"Response body includes displayConfigurationId1 entity from JSON data\"] = jsonData.displayConfigurationIds[0] == postman.getGlobalVariable(\"displayConfigurationId\");",
											"",
											"//Response body contains \"displayConfigurationId2\" Entity",
											"tests[\"Response body includes displayConfigurationId2 entity from JSON data\"] = jsonData.displayConfigurationIds[1] == postman.getGlobalVariable(\"displayConfigurationId2\");",
											"",
											"//Response body contains \"displayConfigurationId3\" Entity",
											"tests[\"Response body includes displayConfigurationId3 entity from JSON data\"] = jsonData.displayConfigurationIds[2] == postman.getGlobalVariable(\"displayConfigurationId3\");",
											"",
											"//Response body contains \"auctionSessionIds1\" Entity",
											"tests[\"Response body includes auctionSessionIds1 entity from JSON data\"] = jsonData.auctionSessionIds[0] == postman.getGlobalVariable(\"auctionSessionId3\");",
											"",
											"//Response body contains \"auctionSessionIds1\" Entity",
											"tests[\"Response body includes auctionSessionIds2 entity from JSON data\"] = jsonData.auctionSessionIds[1] == postman.getGlobalVariable(\"auctionSessionId4\");"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"venueId\": {{auction_venueId3}}\r\n\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Valid Request - Nullify AuctionSessions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "32069fbf-5ec9-4cdf-b01f-6aac623dbda2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "978693a1-4a61-4d05-9341-1b96a39ac9a5",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//displayGroupId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayGroupId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId3\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"displayGroupName\");",
											"",
											"//Response body contains \"description\" Entity",
											"tests[\"Response body includes description entity from JSON data\"] = jsonData.description == postman.getEnvironmentVariable(\"displayGroupDescription\");",
											"",
											"//Response body contains \"displayConfigurationId1\" Entity",
											"tests[\"Response body includes displayConfigurationId1 entity from JSON data\"] = jsonData.displayConfigurationIds[0] == postman.getGlobalVariable(\"displayConfigurationId\");",
											"",
											"//Response body contains \"displayConfigurationId2\" Entity",
											"tests[\"Response body includes displayConfigurationId2 entity from JSON data\"] = jsonData.displayConfigurationIds[1] == postman.getGlobalVariable(\"displayConfigurationId2\");",
											"",
											"//Response body contains \"displayConfigurationId3\" Entity",
											"tests[\"Response body includes displayConfigurationId3 entity from JSON data\"] = jsonData.displayConfigurationIds[2] == postman.getGlobalVariable(\"displayConfigurationId3\");",
											"",
											"//Response body contains \"auctionSessionIds\" Entity",
											"tests[\"Response body includes auctionSessionIds entity from JSON data\"] = jsonData.auctionSessionIds === null;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"auctionSessionIds\": []\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Valid Request - Update Description",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9c7555ee-e2d3-45f2-8292-079b00a64dac",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupDescription\", \"Display Group Description 1 Updated\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8486894f-064d-4a44-8f19-f61515253ec8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//displayGroupId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayGroupId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId3\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"displayGroupName\");",
											"",
											"//Response body contains \"description\" Entity",
											"tests[\"Response body includes description entity from JSON data\"] = jsonData.description == postman.getEnvironmentVariable(\"displayGroupDescription\");",
											"",
											"//Response body contains \"displayConfigurationId1\" Entity",
											"tests[\"Response body includes displayConfigurationId1 entity from JSON data\"] = jsonData.displayConfigurationIds[0] == postman.getGlobalVariable(\"displayConfigurationId\");",
											"",
											"//Response body contains \"displayConfigurationId2\" Entity",
											"tests[\"Response body includes displayConfigurationId2 entity from JSON data\"] = jsonData.displayConfigurationIds[1] == postman.getGlobalVariable(\"displayConfigurationId2\");",
											"",
											"//Response body contains \"displayConfigurationId3\" Entity",
											"tests[\"Response body includes displayConfigurationId3 entity from JSON data\"] = jsonData.displayConfigurationIds[2] == postman.getGlobalVariable(\"displayConfigurationId3\");",
											"",
											"//Response body contains \"auctionSessionIds\" Entity",
											"//tests[\"Response body includes auctionSessionIds entity from JSON data\"] = jsonData.auctionSessionIds === null;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"description\": \"{{displayGroupDescription}}\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Valid Request - Update DisplayConfigurationId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "32069fbf-5ec9-4cdf-b01f-6aac623dbda2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "204de826-b6de-45a1-990b-86f561845bae",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//displayGroupId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayGroupId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId3\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"displayGroupName\");",
											"",
											"//Response body contains \"description\" Entity",
											"tests[\"Response body includes description entity from JSON data\"] = jsonData.description == postman.getEnvironmentVariable(\"displayGroupDescription\");",
											"",
											"//Response body contains \"displayConfigurationId1\" Entity",
											"tests[\"Response body includes displayConfigurationId1 entity from JSON data\"] = jsonData.displayConfigurationIds[0] == postman.getGlobalVariable(\"displayConfigurationId4\");",
											"",
											"//Response body contains \"auctionSessionIds\" Entity",
											"//tests[\"Response body includes auctionSessionIds entity from JSON data\"] = jsonData.auctionSessionIds === null;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayConfigurationIds\": [{{displayConfigurationId4}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Valid Request - Update All Parameters [INPROGRESS]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "638c9df7-f91d-4bd9-9172-f3b75a55dbf9",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test Updated 2\");",
											"postman.setEnvironmentVariable(\"displayGroupDescription\", \"Display Group Description Updated 2 \");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "92c63612-87f8-4f79-8d66-3adacaa8f32a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//displayGroupId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayGroupId !== undefined;",
											"",
											"//Response body contains \"venueId\" Entity",
											"tests[\"Response body includes venueId entity from JSON data\"] = jsonData.venueId == postman.getGlobalVariable(\"auction_venueId2\");",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"displayGroupName\");",
											"",
											"//Response body contains \"description\" Entity",
											"tests[\"Response body includes description entity from JSON data\"] = jsonData.description == postman.getEnvironmentVariable(\"displayGroupDescription\");",
											"",
											"//Response body contains \"displayConfigurationId1\" Entity",
											"tests[\"Response body includes displayConfigurationId1 entity from JSON data\"] = jsonData.displayConfigurationIds[0] == postman.getGlobalVariable(\"displayConfigurationId\");",
											"",
											"//Response body contains \"displayConfigurationId2\" Entity",
											"tests[\"Response body includes displayConfigurationId2 entity from JSON data\"] = jsonData.displayConfigurationIds[1] == postman.getGlobalVariable(\"displayConfigurationId2\");",
											"",
											"//Response body contains \"displayConfigurationId3\" Entity",
											"tests[\"Response body includes displayConfigurationId3 entity from JSON data\"] = jsonData.displayConfigurationIds[2] == postman.getGlobalVariable(\"displayConfigurationId3\");",
											"",
											"//Response body contains \"auctionSessionIds1\" Entity",
											"tests[\"Response body includes auctionSessionIds1 entity from JSON data\"] = jsonData.auctionSessionIds[0] == postman.getGlobalVariable(\"auctionSessionId7\");",
											"",
											"//Response body contains \"auctionSessionIds2\" Entity",
											"tests[\"Response body includes auctionSessionIds2 entity from JSON data\"] = jsonData.auctionSessionIds[1] == postman.getGlobalVariable(\"auctionSessionId8\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId7}},{{auctionSessionId8}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Invalid - Assign an Auction Session ID that is already assigned to a different display group",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8b8a505a-bee1-47bf-ba36-d7e4a058ee08",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Auction Session \" + postman.getGlobalVariable(\"auctionSessionId3\") + \" has already been assigned a display group. Please remove the display group from the auction session to proceed.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Invalid - Assign Overlapping Auction Sessions to a Display Group",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e6e813a8-37d4-4287-99bd-d1642f1b6b20",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											"postman.setEnvironmentVariable(\"auction_startDate_1\", \"2018-07-01T08:15:30\");",
											"postman.setEnvironmentVariable(\"auction_finishDate_1\", \"2018-07-01T08:18:30\");",
											"postman.setEnvironmentVariable(\"auction_startDate_2\", \"2018-07-01T08:17:30\");",
											"postman.setEnvironmentVariable(\"auction_finishDate_2\", \"2018-07-01T08:19:30\");",
											"",
											"//Create Auction Session Test Data 2",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/AuctionSessions/\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"name\": pm.environment.get('auction_name'),",
											"            \"venueId\": pm.globals.get('auction_venueId'),",
											"            \"startDate\": pm.environment.get('auction_startDate_1'),",
											"            \"finishDate\": pm.environment.get('auction_finishDate_1')",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"auctionSessionId5\", res.json().auctionSessionId);",
											"    }",
											");",
											"",
											"//Create Auction Session Test Data 3",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/AuctionSessions/\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"name\": pm.environment.get('auction_name'),",
											"            \"venueId\": pm.globals.get('auction_venueId'),",
											"            \"startDate\": pm.environment.get('auction_startDate_2'),",
											"            \"finishDate\": pm.environment.get('auction_finishDate_2')",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"auctionSessionId6\", res.json().auctionSessionId);",
											"    }",
											");",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "07511443-eb60-4a4f-89b9-cbedaabad6c5",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Auction Session \" + postman.getGlobalVariable(\"auctionSessionId5\") + \" occurs at the same time range as \" + postman.getGlobalVariable(\"auctionSessionId6\") + \". Please adjust the start and finish dates of one of these auction sessions\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [],\r\n  \"auctionSessionIds\": [{{auctionSessionId5}},{{auctionSessionId6}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Invalid Request - Non Existing Display Configuration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4906edfe-1577-4bd6-b6c9-da6a9145de35",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"No Display Configuration was found matching ID \" + postman.getGlobalVariable(\"nonexistingdisplayConfigurationId\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{nonexistingdisplayConfigurationId}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Invalid Request - Non Numeric Display Configuration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5b5e74a3-31f2-41be-85f8-91f657806c1b",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Input string '\" + postman.getGlobalVariable(\"nonnumericdisplayConfigurationId\") + \"' is not a valid integer.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{nonnumericdisplayConfigurationId}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Invalid Request - Non Existing AuctionSessionID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "594d2625-7bf5-40d1-ba5d-ddc1022a02ce",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"No Auction Session was found matching ID \" + postman.getGlobalVariable(\"nonexistingauctionSessionId\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}}],\r\n  \"auctionSessionIds\": [{{nonexistingauctionSessionId}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Invalid Request - Non Numeric AuctionSessionID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280551bc-d837-480e-9bf9-f5ad5d0e31ff",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test 1\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "41ac69e5-b89c-43fd-8759-9dfe69a24fcd",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \" + postman.getGlobalVariable(\"invalidauctionSessionId\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}}],\r\n  \"auctionSessionIds\": [\"{{invalidauctionSessionId}}\"]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Invalid Request - Non Numeric displayGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc37fc6e-00f5-4446-bfe6-99a3c828dade",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "15f15c6b-17fa-4be0-8157-d5f2494d2b64",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"nonnumericdisplayGroupId\") + \"' is not valid.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{nonnumericdisplayGroupId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{nonnumericdisplayGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Invalid Request - Non Existing displayGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9dbf6ca6-29a2-42c2-b104-30b1ff4bd798",
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"invaliddisplayGroupId\", \"17aaaa\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c9ef275d-28a8-49e3-b520-515c34d4732b",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not find DisplayGroup \" + postman.getGlobalVariable(\"nonexistingdisplayGroupId\") + \" in System\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{nonexistingdisplayGroupId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{nonexistingdisplayGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Invalid Request URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9dbf6ca6-29a2-42c2-b104-30b1ff4bd798",
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"invaliddisplayGroupId\", \"17aaaa\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b2a8681c-9b4d-4fe6-8ece-b3603872cd81",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroup/{{displaygroupId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroup",
										"{{displaygroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9dbf6ca6-29a2-42c2-b104-30b1ff4bd798",
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"invaliddisplayGroupId\", \"17aaaa\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "44c39a9b-04f8-4614-ac5b-145dbb3352fc",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Invalid Request - Invalid Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9dbf6ca6-29a2-42c2-b104-30b1ff4bd798",
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"invaliddisplayGroupId\", \"17aaaa\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a80e1505-eedd-4b5a-a4b8-e96d0f29d394",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Invalid Request - Empty Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1429fff7-72d9-4673-b0ef-2bce25d32228",
										"exec": [
											"postman.setEnvironmentVariable(\"displayGroupName\", \"Display Group Test Updated 2\");",
											"postman.setEnvironmentVariable(\"displayGroupDescription\", \"Display Group Description Updated 2 \");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "64f49242-5af0-49dc-ad8a-6aa7f842354b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//displayGroupId has a value",
											"tests[\"Response body includes displayConfigurationId entity from JSON data\"] = jsonData.displayGroupId !== undefined;",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.name == postman.getEnvironmentVariable(\"displayGroupName\");",
											"",
											"//Response body contains \"description\" Entity",
											"tests[\"Response body includes description entity from JSON data\"] = jsonData.description == postman.getEnvironmentVariable(\"displayGroupDescription\");",
											"",
											"//PUT TESTS BACK AFTER FIXES",
											"//Response body contains \"displayConfigurationId1\" Entity",
											"//tests[\"Response body includes displayConfigurationId1 entity from JSON data\"] = jsonData.displayConfigurationIds[0] == postman.getGlobalVariable(\"displayConfigurationId\");",
											"",
											"//Response body contains \"displayConfigurationId2\" Entity",
											"//tests[\"Response body includes displayConfigurationId2 entity from JSON data\"] = jsonData.displayConfigurationIds[1] == postman.getGlobalVariable(\"displayConfigurationId2\");",
											"",
											"//Response body contains \"displayConfigurationId3\" Entity",
											"//tests[\"Response body includes displayConfigurationId3 entity from JSON data\"] = jsonData.displayConfigurationIds[2] == postman.getGlobalVariable(\"displayConfigurationId3\");",
											"",
											"//Response body contains \"auctionSessionIds1\" Entity",
											"//tests[\"Response body includes auctionSessionIds1 entity from JSON data\"] = jsonData.auctionSessionIds[0] == postman.getGlobalVariable(\"auctionSessionId7\");",
											"",
											"//Response body contains \"auctionSessionIds2\" Entity",
											"//tests[\"Response body includes auctionSessionIds2 entity from JSON data\"] = jsonData.auctionSessionIds[1] == postman.getGlobalVariable(\"auctionSessionId8\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Invalid Request - Missing Header - Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9dbf6ca6-29a2-42c2-b104-30b1ff4bd798",
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"invaliddisplayGroupId\", \"17aaaa\");",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2164e528-06b5-4fa0-b2e7-ca4ee6501398",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Invalid Request - Non Existing VenueId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bbc0526a-cad8-4faa-ac73-3c8aa13129bd",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"No Venue was found matching ID \" + postman.getGlobalVariable(\"nonexistingvenueId\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"venueId\": {{nonexistingvenueId}},\r\n\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group - Invalid Request - Non Numeric VenueId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "61179350-f4c3-4daf-9206-a88604aff71e",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Input string '\" + postman.getGlobalVariable(\"invalidvenueId\") + \"' is not a valid integer.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"venueId\": {{invalidvenueId}},\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Display Group- Invalid Request - Blank VenueId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c264e5-44c2-4a2a-842c-7465003c3bb0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"playVideo\", 1);",
											"postman.setEnvironmentVariable(\"playAudio\", 1);",
											"postman.setEnvironmentVariable(\"isActive\", 1);",
											"postman.setEnvironmentVariable(\"displayMode\", 1);",
											"postman.setEnvironmentVariable(\"displayGroupIds\", \"178,179,180\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1bbfa833-1043-4dfb-99b8-83483349af4a",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer:\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"venueId\": \"   \",\r\n  \"name\": \"{{displayGroupName}}\",\r\n  \"description\": \"{{displayGroupDescription}}\",\r\n  \"displayConfigurationIds\": [{{displayConfigurationId}},{{displayConfigurationId2}},{{displayConfigurationId3}}],\r\n  \"auctionSessionIds\": [{{auctionSessionId3}},{{auctionSessionId4}}]\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId2}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Display Group",
					"item": [
						{
							"name": "Get Display Groups - Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd65082c-5000-4b11-ab0b-8b0d44555de8",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Display Groups - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44615041-f841-4101-8bb6-0cb0494370ba",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroup/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroup",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Display Groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a10de9e0-c3db-4674-a989-46cb74598724",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems !== undefined;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber == postman.getEnvironmentVariable(\"pageNumber\");",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize == postman.getEnvironmentVariable(\"pageSize\");",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list !== undefined;",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages !== undefined;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage !== undefined;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage !== undefined;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber !== undefined;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"//cancellationReason has a value",
											"tests[\"Response body includes cancellationReason entity from JSON data\"] = jsonData.cancellationReason === null;",
											"",
											"pm.test(\"Validate each Display Group inside List\", () => {",
											"   for (i = 0; i < jsonData.list.length-1; i++) {",
											"",
											"//displayGroupId has a value",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.list[i].displayGroupId !== undefined;",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.list[i].name !== undefined;",
											"",
											"//Response body contains \"description\" Entity",
											"tests[\"Response body includes description entity from JSON data\"] = jsonData.list[i].description !== undefined;",
											"",
											"//Response body contains \"displayConfigurationIds\" Entity",
											"tests[\"Response body includes displayConfigurationIds entity from JSON data\"] = jsonData.list[i].displayConfigurationIds !== undefined;",
											"",
											"//Response body contains \"auctionSessionIds\" Entity",
											"tests[\"Response body includes auctionSessionIds entity from JSON data\"] = jsonData.list[i].auctionSessionIds !== undefined;",
											"",
											"//Response body contains \"isInUse\" Entity",
											"tests[\"Response body includes isInUse entity from JSON data\"] = jsonData.list[i].isInUse !== undefined;",
											"",
											"//Response body contains \"displayCount\" Entity",
											"tests[\"Response body includes displayCount entity from JSON data\"] = jsonData.list[i].displayCount !== undefined;",
											"",
											"   }",
											"});",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a9036fb1-e7eb-42a2-a8d8-9f1cd9bbcbd1",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber\", \"1\");",
											"postman.setEnvironmentVariable(\"pageSize\", \"5\");",
											"postman.setEnvironmentVariable(\"currentDate\", \"2018-08-14T00:00:00\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/GetPagedDisplayGroups?pageNumber={{pageNumber}}&pageSize={{pageSize}}&auctionSessionId={{auctionSessionId_today}}&venueId={{auction_venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"GetPagedDisplayGroups"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "auctionSessionId",
											"value": "{{auctionSessionId_today}}"
										},
										{
											"key": "venueId",
											"value": "{{auction_venueId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Display Groups - Valid Request - Page Number has no results",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3e0ab62-6043-4b95-87d7-d9cf14d7f4cd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems === 0;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber === 0;",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize === 0;",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list === null;",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages !== undefined;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage !== undefined;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage !== undefined;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber !== undefined;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"//cancellationReason has a value",
											"tests[\"Response body includes cancellationReason entity from JSON data\"] = jsonData.cancellationReason == \"Invalid parameters provided\";",
											"",
											"//isCancelled has a value",
											"tests[\"Response body includes isCancelled entity from JSON data\"] = jsonData.isCancelled === true;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d378e1e1-c8c9-4193-8cec-cbb645254a01",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber_noresults\", \"3000\");",
											"postman.setEnvironmentVariable(\"pageSize\", \"20\");",
											"postman.setEnvironmentVariable(\"currentDate\", \"2018-08-14T00:00:00\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/GetPagedDisplayGroups?pageNumber={{pageNumber_noresults}}&pageSize={{pageSize}}&auctionSessionId={{auctionSessionId}}&venueId={{auction_venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"GetPagedDisplayGroups"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber_noresults}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "auctionSessionId",
											"value": "{{auctionSessionId}}"
										},
										{
											"key": "venueId",
											"value": "{{auction_venueId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Display Groups - Valid Request - No Auction Session ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a68f1d-294a-4c2a-b9ad-9e6908aeabf8",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems !== undefined;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber == postman.getEnvironmentVariable(\"pageNumber\");",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize == postman.getEnvironmentVariable(\"pageSize\");",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list !== undefined;",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages !== undefined;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage !== undefined;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage !== undefined;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber !== undefined;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"//cancellationReason has a value",
											"tests[\"Response body includes cancellationReason entity from JSON data\"] = jsonData.cancellationReason === null;",
											"",
											"pm.test(\"Validate each Display Group inside List\", () => {",
											"   for (i = 0; i < jsonData.list.length-1; i++) {",
											"",
											"//displayGroupId has a value",
											"tests[\"Response body includes displayGroupId entity from JSON data\"] = jsonData.list[i].displayGroupId !== undefined;",
											"",
											"//Response body contains \"name\" Entity",
											"tests[\"Response body includes name entity from JSON data\"] = jsonData.list[i].name !== undefined;",
											"",
											"//Response body contains \"description\" Entity",
											"tests[\"Response body includes description entity from JSON data\"] = jsonData.list[i].description !== undefined;",
											"",
											"//Response body contains \"displayConfigurationIds\" Entity",
											"tests[\"Response body includes displayConfigurationIds entity from JSON data\"] = jsonData.list[i].displayConfigurationIds !== undefined;",
											"",
											"//Response body contains \"auctionSessionIds\" Entity",
											"tests[\"Response body includes auctionSessionIds entity from JSON data\"] = jsonData.list[i].auctionSessionIds !== undefined;",
											"",
											"//Response body contains \"isInUse\" Entity",
											"tests[\"Response body includes isInUse entity from JSON data\"] = jsonData.list[i].isInUse !== undefined;",
											"",
											"//Response body contains \"displayCount\" Entity",
											"tests[\"Response body includes displayCount entity from JSON data\"] = jsonData.list[i].displayCount !== undefined;",
											"",
											"   }",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d378e1e1-c8c9-4193-8cec-cbb645254a01",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber_noresults\", \"3000\");",
											"postman.setEnvironmentVariable(\"pageSize\", \"20\");",
											"postman.setEnvironmentVariable(\"currentDate\", \"2018-08-14T00:00:00\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/GetPagedDisplayGroups?pageNumber={{pageNumber}}&pageSize={{pageSize}}&venueId={{auction_venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"GetPagedDisplayGroups"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "venueId",
											"value": "{{auction_venueId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Display Groups - Valid Request - No Venue ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b17f8da5-1288-46df-8a99-c712d7e0b94c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems === 0;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber === 0;",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize === 0;",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list === null;",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages !== undefined;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage !== undefined;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage !== undefined;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber !== undefined;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"//cancellationReason has a value",
											"tests[\"Response body includes cancellationReason entity from JSON data\"] = jsonData.cancellationReason == \"Invalid parameters provided\";",
											"",
											"//isCancelled has a value",
											"tests[\"Response body includes isCancelled entity from JSON data\"] = jsonData.isCancelled === true;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d378e1e1-c8c9-4193-8cec-cbb645254a01",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber_noresults\", \"3000\");",
											"postman.setEnvironmentVariable(\"pageSize\", \"20\");",
											"postman.setEnvironmentVariable(\"currentDate\", \"2018-08-14T00:00:00\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/GetPagedDisplayGroups?pageNumber={{pageNumber}}&pageSize={{pageSize}}&auctionSessionId={{auctionSessionId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"GetPagedDisplayGroups"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "auctionSessionId",
											"value": "{{auctionSessionId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Display Groups - Valid Request - Page Size has no results",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85e205a9-68db-47e6-9522-8cbf3a55e353",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems === 0;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber === 0;",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize === 0;",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list === null;",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages !== undefined;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage !== undefined;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage !== undefined;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber !== undefined;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"//cancellationReason has a value",
											"tests[\"Response body includes cancellationReason entity from JSON data\"] = jsonData.cancellationReason == \"Invalid parameters provided\";",
											"",
											"//isCancelled has a value",
											"tests[\"Response body includes isCancelled entity from JSON data\"] = jsonData.isCancelled === true;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d378e1e1-c8c9-4193-8cec-cbb645254a01",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber_noresults\", \"3000\");",
											"postman.setEnvironmentVariable(\"pageSize\", \"20\");",
											"postman.setEnvironmentVariable(\"currentDate\", \"2018-08-14T00:00:00\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/GetPagedDisplayGroups?pageNumber={{pageNumber}}&pageSize={{pageSize_noresults}}&auctionSessionId={{auctionSessionId}}&venueId={{auction_venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"GetPagedDisplayGroups"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize_noresults}}"
										},
										{
											"key": "auctionSessionId",
											"value": "{{auctionSessionId}}"
										},
										{
											"key": "venueId",
											"value": "{{auction_venueId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Display Groups - Invalid Request - Invalid Page Size",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45fbc8b4-24a5-46d4-b42e-3eee1d7243e0",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Invalid Date",
											"pm.test(\"Correct Error Message for Invalid Page Number\", function () {",
											"pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getEnvironmentVariable(\"invalidpageSize\") + \"' is not valid.\");",
											"});",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e20069da-a4a3-49dd-83be-e73f1c8862da",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/GetPagedDisplayGroups?pageNumber={{pageNumber}}&pageSize={{invalidpageSize}}&auctionSessionId={{auctionSessionId}}&venueId={{auction_venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"GetPagedDisplayGroups"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "pageSize",
											"value": "{{invalidpageSize}}"
										},
										{
											"key": "auctionSessionId",
											"value": "{{auctionSessionId}}"
										},
										{
											"key": "venueId",
											"value": "{{auction_venueId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Display Groups - Invalid Request - Invalid Page Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "754cbafe-d6ba-4261-b475-99bae8385eef",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Invalid Page Number",
											"pm.test(\"Correct Error Message for Invalid Page Number\", function () {",
											"pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getEnvironmentVariable(\"pageNumber_invalid\") + \"' is not valid.\");",
											"});",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d66d054d-d703-4f0b-83cc-e53d3b8940ef",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber_invalid\", \"30000000000000\");",
											"postman.setEnvironmentVariable(\"pageSize\", \"20\");",
											"postman.setEnvironmentVariable(\"currentDate\", \"2018-08-14T00:00:00\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/GetPagedDisplayGroups?pageNumber={{pageNumber_invalid}}&pageSize={{pageSize}}&auctionSessionId={{auctionSessionId}}&venueId={{auction_venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"GetPagedDisplayGroups"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber_invalid}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "auctionSessionId",
											"value": "{{auctionSessionId}}"
										},
										{
											"key": "venueId",
											"value": "{{auction_venueId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Display Groups - Invalid Request - Invalid Auction Session Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a00be508-4329-4783-98fe-10eefe22aeb9",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Invalid Page Size",
											"pm.test(\"Correct Error Message for Invalid Page Number\", function () {",
											"pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"invalidauctionSessionId\") + \"' is not valid.\");",
											"});",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "68f51afc-654c-4a0a-90d1-8ac3b2a4f22b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber\", \"2\");",
											"postman.setEnvironmentVariable(\"invalidpageSize\", \"300000000000\");",
											"postman.setEnvironmentVariable(\"currentDate\", \"2018-08-14T00:00:00\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/GetPagedDisplayGroups?pageNumber={{pageNumber}}&pageSize={{pageSize}}&auctionSessionId={{invalidauctionSessionId}}&venueId={{auction_venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"GetPagedDisplayGroups"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "auctionSessionId",
											"value": "{{invalidauctionSessionId}}"
										},
										{
											"key": "venueId",
											"value": "{{auction_venueId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Display Groups - Invalid Request - Invalid Venue Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e4488a0-4f20-480e-8e90-fd21c1cba41f",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Correct Error Message for Invalid Page Size",
											"pm.test(\"Correct Error Message for Invalid Page Number\", function () {",
											"pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"invalidvenueId\") + \"' is not valid.\");",
											"});",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "68f51afc-654c-4a0a-90d1-8ac3b2a4f22b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber\", \"2\");",
											"postman.setEnvironmentVariable(\"invalidpageSize\", \"300000000000\");",
											"postman.setEnvironmentVariable(\"currentDate\", \"2018-08-14T00:00:00\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/GetPagedDisplayGroups?pageNumber={{pageNumber}}&pageSize={{pageSize}}&auctionSessionId={{auctionSessionId_today}}&venueId={{invalidvenueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"GetPagedDisplayGroups"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "auctionSessionId",
											"value": "{{auctionSessionId_today}}"
										},
										{
											"key": "venueId",
											"value": "{{invalidvenueId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Display Groups  - Invalid Request - Missing Page Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa5221c2-46c3-4e05-86a9-ce6378995549",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems !== undefined;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber === 0;",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize == postman.getEnvironmentVariable(\"pageSize_noresults\");",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list === null;",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages !== undefined;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage !== undefined;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage !== undefined;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber !== undefined;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"//isCancelled has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"//cancellationReason has a value",
											"tests[\"Response body includes isCancelled entity from JSON data\"] = jsonData.isCancelled === true;",
											"//",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "68f51afc-654c-4a0a-90d1-8ac3b2a4f22b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber\", \"2\");",
											"postman.setEnvironmentVariable(\"invalidpageSize\", \"300000000000\");",
											"postman.setEnvironmentVariable(\"currentDate\", \"2018-08-14T00:00:00\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/GetPagedDisplayGroups?pageSize={{pageSize}}&auctionSessionId={{auctionSessionId}}&venueId={{auction_venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"GetPagedDisplayGroups"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "auctionSessionId",
											"value": "{{auctionSessionId}}"
										},
										{
											"key": "venueId",
											"value": "{{auction_venueId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Display Groups  - Invalid Request - Missing Page Size",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18fbc5c4-7419-49cd-8ab7-703ddd567f04",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems !== undefined;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber === 0;",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize == postman.getEnvironmentVariable(\"pageSize_noresults\");",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list === null;",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages !== undefined;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage !== undefined;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage !== undefined;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber !== undefined;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"//cancellationReason has a value",
											"tests[\"Response body includes cancellationReason entity from JSON data\"] = jsonData.cancellationReason === \"Invalid parameters provided\";",
											"//",
											"",
											"//cancellationReason has a value",
											"tests[\"Response body includes isCancelled entity from JSON data\"] = jsonData.isCancelled === true;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "68f51afc-654c-4a0a-90d1-8ac3b2a4f22b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber\", \"2\");",
											"postman.setEnvironmentVariable(\"invalidpageSize\", \"300000000000\");",
											"postman.setEnvironmentVariable(\"currentDate\", \"2018-08-14T00:00:00\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/GetPagedDisplayGroups?pageNumber={{pageNumber}}&auctionSessionId={{auctionSessionId}}&venueId={{auction_venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"GetPagedDisplayGroups"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "auctionSessionId",
											"value": "{{auctionSessionId}}"
										},
										{
											"key": "venueId",
											"value": "{{auction_venueId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Paged Display Groups - Invalid Request - Non Existing Auction Session Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a702e84e-1b72-45ce-9b53-3f19467603b2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//totalItems has a value",
											"tests[\"Response body includes totalItems entity from JSON data\"] = jsonData.totalItems === 0;",
											"",
											"//pageNumber has a value",
											"tests[\"Response body includes pageNumber entity from JSON data\"] = jsonData.pageNumber === 0;",
											"",
											"//pageSize has a value",
											"tests[\"Response body includes pageSize entity from JSON data\"] = jsonData.pageSize === 0;",
											"",
											"//list has a value",
											"tests[\"Response body includes list entity from JSON data\"] = jsonData.list === null;",
											"",
											"//totalPages has a value",
											"tests[\"Response body includes totalPages entity from JSON data\"] = jsonData.totalPages !== undefined;",
											"",
											"//hasPreviousPage has a value",
											"tests[\"Response body includes hasPreviousPage entity from JSON data\"] = jsonData.hasPreviousPage !== undefined;",
											"",
											"//hasNextPage has a value",
											"tests[\"Response body includes hasNextPage entity from JSON data\"] = jsonData.hasNextPage !== undefined;",
											"",
											"//nextPageNumber has a value",
											"tests[\"Response body includes nextPageNumber entity from JSON data\"] = jsonData.nextPageNumber !== undefined;",
											"",
											"//previousPageNumber has a value",
											"tests[\"Response body includes previousPageNumber entity from JSON data\"] = jsonData.previousPageNumber !== undefined;",
											"",
											"//cancellationReason has a value",
											"tests[\"Response body includes cancellationReason entity from JSON data\"] = jsonData.cancellationReason == \"Invalid parameters provided\";",
											"",
											"//isCancelled has a value",
											"tests[\"Response body includes isCancelled entity from JSON data\"] = jsonData.isCancelled === true;",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "68f51afc-654c-4a0a-90d1-8ac3b2a4f22b",
										"exec": [
											"postman.setEnvironmentVariable(\"pageNumber\", \"2\");",
											"postman.setEnvironmentVariable(\"invalidpageSize\", \"300000000000\");",
											"postman.setEnvironmentVariable(\"currentDate\", \"2018-08-14T00:00:00\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/GetPagedDisplayGroups?pageNumber={{pageNumber}}&pageSize={{pageSize}}&auctionSessionId={{nonexistingauctionSessionId}}&venueId={{auction_venueId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"GetPagedDisplayGroups"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										},
										{
											"key": "auctionSessionId",
											"value": "{{nonexistingauctionSessionId}}"
										},
										{
											"key": "venueId",
											"value": "{{auction_venueId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Display Group",
					"item": [
						{
							"name": "Delete Display Group - Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31e12263-4791-40e8-8a92-c4cc72a3b7ab",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"DisplayGroup Deleted\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{displayGroupId3}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{displayGroupId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Display Group - Invalid Request - Non Existing DisplayGroupId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dcb88619-8bea-47e7-82e7-51160818be12",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"No DisplayGroup was found matching ID \" + postman.getGlobalVariable(\"nonexistingdisplayGroupId\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{nonexistingdisplayGroupId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{nonexistingdisplayGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Display Group - Invalid Request - Non Numeric DisplayGroupId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3cd0cef6-e0d8-480f-b92d-213169ffb9f0",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"nonnumericdisplayGroupId\") + \"' is not valid.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroups/{{nonnumericdisplayGroupId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroups",
										"{{nonnumericdisplayGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Display Group - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e93f177d-9225-4d1c-bc37-6e066ef9be6e",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/DisplayGroup/{{displayGroupId3}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"DisplayGroup",
										"{{displayGroupId3}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Bids",
			"item": [
				{
					"name": "Post Bids",
					"item": [
						{
							"name": "Post Bids - Valid Request - All Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09124a76-8272-4d72-b47f-429651307483",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the Image ID for the other tests",
											"postman.setGlobalVariable(\"bidId\", jsonData.bidId);",
											"",
											"//bidId has a value",
											"tests[\"Response body includes bidId entity from JSON data\"] = jsonData.bidId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"amount\" Entity",
											"tests[\"Response body includes amount entity from JSON data\"] = jsonData.amount == postman.getEnvironmentVariable(\"amount\");",
											"",
											"//Response body contains \"isRejected\" Entity",
											"tests[\"Response body includes isRejected entity from JSON data\"] = jsonData.isRejected == postman.getEnvironmentVariable(\"isRejected\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "63c988c3-9573-4556-8b7e-57201c2c0ebf",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"amount\", 100000);",
											"postman.setEnvironmentVariable(\"isRejected\", 0);",
											"postman.setEnvironmentVariable(\"reserveMet\", 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"lotId\": {{lotId}},\r\n    \"amount\": {{amount}},\r\n    \"isRejected\": {{isRejected}},\r\n    \"reserveMet\": {{reserveMet}}\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Valid Request - Required Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa5ac4f0-74f6-4444-ba89-162be2bc860d",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the Image ID for the other tests",
											"postman.setGlobalVariable(\"bidId2\", jsonData.bidId);",
											"",
											"//bidId has a value",
											"tests[\"Response body includes bidId entity from JSON data\"] = jsonData.bidId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"amount\" Entity",
											"tests[\"Response body includes amount entity from JSON data\"] = jsonData.amount == postman.getEnvironmentVariable(\"amount\");",
											"",
											"//Response body contains \"isRejected\" Entity",
											"tests[\"Response body includes isRejected entity from JSON data\"] = jsonData.isRejected === false;",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet === false;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8886733c-4baf-4069-ab1e-aacede934f66",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"amount\", 900000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"lotId\": {{lotId}},\r\n    \"amount\": {{amount}}\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request - Missing LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd6cc423-12d6-4513-8876-4b3862687aab",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: No Lot was found matching ID 0\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8886733c-4baf-4069-ab1e-aacede934f66",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"amount\", 900000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n\r\n    \"amount\": {{amount}}\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request - Non Existing LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cc6a1c2-60a4-489b-b594-f32d4fb7adeb",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: No Lot was found matching ID \" + postman.getGlobalVariable(\"nonexistinglotId\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8886733c-4baf-4069-ab1e-aacede934f66",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"amount\", 900000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"lotId\": {{nonexistinglotId}},\r\n    \"amount\": {{amount}}\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request - Invalid LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e47f918-6801-4d0b-a7ec-8fb2a2708a52",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \" + postman.getGlobalVariable(\"invalidLotId\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8886733c-4baf-4069-ab1e-aacede934f66",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"amount\", 900000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"lotId\": \"{{invalidLotId}}\",\r\n    \"amount\": {{amount}}\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request - Null LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6fce66e-7119-49e6-a102-57b20b1abbf3",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: No Lot was found matching ID 0\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8886733c-4baf-4069-ab1e-aacede934f66",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"amount\", 900000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"lotId\": \"\",\r\n    \"amount\": {{amount}}\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request - Missing Amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73700778-c554-47d7-872f-8fc108ddc833",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Bid amount is required\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8886733c-4baf-4069-ab1e-aacede934f66",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"amount\", 900000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"lotId\": {{lotId}}\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request - Invalid Amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45cee46c-107c-4309-a2a8-6b33c0f76119",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Bid Amount. Value must be equal to or below 999999999999.99\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3d52c298-518c-4975-98e8-65a6250c320a",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalid_amount\", 90000000000000000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"lotId\": 1,\r\n    \"amount\": {{invalid_amount}}\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request - Non Numeric Amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45cee46c-107c-4309-a2a8-6b33c0f76119",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Bid Amount. Value must be equal to or below 999999999999.99\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ab5cceb-1919-4d46-a70e-08af5fa6ab84",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"nonnumeric_amount\", \"abc123\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"lotId\": 1,\r\n    \"amount\": {{invalid_amount}}\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request - Null Amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73700778-c554-47d7-872f-8fc108ddc833",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Bid amount is required\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dcda1717-d3a3-4c25-ac34-0ccc3d2caf17",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalid_amount\", 90000000000000000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"lotId\": {{lotId}},\r\n    \"amount\": \"\"\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request - Invalid IsReservemet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "958850e8-091d-4b27-a8e8-c48873fc2c4f",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to boolean: \" + postman.getEnvironmentVariable(\"invalid_IsReserveMet\"));",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7329d672-e886-4fa9-b8ad-414ca80189d6",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalid_IsReserveMet\", \"abc123\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"lotId\": {{lotId}},\r\n    \"amount\": {{amount}},\r\n    \"isRejected\": {{isRejected}},\r\n    \"reserveMet\": \"{{invalid_IsReserveMet}}\"\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request - Invalid IsRejected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "817cc011-d413-4c79-88d8-05fb6f567b35",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Input string '\" + postman.getEnvironmentVariable(\"invalid_IsRejected\") + \"' is not a valid number\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a592baa5-cfeb-495b-953c-93d7d843ccac",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalid_IsRejected\", \"123abc\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"lotId\": {{lotId}},\r\n    \"amount\": {{amount}},\r\n    \"isRejected\": {{invalid_IsRejected}},\r\n    \"reserveMet\": {{reserveMet}}\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "705b25e5-06cb-487f-ac1e-32dbe0cbb8c1",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000)"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dcda1717-d3a3-4c25-ac34-0ccc3d2caf17",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalid_amount\", 90000000000000000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"lotId\": {{lotId}},\r\n    \"amount\": \"\"\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bid/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bid",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a28641dd-7015-42fa-a5c2-d33439fdde0e",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dcda1717-d3a3-4c25-ac34-0ccc3d2caf17",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalid_amount\", 90000000000000000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"lotId\": {{lotId}},\r\n    \"amount\": {{amount}}\r\n  "
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78df775f-d9bb-4cab-87ac-5550784833f3",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dcda1717-d3a3-4c25-ac34-0ccc3d2caf17",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalid_amount\", 90000000000000000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request - Empty Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "027caee7-2d38-474d-98f6-f7b0c2c6071c",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Bid amount is required\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dcda1717-d3a3-4c25-ac34-0ccc3d2caf17",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalid_amount\", 90000000000000000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request - Missing Header - Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de817281-8112-4a94-8950-2b4d407e2d84",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dcda1717-d3a3-4c25-ac34-0ccc3d2caf17",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalid_amount\", 90000000000000000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Put Bids",
					"item": [
						{
							"name": "Put Bids - Valid Request - IsReserveMet and IsRejected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59b20168-1c91-4f5e-abb9-1b641c3182b8",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//bidId has a value",
											"tests[\"Response body includes bidId entity from JSON data\"] = jsonData.bidId == postman.getGlobalVariable(\"bidId2\");",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"amount\" Entity",
											"tests[\"Response body includes amount entity from JSON data\"] = jsonData.amount == postman.getEnvironmentVariable(\"amount\");",
											"",
											"//Response body contains \"isRejected\" Entity",
											"tests[\"Response body includes isRejected entity from JSON data\"] = jsonData.isRejected == postman.getEnvironmentVariable(\"isRejected\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "56990131-d423-47fc-8f33-f07c54a393ef",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"isRejected\", 1);",
											"postman.setEnvironmentVariable(\"reserveMet\", 1);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"isRejected\": {{isRejected}},\r\n    \"reserveMet\": {{reserveMet}}\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/{{bidId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										"{{bidId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Bids - Valid Request - Update IsReserveMet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c8b41ef-72b8-477c-9c6a-a3f437848470",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//bidId has a value",
											"tests[\"Response body includes bidId entity from JSON data\"] = jsonData.bidId == postman.getGlobalVariable(\"bidId2\");",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"amount\" Entity",
											"tests[\"Response body includes amount entity from JSON data\"] = jsonData.amount == postman.getEnvironmentVariable(\"amount\");",
											"",
											"//Response body contains \"isRejected\" Entity",
											"tests[\"Response body includes isRejected entity from JSON data\"] = jsonData.isRejected == postman.getEnvironmentVariable(\"isRejected\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet === false;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d62fcc3c-a19a-4aea-bf74-800f119fb951",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"reserveMet\", 0);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"reserveMet\": {{reserveMet}}\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/{{bidId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										"{{bidId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Bids - Valid Request - Update IsRejected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec7e18ee-8833-466f-a171-542406d4b153",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//bidId has a value",
											"tests[\"Response body includes bidId entity from JSON data\"] = jsonData.bidId == postman.getGlobalVariable(\"bidId2\");",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"amount\" Entity",
											"tests[\"Response body includes amount entity from JSON data\"] = jsonData.amount == postman.getEnvironmentVariable(\"amount\");",
											"",
											"//Response body contains \"isRejected\" Entity",
											"tests[\"Response body includes isRejected entity from JSON data\"] = jsonData.isRejected == postman.getEnvironmentVariable(\"isRejected\");",
											"",
											"//Response body contains \"reserveMet\" Entity",
											"tests[\"Response body includes reserveMet entity from JSON data\"] = jsonData.reserveMet == postman.getEnvironmentVariable(\"reserveMet\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5801e9f0-3b8b-4bf2-b84a-248d0b77eea2",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"isRejected\", 0);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\n    \"isRejected\": {{isRejected}}\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/{{bidId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										"{{bidId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Bids - Invalid Request - Non Existing BidId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21891e31-fa9c-41db-a54a-0493612ec362",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not find Bid \" + postman.getGlobalVariable(\"nonexistingBidId\") + \" in System\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ba7067e7-72d1-4128-95a0-e83165d47f30",
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"nonexistingBidId\", 900000);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"isRejected\": {{isRejected}},\r\n    \"reserveMet\": {{reserveMet}}\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/{{nonexistingBidId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										"{{nonexistingBidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Bids - Invalid Request - Invalid BidId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37e59541-ab14-44f5-8f1f-17ef25f3588a",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getEnvironmentVariable(\"invalidBidId\") + \"' is not valid.\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aee09fc3-94de-4f9b-b374-c6282cabc65d",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalidBidId\", \"9a\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"isRejected\": {{isRejected}},\r\n    \"reserveMet\": {{reserveMet}}\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/{{invalidBidId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										"{{invalidBidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Bids - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "705b25e5-06cb-487f-ac1e-32dbe0cbb8c1",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000)"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d75474e-b78c-48c3-acf8-e86f9d6ceea1",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"isRejected\": {{isRejected}},\r\n    \"reserveMet\": {{reserveMet}}\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bid/{{bidId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bid",
										"{{bidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Bids - Invalid Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a28641dd-7015-42fa-a5c2-d33439fdde0e",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81d1eed9-5e22-4b25-a1cc-27e6f6c6f185",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"isRejected\": {{isRejected}},\r\n    \"reserveMet\": {{reserveMet}}\r\n   "
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/{{bidId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										"{{bidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Bids - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78df775f-d9bb-4cab-87ac-5550784833f3",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cd3ca147-d920-46fd-9e58-6f05487b1242",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/{{bidId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										"{{bidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Bids - Invalid Request - Empty Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a09b86a0-6f45-4a1d-9d4d-edb95b3e23f2",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"No valid Bid field updates were received\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "115dfef5-a6db-43db-8454-cf5d7a310705",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/{{bidId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										"{{bidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Bids - Invalid Request - Missing Header - Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de817281-8112-4a94-8950-2b4d407e2d84",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7e51c4df-0334-4525-a63a-2881a515c007",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/{{bidId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										"{{bidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request - Invalid IsReservemet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "958850e8-091d-4b27-a8e8-c48873fc2c4f",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to boolean: \" + postman.getEnvironmentVariable(\"invalid_IsReserveMet\"));",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7329d672-e886-4fa9-b8ad-414ca80189d6",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalid_IsReserveMet\", \"abc123\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"isRejected\": {{isRejected}},\r\n    \"reserveMet\": \"{{invalid_IsReserveMet}}\"\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/{{bidId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										"{{bidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bids - Invalid Request - Invalid IsRejected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "817cc011-d413-4c79-88d8-05fb6f567b35",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Input string '\" + postman.getEnvironmentVariable(\"invalid_IsRejected\") + \"' is not a valid number\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a592baa5-cfeb-495b-953c-93d7d843ccac",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"invalid_IsRejected\", \"123abc\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"isRejected\": {{invalid_IsRejected}},\r\n    \"reserveMet\": {{reserveMet}}\r\n  }"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/{{bidId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										"{{bidId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Bids",
					"item": [
						{
							"name": "Get Bids - Valid Request - LotID with Bids",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca45979f-4edd-4437-a875-6b56be9e89fa",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//console.log(jsonData.length);",
											"pm.test(\"Test for LotId\", () => {",
											"   for (i = 0; i < jsonData.length; i++) {",
											"      tests[\"Response body includes LotId entity from JSON data\"] = jsonData[i].lotId == postman.getGlobalVariable(\"lotId\");",
											"               console.log(jsonData[i].lotId);",
											"   }",
											" ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bids - Valid Request - LotID with No Bids",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af6f402b-61d8-45d2-a23e-592c0b3e6e0f",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(204);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"No Content\");",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/{{lotId_today_3}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										"{{lotId_today_3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bids - Valid Request - Non Existing Lot Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0198ba51-7b02-45b4-a026-26647b21dc48",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(204);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"No Content\");",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/{{nonexistinglotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										"{{nonexistinglotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bids - Valid Request - Invalid Lot Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eebd8f2a-ba84-4069-8ff7-5deab06bee49",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getEnvironmentVariable(\"invalidLotId\") + \"' is not valid.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Bids/{{invalidLotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Bids",
										"{{invalidLotId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Lot Details",
			"item": [
				{
					"name": "Post Lot Details",
					"item": [
						{
							"name": "Post Lot Details - Valid Request - All Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f1fe3f5-bbfd-4a25-8192-525454ff8808",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the lotDetailId for the other tests",
											"postman.setGlobalVariable(\"lotDetailId\", jsonData.lotDetailId);",
											"",
											"//lotDetailId has a value",
											"tests[\"Response body includes lotDetailId entity from JSON data\"] = jsonData.lotDetailId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"key\" Entity",
											"tests[\"Response body includes key entity from JSON data\"] = jsonData.key == postman.getEnvironmentVariable(\"key1\");",
											"",
											"//Response body contains \"value\" Entity",
											"tests[\"Response body includes value entity from JSON data\"] = jsonData.value == postman.getEnvironmentVariable(\"value1\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d5df4c21-a296-4d30-bd2e-82402977573a",
										"exec": [
											"postman.setEnvironmentVariable(\"key2\", \"Agent \" + _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"value1\", \"Barfoot Property Agent\");",
											"",
											"/*",
											"//Assign Primary Agent",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/LotDetails/\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"lotId\": pm.globals.get('lotId_today'),",
											"            \"key\": \"primaryagentname\",",
											"            \"value\": \"Marcus Chong\"",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"lotDetailId1_today_agent\", res.json().lotDetailId);",
											"    }",
											");",
											"",
											"//Assign Primary Branch",
											"pm.sendRequest({",
											"    url: pm.environment.get('environment') + \"/api/v1/LotDetails/\",",
											"    method: \"POST\",",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'authorization': 'Bearer ' + pm.environment.get('id_token')",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"lotId\": pm.globals.get('lotId_today'),",
											"            \"key\": \"primaryagentbranch\",",
											"            \"value\": \"Shortland\"",
											"        })",
											"    } ",
											"    ",
											"    },",
											"    function (err, res) {",
											"        pm.globals.set(\"lotDetailId1_today_branch\", res.json().lotDetailId);",
											"    }",
											");",
											"    ",
											"*/    ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Valid Request - Assign Primary Agent Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f1fe3f5-bbfd-4a25-8192-525454ff8808",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the lotDetailId for the other tests",
											"postman.setGlobalVariable(\"lotDetailId2\", jsonData.lotDetailId);",
											"",
											"//lotDetailId has a value",
											"tests[\"Response body includes lotDetailId entity from JSON data\"] = jsonData.lotDetailId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId_today\");",
											"",
											"//Response body contains \"key\" Entity",
											"tests[\"Response body includes key entity from JSON data\"] = jsonData.key == postman.getEnvironmentVariable(\"key_agent\");",
											"",
											"//Response body contains \"value\" Entity",
											"tests[\"Response body includes value entity from JSON data\"] = jsonData.value == postman.getEnvironmentVariable(\"value_agent\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c33b17c3-ba6d-47e5-928b-8e1ae1bb9fa8",
										"exec": [
											"postman.setEnvironmentVariable(\"key_agent\", \"primaryagentname\");",
											"postman.setEnvironmentVariable(\"value_agent\", \"Nicholas Ball\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId_today}},\r\n  \"key\": \"{{key_agent}}\",\r\n  \"value\": \"{{value_agent}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Valid Request - Assign Primary Agent Branch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f1fe3f5-bbfd-4a25-8192-525454ff8808",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the lotDetailId for the other tests",
											"postman.setGlobalVariable(\"lotDetailId3\", jsonData.lotDetailId);",
											"",
											"//lotDetailId has a value",
											"tests[\"Response body includes lotDetailId entity from JSON data\"] = jsonData.lotDetailId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId_today\");",
											"",
											"//Response body contains \"key\" Entity",
											"tests[\"Response body includes key entity from JSON data\"] = jsonData.key == postman.getEnvironmentVariable(\"key_branch\");",
											"",
											"//Response body contains \"value\" Entity",
											"tests[\"Response body includes value entity from JSON data\"] = jsonData.value == postman.getEnvironmentVariable(\"value_branch\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c33b17c3-ba6d-47e5-928b-8e1ae1bb9fa8",
										"exec": [
											"postman.setEnvironmentVariable(\"key_branch\", \"primaryagentbranch\");",
											"postman.setEnvironmentVariable(\"value_branch\", \"Mt. Wellington\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId_today}},\r\n  \"key\": \"{{key_branch}}\",\r\n  \"value\": \"{{value_branch}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Vauest - Assign Secondary Agent Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f1fe3f5-bbfd-4a25-8192-525454ff8808",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the lotDetailId for the other tests",
											"postman.setGlobalVariable(\"lotDetailId4\", jsonData.lotDetailId);",
											"",
											"//lotDetailId has a value",
											"tests[\"Response body includes lotDetailId entity from JSON data\"] = jsonData.lotDetailId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId_today\");",
											"",
											"//Response body contains \"key\" Entity",
											"tests[\"Response body includes key entity from JSON data\"] = jsonData.key == postman.getEnvironmentVariable(\"key_agent2\");",
											"",
											"//Response body contains \"value\" Entity",
											"tests[\"Response body includes value entity from JSON data\"] = jsonData.value == postman.getEnvironmentVariable(\"value_agent2\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c33b17c3-ba6d-47e5-928b-8e1ae1bb9fa8",
										"exec": [
											"postman.setEnvironmentVariable(\"key_agent2\", \"secondaryagentname\");",
											"postman.setEnvironmentVariable(\"value_agent2\", \"Marcus Chong\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId_today}},\r\n  \"key\": \"{{key_agent2}}\",\r\n  \"value\": \"{{value_agent2}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Vauest - Assign Secondary Agent Branch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f1fe3f5-bbfd-4a25-8192-525454ff8808",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the lotDetailId for the other tests",
											"postman.setGlobalVariable(\"lotDetailId5\", jsonData.lotDetailId);",
											"",
											"//lotDetailId has a value",
											"tests[\"Response body includes lotDetailId entity from JSON data\"] = jsonData.lotDetailId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId_today\");",
											"",
											"//Response body contains \"key\" Entity",
											"tests[\"Response body includes key entity from JSON data\"] = jsonData.key == postman.getEnvironmentVariable(\"key_branch2\");",
											"",
											"//Response body contains \"value\" Entity",
											"tests[\"Response body includes value entity from JSON data\"] = jsonData.value == postman.getEnvironmentVariable(\"value_branch2\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c33b17c3-ba6d-47e5-928b-8e1ae1bb9fa8",
										"exec": [
											"postman.setEnvironmentVariable(\"key_branch2\", \"secondaryagentbranch\");",
											"postman.setEnvironmentVariable(\"value_branch2\", \"Otahuhu\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId_today}},\r\n  \"key\": \"{{key_branch2}}\",\r\n  \"value\": \"{{value_branch2}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Valid Request - Required Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8be51f12-c98a-4f62-a2e1-48ee1441bde2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the lotDetailId for the other tests",
											"postman.setGlobalVariable(\"lotDetailId6\", jsonData.lotDetailId);",
											"",
											"//lotDetailId has a value",
											"tests[\"Response body includes lotDetailId entity from JSON data\"] = jsonData.lotDetailId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"key\" Entity",
											"tests[\"Response body includes key entity from JSON data\"] = jsonData.key == postman.getEnvironmentVariable(\"key2\");",
											"",
											"//Response body contains \"value\" Entity",
											"tests[\"Response body includes value entity from JSON data\"] = jsonData.value === null;",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "db5ca949-b7a4-4f12-b7bc-3cd2d54d6713",
										"exec": [
											"postman.setEnvironmentVariable(\"key2\", \"Agent \" + _.random(1, 10000000));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"key\": \"{{key2}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Valid Request - Nullable Value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "555f6db2-6aa1-40e5-af16-969c01f57caf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the lotDetailId for the other tests",
											"postman.setGlobalVariable(\"lotDetailId7\", jsonData.lotDetailId);",
											"",
											"//lotDetailId has a value",
											"tests[\"Response body includes lotDetailId entity from JSON data\"] = jsonData.lotDetailId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"key\" Entity",
											"tests[\"Response body includes key entity from JSON data\"] = jsonData.key == postman.getEnvironmentVariable(\"key2\");",
											"",
											"//Response body contains \"value\" Entity",
											"tests[\"Response body includes value entity from JSON data\"] = jsonData.value === null;",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "677bbd45-8da9-4939-97e9-b39d98d78f61",
										"exec": [
											"postman.setEnvironmentVariable(\"key2\", \"Agent \" + _.random(1, 10000000));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"key\": \"{{key2}}\",\r\n  \"value\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Invalid Request - Assign Duplicate Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f1fe3f5-bbfd-4a25-8192-525454ff8808",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Lot \") + postman.getGlobalVariable(\"lotId_today\") + (\" already has a property with key primaryagentname\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c33b17c3-ba6d-47e5-928b-8e1ae1bb9fa8",
										"exec": [
											"postman.setEnvironmentVariable(\"key_agent\", \"primaryagentname\");",
											"postman.setEnvironmentVariable(\"value_agent\", \"Nicholas Ball\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId_today}},\r\n  \"key\": \"{{key_agent}}\",\r\n  \"value\": \"{{value_agent}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Invalid Request - Missing LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe466aca-95a8-459f-8bf3-4640f55363b4",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Lot ID and Key are required\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a034af07-db63-43bb-9550-2095a0234ea5",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"key2\", \"Agent 2\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Invalid Request - Null LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe466aca-95a8-459f-8bf3-4640f55363b4",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Lot ID and Key are required\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a034af07-db63-43bb-9550-2095a0234ea5",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"key2\", \"Agent 2\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": \"\",\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Invalid Request - Blank LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1d4b44b-6a34-4e4f-bac1-3d8e28dae181",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer:\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a034af07-db63-43bb-9550-2095a0234ea5",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"key2\", \"Agent 2\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": \"  \",\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Invalid Request - Non Existing LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1cd0c272-732a-44dd-9e8c-1c105a750138",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: No Lot was found matching ID \" + postman.getGlobalVariable(\"nonexistinglotId\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{nonexistinglotId}},\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Invalid Request - Invalid LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5708076b-f3e0-4e1f-aa7c-d131131e8e46",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \" + postman.getGlobalVariable(\"invalidLotId\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": \"{{invalidLotId}}\",\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Invalid Request - Missing Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe466aca-95a8-459f-8bf3-4640f55363b4",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Lot ID and Key are required\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Invalid Request - Null Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe466aca-95a8-459f-8bf3-4640f55363b4",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Lot ID and Key are required\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"key\": \"\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Invalid Request - Blank Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe466aca-95a8-459f-8bf3-4640f55363b4",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Lot ID and Key are required\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"key\": \"  \",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66e2c232-221e-4ddc-a1e8-13efe746912a",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetail/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetail",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c0cfd1d-23dd-4d0d-bc58-93baa62a07f9",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Invalid Request - Missing Header - Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce09358c-9272-44fe-aec6-77f7847f699a",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Lot Details - Invalid Request - Empty Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1117e8ce-268b-4353-b82d-c9b5c06924c2",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Lot ID and Key are required\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Put Lot Details",
					"item": [
						{
							"name": "Put Lot Details - Valid Request - All Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "192f5d74-8f87-454b-b42d-797de7eb8105",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//lotDetailId has a value",
											"tests[\"Response body includes lotDetailId entity from JSON data\"] = jsonData.lotDetailId == postman.getGlobalVariable(\"lotDetailId\");",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId2\");",
											"",
											"//Response body contains \"key\" Entity",
											"tests[\"Response body includes key entity from JSON data\"] = jsonData.key == postman.getEnvironmentVariable(\"key1\");",
											"",
											"//Response body contains \"value\" Entity",
											"tests[\"Response body includes value entity from JSON data\"] = jsonData.value == postman.getEnvironmentVariable(\"value1\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7ec397f-1469-48fa-8807-b53beb139f85",
										"exec": [
											"postman.setEnvironmentVariable(\"key1\", \"Agent \" + _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"value1\", \"Barfoot Agent 2\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId2}},\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{lotDetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{lotDetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot Details - Valid Request - Update LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc672900-ae5c-41eb-ae54-790143353fee",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//lotDetailId has a value",
											"tests[\"Response body includes lotDetailId entity from JSON data\"] = jsonData.lotDetailId == postman.getGlobalVariable(\"lotDetailId\");",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"key\" Entity",
											"tests[\"Response body includes key entity from JSON data\"] = jsonData.key == postman.getEnvironmentVariable(\"key1\");",
											"",
											"//Response body contains \"value\" Entity",
											"tests[\"Response body includes value entity from JSON data\"] = jsonData.value == postman.getEnvironmentVariable(\"value1\");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "63d7083d-bc8b-4635-b271-c51b27e14544",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{lotDetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{lotDetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot Details - Valid Request - Update Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26dd9c1b-41ae-408a-a1b0-014fb5d65276",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//lotDetailId has a value",
											"tests[\"Response body includes lotDetailId entity from JSON data\"] = jsonData.lotDetailId == postman.getGlobalVariable(\"lotDetailId\");",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"key\" Entity",
											"tests[\"Response body includes key entity from JSON data\"] = jsonData.key == postman.getEnvironmentVariable(\"key2\");",
											"",
											"//Response body contains \"value\" Entity",
											"tests[\"Response body includes value entity from JSON data\"] = jsonData.value == postman.getEnvironmentVariable(\"value1\");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4d45c24e-6a32-4692-93ad-42a81dbacd67",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"key2\", \"Agent \" + _.random(1, 10000000));",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"key\": \"{{key2}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{lotDetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{lotDetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot Details - Valid Request - Update Value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2fe4aa2-e58c-4c16-9807-afc88c6ee6e8",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//lotDetailId has a value",
											"tests[\"Response body includes lotDetailId entity from JSON data\"] = jsonData.lotDetailId == postman.getGlobalVariable(\"lotDetailId\");",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"key\" Entity",
											"tests[\"Response body includes key entity from JSON data\"] = jsonData.key == postman.getEnvironmentVariable(\"key2\");",
											"",
											"//Response body contains \"value\" Entity",
											"tests[\"Response body includes value entity from JSON data\"] = jsonData.value == postman.getEnvironmentVariable(\"value1\");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "18a61e66-5330-4af7-be25-72775e4cffb7",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"value1\", \"Barfoot Agent 3\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{lotDetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{lotDetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot Details - Invalid Request - Non Existing LotDetailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "485036d4-cd82-4596-8d9c-bf6edc9819bb",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not find LotDetail \" + postman.getGlobalVariable(\"nonexistinglotDetailId\") + \" in System\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ca910dda-273b-493b-b598-10eff20be124",
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"nonexistinglotDetailId\", \"90000\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{nonexistinglotDetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{nonexistinglotDetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot Details - Invalid Request - Invalid LotDetailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d468cce3-179e-47fa-aaf2-6789b44dc732",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"invalidlotDetailId\") + \"' is not valid.\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "43e19407-43ce-4916-870d-614f8f402f8a",
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"invalidlotDetailId\", \"9a\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{invalidlotDetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{invalidlotDetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot Details - Invalid Request - Null LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78721781-8fa9-414c-8b92-19f99c086b58",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//lotDetailId has a value",
											"tests[\"Response body includes lotDetailId entity from JSON data\"] = jsonData.lotDetailId == postman.getGlobalVariable(\"lotDetailId\");",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"key\" Entity",
											"tests[\"Response body includes key entity from JSON data\"] = jsonData.key == postman.getEnvironmentVariable(\"key2\");",
											"",
											"//Response body contains \"value\" Entity",
											"tests[\"Response body includes value entity from JSON data\"] = jsonData.value == postman.getEnvironmentVariable(\"value1\");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a034af07-db63-43bb-9550-2095a0234ea5",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"key2\", \"Agent 2\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": \"\",\r\n  \"key\": \"{{key2}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{lotDetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{lotDetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot Details - Invalid Request - Blank LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1d4b44b-6a34-4e4f-bac1-3d8e28dae181",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer:\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a034af07-db63-43bb-9550-2095a0234ea5",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"key2\", \"Agent 2\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": \"  \",\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{lotDetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{lotDetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot Details - Invalid Request - Non Existing LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0072cc90-d197-4a2e-bb23-5daff9bcfbc4",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"No Lot was found matching ID \" + postman.getGlobalVariable(\"nonexistinglotId\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{nonexistinglotId}},\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{lotDetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{lotDetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot Details - Invalid Request - Invalid LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5708076b-f3e0-4e1f-aa7c-d131131e8e46",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \" + postman.getGlobalVariable(\"invalidLotId\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": \"{{invalidLotId}}\",\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{lotDetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{lotDetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot Details - Invalid Request - Null Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4fed37f-e21a-40ad-bb87-aa297cf39576",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//lotDetailId has a value",
											"tests[\"Response body includes lotDetailId entity from JSON data\"] = jsonData.lotDetailId == postman.getGlobalVariable(\"lotDetailId\");",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"key\" Entity",
											"tests[\"Response body includes key entity from JSON data\"] = jsonData.key == postman.getEnvironmentVariable(\"key2\");",
											"",
											"//Response body contains \"value\" Entity",
											"tests[\"Response body includes value entity from JSON data\"] = jsonData.value == postman.getEnvironmentVariable(\"value1\");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"key\": \"\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{lotDetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{lotDetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot Details - Invalid Request - Blank Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14e7e8be-ea9e-4bc9-9db3-7a813219466d",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//lotDetailId has a value",
											"tests[\"Response body includes lotDetailId entity from JSON data\"] = jsonData.lotDetailId == postman.getGlobalVariable(\"lotDetailId\");",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"key\" Entity",
											"tests[\"Response body includes key entity from JSON data\"] = jsonData.key == postman.getEnvironmentVariable(\"key2\");",
											"",
											"//Response body contains \"value\" Entity",
											"tests[\"Response body includes value entity from JSON data\"] = jsonData.value == postman.getEnvironmentVariable(\"value1\");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"key\": \"  \",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{lotDetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{lotDetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot Details - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66e2c232-221e-4ddc-a1e8-13efe746912a",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetail/{{lotDetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetail",
										"{{lotDetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot Details - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c0cfd1d-23dd-4d0d-bc58-93baa62a07f9",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{lotDetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{lotDetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot Details - Invalid Request - Missing Header - Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce09358c-9272-44fe-aec6-77f7847f699a",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{lotDetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{lotDetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lot Details - Invalid Request - Empty Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f4f381f-280e-465f-9eb9-7e18e28e94f1",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"No valid LotDetail field updates were received\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd36ef14-6380-4333-acd5-4b54a58bcce5",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{lotDetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{lotDetailId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Lot Details",
					"item": [
						{
							"name": "Get Lot Details - Valid Request - Existing LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "192f5d74-8f87-454b-b42d-797de7eb8105",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//console.log(jsonData.length);",
											"pm.test(\"Test for LotId\", () => {",
											"   for (i = 0; i < jsonData.length; i++) {",
											"      tests[\"Response body includes LotId entity from JSON data\"] = jsonData[i].lotId == postman.getGlobalVariable(\"lotId\");",
											"               console.log(jsonData[i].lotId);",
											"   }",
											" ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7ec397f-1469-48fa-8807-b53beb139f85",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId2}},\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lot Details - Valid Request - LotId with no LotDetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "192f5d74-8f87-454b-b42d-797de7eb8105",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"//Correct Status Code\r",
											"utils.responseStatusCode(204);\r",
											"\r",
											"//Content Type is Present\r",
											"utils.headerElementPresent(\"No Content\");;\r",
											"\r",
											"//Response time is less than 3000ms\r",
											"utils.responseLessThan(3000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7ec397f-1469-48fa-8807-b53beb139f85",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId2}},\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{lotId_today_5}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{lotId_today_5}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lot Details - Valid Request - Non Existing LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "192f5d74-8f87-454b-b42d-797de7eb8105",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"//Correct Status Code\r",
											"utils.responseStatusCode(204);\r",
											"\r",
											"//Content Type is Present\r",
											"utils.headerElementPresent(\"No Content\");;\r",
											"\r",
											"//Response time is less than 3000ms\r",
											"utils.responseLessThan(3000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7ec397f-1469-48fa-8807-b53beb139f85",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId2}},\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{nonexistinglotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{nonexistinglotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lot Details - Invalid Request - Invalid LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "192f5d74-8f87-454b-b42d-797de7eb8105",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getEnvironmentVariable(\"invalidLotId\") + \"' is not valid.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7ec397f-1469-48fa-8807-b53beb139f85",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId2}},\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{invalidLotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{invalidLotId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Lot Details",
					"item": [
						{
							"name": "Delete Lot Details - Valid Request - Existing LotDetailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "192f5d74-8f87-454b-b42d-797de7eb8105",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Lot Detail Deleted\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7ec397f-1469-48fa-8807-b53beb139f85",
										"exec": [
											"postman.setEnvironmentVariable(\"key1\", \"Agent \" + _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"value1\", \"Barfoot Agent 2\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId2}},\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{lotDetailId7}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{lotDetailId7}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Lot Details - Valid Request - Non Existing LotDetailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "192f5d74-8f87-454b-b42d-797de7eb8105",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not find LotDetail \" + postman.getGlobalVariable(\"nonexistinglotdetailId\") + \" in System\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7ec397f-1469-48fa-8807-b53beb139f85",
										"exec": [
											"postman.setGlobalVariable(\"nonexistinglotdetailId\", 90000);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{nonexistinglotdetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{nonexistinglotdetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Lot Details - Invalid Request - Invalid LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "192f5d74-8f87-454b-b42d-797de7eb8105",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"invalidlotdetailId\") + \"' is not valid.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7ec397f-1469-48fa-8807-b53beb139f85",
										"exec": [
											"postman.setGlobalVariable(\"invalidlotdetailId\", \"9a\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId2}},\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetails/{{invalidlotdetailId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetails",
										"{{invalidlotdetailId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Lot Details - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "192f5d74-8f87-454b-b42d-797de7eb8105",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"//Correct Status Code\r",
											"utils.responseStatusCode(404);\r",
											"\r",
											"//Content Type is Present\r",
											"utils.headerElementPresent(\"Not Found\");;\r",
											"\r",
											"//Response time is less than 3000ms\r",
											"utils.responseLessThan(3000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7ec397f-1469-48fa-8807-b53beb139f85",
										"exec": [
											"postman.setGlobalVariable(\"invalidlotdetailId\", \"9a\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId2}},\r\n  \"key\": \"{{key1}}\",\r\n  \"value\": \"{{value1}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/LotDetail/{{lotDetailId7}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"LotDetail",
										"{{lotDetailId7}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Images",
			"item": [
				{
					"name": "Post Image",
					"item": [
						{
							"name": "Post Image - Valid Request - All Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55ba9eac-41fa-49c4-bc75-889a53bacd51",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the Image ID for the other tests",
											"postman.setGlobalVariable(\"imageId\", jsonData.imageId);",
											"",
											"//Image ID has a value",
											"tests[\"Response body includes imageId entity from JSON data\"] = jsonData.imageId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"image_order\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url == postman.getEnvironmentVariable(\"image_URL\");",
											"",
											"//Response body contains \"isDisplayed\" Entity",
											"tests[\"Response body includes isDisplayed entity from JSON data\"] = jsonData.isDisplayed == postman.getEnvironmentVariable(\"isDisplayed\");",
											"console.log(postman.getEnvironmentVariable(\"isDisplayed\"));",
											"console.log(jsonData.isDisplayed);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7e1cb6c5-083b-408c-904e-d291170e77d4",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL\", \"https://media.barfoot.co.nz/ListingPhotos/high/762731.jpg?width=1500&amp;height=1028&amp\");",
											"postman.setEnvironmentVariable(\"isDisplayed\", 1);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\",\r\n   \"isDisplayed\": {{isDisplayed}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image -  Valid Request - Assign another image to the same LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "665ad5a5-2757-4924-bd8e-8fcf6a73282f",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the Image ID for the other tests",
											"postman.setGlobalVariable(\"imageId4\", jsonData.imageId);",
											"",
											"//Image ID has a value",
											"tests[\"Response body includes imageId entity from JSON data\"] = jsonData.imageId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"image_order\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url == postman.getEnvironmentVariable(\"image_URL2\");",
											"",
											"//Response body contains \"isDisplayed\" Entity",
											"tests[\"Response body includes isDisplayed entity from JSON data\"] = jsonData.isDisplayed == postman.getEnvironmentVariable(\"isDisplayed\");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e4b619c1-45fb-4d23-80df-1d2c5d10b516",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL2\", \"https://media.barfoot.co.nz/ListingPhotos/high/762731W.jpg?width=1500&amp;height=1028&amp\");",
											"postman.setEnvironmentVariable(\"isDisplayed\", 1);",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL2}}\",\r\n  \"isDisplayed\": {{isDisplayed}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Valid Request - Order defaults to 0 when null",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01202e30-575d-41e8-be41-bc85a3800306",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the Image ID for the other tests",
											"postman.setGlobalVariable(\"imageId2\", jsonData.imageId);",
											"",
											"//Image ID has a value",
											"tests[\"Response body includes imageId entity from JSON data\"] = jsonData.imageId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId_today_1\");",
											"",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.order === 0;",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url == postman.getEnvironmentVariable(\"image_URL2\");",
											"",
											"//Response body contains \"isDisplayed\" Entity",
											"tests[\"Response body includes isDisplayed entity from JSON data\"] = jsonData.isDisplayed == postman.getEnvironmentVariable(\"isDisplayed\");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4fee48a3-fd2e-4d5b-b01b-09d60b686798",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId_today_1}},\r\n  \"order\": \"\",\r\n  \"url\": \"{{image_URL2}}\",\r\n   \"isDisplayed\": {{isDisplayed}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Valid Request - Order defaults to 0 when missing from request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a61d49e8-1a3e-4ad5-969f-de31375c2b3c",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the Image ID for the other tests",
											"postman.setGlobalVariable(\"imageId3\", jsonData.imageId);",
											"",
											"//Image ID has a value",
											"tests[\"Response body includes imageId entity from JSON data\"] = jsonData.imageId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId_today_2\");",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.order === 0;",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url == postman.getEnvironmentVariable(\"image_URL3\");",
											"",
											"//Response body contains \"isDisplayed\" Entity",
											"tests[\"Response body includes isDisplayed entity from JSON data\"] = jsonData.isDisplayed == postman.getEnvironmentVariable(\"isDisplayed\");",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ebf1eee5-b638-44f4-9b38-c85507f1c5f0",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL3\", \"https://media.barfoot.co.nz/ListingPhotos/high/761202O.jpg?width=1500&height=1028\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId_today_2}},\r\n  \"url\": \"{{image_URL3}}\",\r\n   \"isDisplayed\": {{isDisplayed}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Valid Request - IsDisplayed defaults to true when missing from request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "670aca4f-3f05-466e-99ad-16c068549333",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"//Store the Image ID for the other tests",
											"postman.setGlobalVariable(\"imageId2\", jsonData.imageId);",
											"",
											"//Image ID has a value",
											"tests[\"Response body includes imageId entity from JSON data\"] = jsonData.imageId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId_today_3\");",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"image_order\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url == postman.getEnvironmentVariable(\"image_URL4\");",
											"",
											"//Response body contains \"isDisplayed\" Entity",
											"tests[\"Response body includes isDisplayed entity from JSON data\"] = jsonData.isDisplayed === true;",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9d1b8552-ba83-4d90-a2a4-fbd813ddb461",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL4\", \"https://media.barfoot.co.nz/ListingPhotos/high/761748.jpg?width=1500&amp;height=1028\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId_today_3}},\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL4}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Invalid Request - Missing Required Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b277ab01-73be-485c-ba3a-5c33d800156a",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A Lot ID is required\");",
											"});",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f1135013-3aa6-4cd4-a35b-add24ef63177",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n  \"order\": {{image_order}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Invalid Request - Null LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14950415-e4aa-4b32-b825-1cb7f8f58180",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A Lot ID is required\");",
											"});",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ecb57a21-ce72-415a-bf47-deeb67b44abb",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": \"\",\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Invalid Request - Missing LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2c719b4-e6ac-4997-9c67-738113fd7971",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: A Lot ID is required\");",
											"});",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "afc087b1-fc0e-48e7-bb1a-c3e05b7bdf72",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Invalid Request - Blank LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d50dbe4-4ced-4f50-b6d9-c0a47e76f277",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer:\");",
											"});",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0bf00812-7beb-4777-859a-6ccbac2045e4",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": \"   \",\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Invalid Request - Non Existing LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49d313d4-2b27-4e6c-bac2-d1d8987b7600",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Lot \" + postman.getGlobalVariable(\"nonexistinglotId\") + \" does not exist.\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d154577-07c8-4066-aef6-459a96ac069a",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{nonexistinglotId}},\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Invalid Request - Non Numeric LotID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3d4dc56-c0b9-49e6-bb5c-62092f16aa60",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02198613-d1bf-4584-b3f9-dccf1ae518e7",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": \"{{invalidlotId}\",\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Invalid Request - Null URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d69a2225-19d1-46fe-ab5e-5663ec4359bc",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Image URL is required\");",
											"});",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a106cbd2-bc3e-41a0-bb15-85ffb2bddc73",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"order\": {{image_order}},\r\n  \"url\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Invalid Request - Missing URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7000cd09-87a2-492b-8ec8-7b28f5023d01",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Image URL is required\");",
											"});",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c72beaae-c4f9-40ca-bd42-4ef512f5d778",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"order\": {{image_order}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Invalid Request - Blank URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e53dce3d-da42-44b8-b8c6-c54828063367",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Process has been cancelled: Image URL is required\");",
											"});",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9887a009-8a8b-4947-a34b-06bd263ed783",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"order\": {{image_order}},\r\n  \"url\": \"   \"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc773ca9-cf1c-43e1-9146-60087a87422c",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ec65f65c-b021-45a7-9651-1881de5d97bd",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": \"{{invalidlotId}}\",\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Image",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Image"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df289410-b574-4ea0-ba7d-912fca19100f",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8fbca02c-42a0-4f5b-928d-556901348698",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Invalid Request - Empty Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e018555-8040-4ac5-9d38-be856d6f15d9",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b92c254f-3a0c-41ce-bc0a-3c7ba198f3f6",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Invalid Request  Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2cc07f0-bb4b-447e-93f6-fb93c0b963ed",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8872d55c-1949-46d3-abf6-161c4eee8c77",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\"\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Post Image - Invalid Request  - Missing Header - Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d714fc5-9960-4ec1-bfe8-de02a9b1f866",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faaae8f2-0ea2-406b-8614-0c47cd07486b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL\", \"Venue Suburb 1\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Images",
					"item": [
						{
							"name": "Get Images - Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "913c071a-d338-45d8-a642-526cfd48c96d",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Images",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Images - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d5e19f5-0709-45c4-b3f0-f156fba7d964",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Image",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Images by Lot Id - Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5fa0c839-67be-4a15-8706-fc4b7df92958",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Correct LotId for every image in the search result\", () => {",
											"   for (i = 0; i < jsonData.length-1; i++) {",
											"      tests[\"Response body includes LotId entity from JSON data\"] = jsonData[i].lotId == postman.getGlobalVariable(\"lotId\");",
											"   }",
											"",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{lotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Images by Lot Id - Invalid Request - Non Numeric LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57d41f7c-dbfc-4725-a00f-7420d893bfda",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"invalidLotId\") + \"' is not valid.\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{invalidLotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{invalidLotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Images by Lot Id - Invalid Request - Non Existing LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19f0ae5e-376b-4fd6-bb83-c439c2e92a82",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(204);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"No Content\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{nonexistinglotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{nonexistinglotId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Put Image",
					"item": [
						{
							"name": "Put Image - Valid Request - All Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d685b672-7d91-492a-a595-66a83f6a9620",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//Image ID has a value",
											"tests[\"Response body includes imageId entity from JSON data\"] = jsonData.imageId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId2\");",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"image_order\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url == postman.getEnvironmentVariable(\"image_URL2\");",
											"",
											"//Response body contains \"isDisplayed\" Entity",
											"tests[\"Response body includes isDisplayed entity from JSON data\"] = jsonData.isDisplayed == postman.getEnvironmentVariable(\"isDisplayed\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "95277849-3fb1-49cf-a782-ef911b8cfb36",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId2}},\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL2}}\",\r\n  \"isDisplayed\": {{isDisplayed}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Valid Request - Update Image URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a31b7af0-6e9a-4ee2-837a-aa21dbe6052f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Image ID has a value",
											"tests[\"Response body includes imageId entity from JSON data\"] = jsonData.imageId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId2\");",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"image_order\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url == postman.getEnvironmentVariable(\"image_URL3\");",
											"",
											"//Response body contains \"isDisplayed\" Entity",
											"tests[\"Response body includes isDisplayed entity from JSON data\"] = jsonData.isDisplayed == postman.getEnvironmentVariable(\"isDisplayed\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2f27552-d235-4a20-8b57-da5d6176951a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId2}},\r\n  \"url\": \"{{image_URL3}}\",\r\n   \"isDisplayed\": {{isDisplayed}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Valid Request - Update LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c3039b8-9123-480d-899e-d99d805961a3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Image ID has a value",
											"tests[\"Response body includes imageId entity from JSON data\"] = jsonData.imageId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"image_order\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url == postman.getEnvironmentVariable(\"image_URL3\");",
											"",
											"//Response body contains \"isDisplayed\" Entity",
											"tests[\"Response body includes isDisplayed entity from JSON data\"] = jsonData.isDisplayed == postman.getEnvironmentVariable(\"isDisplayed\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2f27552-d235-4a20-8b57-da5d6176951a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n   \"isDisplayed\": {{isDisplayed}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Valid Request - Update Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb9aab62-f05b-454e-b9fd-63a1b1ac4a44",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Image ID has a value",
											"tests[\"Response body includes imageId entity from JSON data\"] = jsonData.imageId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"image_order\");",
											"",
											"//Response body contains \"isDisplayed\" Entity",
											"tests[\"Response body includes isDisplayed entity from JSON data\"] = jsonData.isDisplayed == postman.getEnvironmentVariable(\"isDisplayed\");",
											"",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url == postman.getEnvironmentVariable(\"image_URL3\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a06efc1-2281-4615-92cc-cd512933a1e4",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"order\": {{image_order}},\r\n    \"isDisplayed\": {{isDisplayed}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Valid Request - Update IsDisplayed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "562b4087-5221-4535-9424-4209463a5d4e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Image ID has a value",
											"tests[\"Response body includes imageId entity from JSON data\"] = jsonData.imageId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId\");",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"image_order\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url == postman.getEnvironmentVariable(\"image_URL3\");",
											"",
											"//Response body contains \"isDisplayed\" Entity",
											"tests[\"Response body includes isDisplayed entity from JSON data\"] = jsonData.isDisplayed == postman.getEnvironmentVariable(\"isDisplayed\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fb8cc254-6b69-4ebe-a848-908f231c413a",
										"exec": [
											"postman.setEnvironmentVariable(\"isDisplayed\", false);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"isDisplayed\": {{isDisplayed}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Valid Request - Null URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0adca85-5f30-4ceb-bd15-1bb2490c622a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Image ID has a value",
											"tests[\"Response body includes imageId entity from JSON data\"] = jsonData.imageId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId_today\");",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"image_order\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url == postman.getEnvironmentVariable(\"image_URL3\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "95649a1f-5a96-4ce7-9664-3da9ef9e4336",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId_today}},\r\n  \"order\": {{image_order}},\r\n  \"url\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Valid Request - Missing URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6b8663e-cd66-4b00-af3a-83adc81cf33a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Image ID has a value",
											"tests[\"Response body includes imageId entity from JSON data\"] = jsonData.imageId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId2\");",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"image_order\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url == postman.getEnvironmentVariable(\"image_URL3\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faaae8f2-0ea2-406b-8614-0c47cd07486b",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL\", \"Venue Suburb 1\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"lotId\": {{lotId2}},\n  \"order\": {{image_order}}\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Invalid Request - Blank URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "460dcf2a-5026-4706-bd7b-8c846c2e019b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//Image ID has a value",
											"tests[\"Response body includes imageId entity from JSON data\"] = jsonData.imageId !== undefined;",
											"",
											"//Response body contains \"LotId\" Entity",
											"tests[\"Response body includes LotId entity from JSON data\"] = jsonData.lotId == postman.getGlobalVariable(\"lotId2\");",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.order == postman.getEnvironmentVariable(\"image_order\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url == postman.getEnvironmentVariable(\"image_URL3\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faaae8f2-0ea2-406b-8614-0c47cd07486b",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL\", \"Venue Suburb 1\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId2}},\r\n  \"order\": {{image_order}},\r\n  \"url\": \"   \"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Invalid Request - Non Numeric ImageId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd8aa592-c5f1-4945-a520-ea9575c6278f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"invalid_imageId\") + \"' is not valid.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "af7d1f9d-edb2-4bd8-a570-00febfc62ebe",
										"exec": [
											"postman.setGlobalVariable(\"invalid_imageId\", \"7aa\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId2}},\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL3}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{invalid_imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{invalid_imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Invalid Request - Non Existing ImageId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01bc9b3e-dd3a-4606-b7b4-f14b589f90a4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not find Image \" + postman.getGlobalVariable(\"nonexisting_imageId\") + \" in System\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eee78554-e8a9-423a-8653-3ec8b995f94d",
										"exec": [
											"postman.setGlobalVariable(\"nonexisting_imageId\", 30000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId2}},\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL3}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{nonexisting_imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{nonexisting_imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Invalid Request - Missing Required Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3779a19-ef5f-4fb4-99df-0ac7a10224be",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A Lot ID is required\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faaae8f2-0ea2-406b-8614-0c47cd07486b",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL\", \"Venue Suburb 1\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"order\": {{image_order}}\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Invalid Request - Null LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a89483b3-7161-4128-b917-566e35cba61e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A Lot ID is required\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faaae8f2-0ea2-406b-8614-0c47cd07486b",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL\", \"Venue Suburb 1\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": \"\",\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Invalid Request - Missing LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55c7fe3d-cc8e-4152-b90f-5efa460301a6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A Lot ID is required\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faaae8f2-0ea2-406b-8614-0c47cd07486b",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL\", \"Venue Suburb 1\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Invalid Request - Blank LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2420014-45e4-4ce9-9795-06697f80d6af",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer:\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faaae8f2-0ea2-406b-8614-0c47cd07486b",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL\", \"Venue Suburb 1\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": \"   \",\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{lotId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Invalid Request - Non Existing LotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cce4f83e-b252-4872-8735-33fcc7051849",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Lot \" + postman.getGlobalVariable(\"nonexistinglotId\") + \" does not exist.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faaae8f2-0ea2-406b-8614-0c47cd07486b",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL\", \"Venue Suburb 1\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{nonexistinglotId}},\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Invalid Request - Non Numeric LotID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "702b566f-26a1-4b27-9822-5ada27d9ac9b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Could not convert string to integer: \");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faaae8f2-0ea2-406b-8614-0c47cd07486b",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL\", \"Venue Suburb 1\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": \"{{invalidlotId}}\",\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f2089f5-b851-4494-9dac-9e9eaa83b2c2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faaae8f2-0ea2-406b-8614-0c47cd07486b",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL\", \"Venue Suburb 1\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": \"{{invalidlotId}}\",\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Image/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Image",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad32b52c-4baf-49c3-939e-1b7354bd34a4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faaae8f2-0ea2-406b-8614-0c47cd07486b",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL\", \"Venue Suburb 1\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{lotId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{lotId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Invalid Request - Empty Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2cc039bd-e6f7-44ab-be65-a14f0bf59e52",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Error Message",
											"pm.test(\"Validate the correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faaae8f2-0ea2-406b-8614-0c47cd07486b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL\", \"Venue Suburb 1\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Invalid Request  Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d005180f-c2e4-4725-a20a-56af42a77d84",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faaae8f2-0ea2-406b-8614-0c47cd07486b",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL\", \"Venue Suburb 1\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\"\r\n"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Put Image - Invalid Request  - Missing Header - Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aae79123-15e4-408a-8b46-4a749b2be36b",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The input was not valid.\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faaae8f2-0ea2-406b-8614-0c47cd07486b",
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"image_order\", _.random(1, 10000000));",
											"postman.setEnvironmentVariable(\"image_URL\", \"Venue Suburb 1\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotId\": {{lotId}},\r\n  \"order\": {{image_order}},\r\n  \"url\": \"{{image_URL}}\"\r\n}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Image",
					"item": [
						{
							"name": "Delete Image - Valid Request - Valid ImageId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8061cb7-9b8d-4d1f-a09a-74bd3ae7e61e",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Response",
											"pm.test(\"Validate the correct response\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Image Deleted\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{imageId4}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{imageId4}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Delete Image - Invalid Request URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d028e69a-b65f-4815-9b11-82b63fcd0052",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Image/{{imageId4}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Image",
										"{{imageId4}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Delete Image - Invalid Request - Non Existing ImageId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83a3edf9-2870-468a-9e2b-efd04fa8008f",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Response",
											"pm.test(\"Validate the correct Error Message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Request. Could not find Image \" + postman.getGlobalVariable(\"nonexisting_imageId\") + \" in System\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{nonexisting_imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{nonexisting_imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						},
						{
							"name": "Delete Image - Invalid Request - Non Numeric ImageId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c6001f2-5d6c-42b3-b5ac-b243a12d9824",
										"type": "text/javascript",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Response",
											"pm.test(\"Validate the correct Error Message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"invalid_imageId\") + \"' is not valid.\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Images/{{invalid_imageId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Images",
										"{{invalid_imageId}}"
									]
								},
								"description": "Get Venue"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
				{
			"name": "Medias",
			"item": [
				{
					"name": "Post Media",
					"item": [
						{
							"name": "Post Media - Valid Request - All Parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title\", \"Test Video Title\");",
											"postman.setEnvironmentVariable(\"filename\", \"Test Video - Automation.mp4\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 30000ms",
											"utils.responseLessThan(30000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the mediaId for the other tests",
											"postman.setGlobalVariable(\"mediaId1\", jsonData.mediaId);",
											"",
											"//mediaId has a value",
											"tests[\"Response body includes mediaId entity from JSON data\"] = jsonData.mediaId !== undefined;",
											"",
											"//Response body contains \"fileName\" Entity",
											"//tests[\"Response body includes fileName entity from JSON data\"] = jsonData.fileName == postman.getEnvironmentVariable(\"filename\");",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.title == postman.getEnvironmentVariable(\"title\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url !== undefined;",
											"",
											"//Response body contains \"data\" Entity",
											"tests[\"Response body includes data entity from JSON data\"] = jsonData.data === null;",
											"",
											"//Response body contains \"createdOn\" Entity",
											"tests[\"Response body includes createdOn entity from JSON data\"] = jsonData.createdOn !== undefined;",
											"",
											"//Validate FileName",
											"pm.test(\"Validate if the fileName includes the Video Name\", function () {",
											"    pm.expect(pm.response.text()).to.include(postman.getEnvironmentVariable(\"filename\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{id_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Data",
											"type": "file",
											"src": "C:\\AuctionsAPIAutomation\\Test Video - Automation.mp4"
										},
										{
											"key": "Title",
											"value": "{{title}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{environment}}/api/v1/Medias",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Media - Valid Request - Upload same video with same filename",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title_updated\", \"Test Video Title_Updated\");",
											"postman.setEnvironmentVariable(\"filename\", \"Test Video - Automation.mp4\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 30000ms",
											"utils.responseLessThan(30000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the mediaId for the other tests",
											"postman.setGlobalVariable(\"mediaId2\", jsonData.mediaId);",
											"",
											"//mediaId has a value",
											"tests[\"Response body includes mediaId entity from JSON data\"] = jsonData.mediaId !== undefined;",
											"",
											"//Response body contains \"fileName\" Entity",
											"tests[\"Response body includes fileName entity from JSON data\"] = jsonData.fileName !== undefined;",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.title == postman.getEnvironmentVariable(\"title_updated\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url !== undefined;",
											"",
											"//Response body contains \"createdOn\" Entity",
											"tests[\"Response body includes createdOn entity from JSON data\"] = jsonData.createdOn !== undefined;",
											"",
											"//Response body contains \"data\" Entity",
											"tests[\"Response body includes data entity from JSON data\"] = jsonData.data === null;",
											"",
											"//Validate FileName",
											"pm.test(\"Validate if the fileName includes the Video Name\", function () {",
											"    pm.expect(pm.response.text()).to.include(postman.getEnvironmentVariable(\"filename\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Data",
											"type": "file",
											"src": "C:\\AuctionsAPIAutomation\\Test Video - Automation.mp4"
										},
										{
											"key": "Title",
											"value": "{{title_updated}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{environment}}/api/v1/Medias",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Media - Valid Request - Upload different video format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title_updated\", \"Test Video Title_Updated\");",
											"postman.setEnvironmentVariable(\"filename\", \"Test Video Different Format.3gpp\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(201);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Created\");;",
											"",
											"//Response time is less than 30000ms",
											"utils.responseLessThan(30000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//Store the mediaId for the other tests",
											"postman.setGlobalVariable(\"mediaId3\", jsonData.mediaId);",
											"",
											"//mediaId has a value",
											"tests[\"Response body includes mediaId entity from JSON data\"] = jsonData.mediaId !== undefined;",
											"",
											"//Response body contains \"fileName\" Entity",
											"tests[\"Response body includes fileName entity from JSON data\"] = jsonData.fileName !== undefined;",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.title == postman.getEnvironmentVariable(\"title_updated\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url !== undefined;",
											"",
											"//Response body contains \"createdOn\" Entity",
											"tests[\"Response body includes createdOn entity from JSON data\"] = jsonData.createdOn !== undefined;",
											"",
											"//Response body contains \"data\" Entity",
											"tests[\"Response body includes data entity from JSON data\"] = jsonData.data === null;",
											"",
											"//Validate FileName",
											"pm.test(\"Validate if the fileName includes the Video Name\", function () {",
											"    pm.expect(pm.response.text()).to.include(postman.getEnvironmentVariable(\"filename\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Data",
											"type": "file",
											"src": "C:\\AuctionsAPIAutomation\\Test Video Different Format.3gpp"
										},
										{
											"key": "Title",
											"value": "{{title_updated}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{environment}}/api/v1/Medias",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Media - Invalid Request - Missing Data and Title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title_updated\", \"Test Video Title_Updated\");",
											"postman.setEnvironmentVariable(\"filename\", \"Test Video - Automation.mp4\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Response",
											"pm.test(\"Validate the correct Error Message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Media data and title are required\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Medias",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Media - Invalid Request - Missing Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title_updated\", \"Test Video Title_Updated\");",
											"postman.setEnvironmentVariable(\"filename\", \"Test Video - Automation.mp4\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 30000ms",
											"utils.responseLessThan(30000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Response",
											"pm.test(\"Validate the correct Error Message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Media data and title are required\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Title",
											"value": "{{title_updated}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{environment}}/api/v1/Medias",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Media - Invalid Request - Empty Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title_updated\", \"Test Video Title_Updated\");",
											"postman.setEnvironmentVariable(\"filename\", \"Test Video - Automation.mp4\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 30000ms",
											"utils.responseLessThan(30000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Response",
											"pm.test(\"Validate the correct Error Message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Media data and title are required\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Title",
											"value": "{{title_updated}}",
											"type": "text"
										},
										{
											"key": "Data",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{environment}}/api/v1/Medias",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Media - Invalid Request - Missing Title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title\", \"Test Video Title\");",
											"postman.setEnvironmentVariable(\"filename\", \"Test Video - Automation.mp4\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 30000ms",
											"utils.responseLessThan(30000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Response",
											"pm.test(\"Validate the correct Error Message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Media data and title are required\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Data",
											"type": "file",
											"src": "C:\\AuctionsAPIAutomation\\Test Video - Automation.mp4"
										}
									]
								},
								"url": {
									"raw": "{{environment}}/api/v1/Medias",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Media - Invalid Request - Empty Title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title\", \"Test Video Title\");",
											"postman.setEnvironmentVariable(\"filename\", \"Test Video - Automation.mp4\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 30000ms",
											"utils.responseLessThan(30000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the correct Response",
											"pm.test(\"Validate the correct Error Message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Media data and title are required\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Data",
											"type": "file",
											"src": "C:\\AuctionsAPIAutomation\\Test Video - Automation.mp4"
										},
										{
											"key": "Title",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{environment}}/api/v1/Medias",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Media - Invalid Request URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title\", \"Test Video Title Updated 2\");",
											"postman.setEnvironmentVariable(\"filename\", \"Test Video - Automation Updated.mp4\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"//Correct Status Code\r",
											"utils.responseStatusCode(404);\r",
											"\r",
											"//Content Type is Present\r",
											"utils.headerElementPresent(\"Not Found\");;\r",
											"\r",
											"//Response time is less than 3000ms\r",
											"utils.responseLessThan(3000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Data",
											"type": "file",
											"src": "C:\\AuctionsAPIAutomation\\Test Video - Automation.mp4"
										},
										{
											"key": "Title",
											"value": "{{title}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{environment}}/api/v1/Media/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Media",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Media - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title\", \"Test Video Title Updated 2\");",
											"postman.setEnvironmentVariable(\"filename\", \"Test Video - Automation Updated.mp4\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"//Correct Status Code\r",
											"utils.responseStatusCode(404);\r",
											"\r",
											"//Content Type is Present\r",
											"utils.headerElementPresent(\"Not Found\");;\r",
											"\r",
											"//Response time is less than 3000ms\r",
											"utils.responseLessThan(3000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Media/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Media",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Media - Invalid Request - Empty Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title\", \"Test Video Title Updated 2\");",
											"postman.setEnvironmentVariable(\"filename\", \"Test Video - Automation Updated.mp4\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"//Correct Status Code\r",
											"utils.responseStatusCode(404);\r",
											"\r",
											"//Content Type is Present\r",
											"utils.headerElementPresent(\"Not Found\");;\r",
											"\r",
											"//Response time is less than 3000ms\r",
											"utils.responseLessThan(3000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Media/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Media",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Media",
					"item": [
						{
							"name": "Get Media - Valid Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Data",
											"type": "file",
											"src": ""
										},
										{
											"key": "Title",
											"value": "{{title}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{environment}}/api/v1/Medias",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Media - Invalid Request URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Data",
											"type": "file",
											"src": ""
										},
										{
											"key": "Title",
											"value": "{{title}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{environment}}/api/v1/Media",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Media"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Put Media",
					"item": [
						{
							"name": "Put Media - Valid Request - All Parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title\", \"Test Video Title Updated 2\");",
											"postman.setEnvironmentVariable(\"filename\", \"Test Video - Automation Updated.mp4\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 30000ms",
											"utils.responseLessThan(30000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//mediaId has a value",
											"tests[\"Response body includes mediaId entity from JSON data\"] = jsonData.mediaId !== undefined;",
											"",
											"//Response body contains \"fileName\" Entity",
											"//tests[\"Response body includes fileName entity from JSON data\"] = jsonData.fileName == postman.getEnvironmentVariable(\"filename\");",
											"",
											"//Response body contains \"title\" Entity",
											"tests[\"Response body includes title entity from JSON data\"] = jsonData.title == postman.getEnvironmentVariable(\"title\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url !== undefined;",
											"",
											"//Response body contains \"data\" Entity",
											"tests[\"Response body includes data entity from JSON data\"] = jsonData.data === null;",
											"",
											"//Response body contains \"createdOn\" Entity",
											"tests[\"Response body includes createdOn entity from JSON data\"] = jsonData.createdOn !== undefined;",
											"",
											"//Validate FileName",
											"pm.test(\"Validate if the fileName includes the Video Name\", function () {",
											"    pm.expect(pm.response.text()).to.include(postman.getEnvironmentVariable(\"filename\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Data",
											"type": "file",
											"src": "C:\\AuctionsAPIAutomation\\Test Video - Automation Updated.mp4"
										},
										{
											"key": "Title",
											"value": "{{title}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{environment}}/api/v1/Medias/{{mediaId1}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias",
										"{{mediaId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Media - Valid Request - Upload same video",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title\", \"Test Video Title Updated 2\");",
											"postman.setEnvironmentVariable(\"filename\", \"Test Video - Automation Updated.mp4\");",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 30000ms",
											"utils.responseLessThan(30000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//mediaId has a value",
											"tests[\"Response body includes mediaId entity from JSON data\"] = jsonData.mediaId !== undefined;",
											"",
											"//Response body contains \"fileName\" Entity",
											"//tests[\"Response body includes fileName entity from JSON data\"] = jsonData.fileName == postman.getEnvironmentVariable(\"filename\");",
											"",
											"//Response body contains \"Order\" Entity",
											"tests[\"Response body includes Order entity from JSON data\"] = jsonData.title == postman.getEnvironmentVariable(\"title\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url !== undefined;",
											"",
											"//Response body contains \"data\" Entity",
											"tests[\"Response body includes data entity from JSON data\"] = jsonData.data === null;",
											"",
											"//Response body contains \"createdOn\" Entity",
											"tests[\"Response body includes createdOn entity from JSON data\"] = jsonData.createdOn !== undefined;",
											"",
											"//Validate FileName",
											"pm.test(\"Validate if the fileName includes the Video Name\", function () {",
											"    pm.expect(pm.response.text()).to.include(postman.getEnvironmentVariable(\"filename\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Data",
											"type": "file",
											"src": "C:\\AuctionsAPIAutomation\\Test Video - Automation Updated.mp4"
										},
										{
											"key": "Title",
											"value": "{{title}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{environment}}/api/v1/Medias/{{mediaId2}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias",
										"{{mediaId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Media - Valid Request - Data Parameter Only",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 30000ms",
											"utils.responseLessThan(30000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//mediaId has a value",
											"tests[\"Response body includes mediaId entity from JSON data\"] = jsonData.mediaId !== undefined;",
											"",
											"//Response body contains \"fileName\" Entity",
											"tests[\"Response body includes fileName entity from JSON data\"] = jsonData.fileName !== undefined;",
											"",
											"//Response body contains \"title\" Entity",
											"tests[\"Response body includes title entity from JSON data\"] = jsonData.title == postman.getEnvironmentVariable(\"title\");",
											"",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url !== undefined;",
											"",
											"//Response body contains \"createdOn\" Entity",
											"tests[\"Response body includes createdOn entity from JSON data\"] = jsonData.createdOn !== undefined;",
											"",
											"//Response body contains \"data\" Entity",
											"tests[\"Response body includes data entity from JSON data\"] = jsonData.data === null;",
											"",
											"//Validate FileName",
											"pm.test(\"Validate if the fileName includes the Video Name\", function () {",
											"    pm.expect(pm.response.text()).to.include(postman.getEnvironmentVariable(\"filename\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Data",
											"type": "file",
											"src": "C:\\AuctionsAPIAutomation\\Test Video - Automation Updated.mp4"
										}
									]
								},
								"url": {
									"raw": "{{environment}}/api/v1/Medias/{{mediaId1}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias",
										"{{mediaId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Media - Valid Request - Title Parameter Only",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title_updated\", \"Test Video Title_Updated\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 30000ms",
											"utils.responseLessThan(30000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//mediaId has a value",
											"tests[\"Response body includes mediaId entity from JSON data\"] = jsonData.mediaId !== undefined;",
											"",
											"//Response body contains \"fileName\" Entity",
											"tests[\"Response body includes fileName entity from JSON data\"] = jsonData.fileName !== undefined;",
											"",
											"//Response body contains \"title\" Entity",
											"tests[\"Response body includes title entity from JSON data\"] = jsonData.title == postman.getEnvironmentVariable(\"title_updated\");",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url !== undefined;",
											"",
											"//Response body contains \"createdOn\" Entity",
											"tests[\"Response body includes createdOn entity from JSON data\"] = jsonData.createdOn !== undefined;",
											"",
											"//Response body contains \"data\" Entity",
											"tests[\"Response body includes data entity from JSON data\"] = jsonData.data === null;",
											"",
											"//Validate FileName",
											"pm.test(\"Validate if the fileName includes the Video Name\", function () {",
											"    pm.expect(pm.response.text()).to.include(postman.getEnvironmentVariable(\"filename\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Title",
											"value": "{{title_updated}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{environment}}/api/v1/Medias/{{mediaId1}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias",
										"{{mediaId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Media - Valid Request - Empty Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 30000ms",
											"utils.responseLessThan(30000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"//mediaId has a value",
											"tests[\"Response body includes mediaId entity from JSON data\"] = jsonData.mediaId !== undefined;",
											"",
											"//Response body contains \"fileName\" Entity",
											"tests[\"Response body includes fileName entity from JSON data\"] = jsonData.fileName !== undefined;",
											"",
											"//Response body contains \"title\" Entity",
											"tests[\"Response body includes title entity from JSON data\"] = jsonData.title == postman.getEnvironmentVariable(\"title_updated\");",
											"//Response body contains \"URL\" Entity",
											"tests[\"Response body includes URL entity from JSON data\"] = jsonData.url !== undefined;",
											"",
											"//Response body contains \"createdOn\" Entity",
											"tests[\"Response body includes createdOn entity from JSON data\"] = jsonData.createdOn !== undefined;",
											"",
											"//Response body contains \"data\" Entity",
											"tests[\"Response body includes data entity from JSON data\"] = jsonData.data === null;",
											"",
											"//Validate FileName",
											"pm.test(\"Validate if the fileName includes the Video Name\", function () {",
											"    pm.expect(pm.response.text()).to.include(postman.getEnvironmentVariable(\"filename\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Medias/{{mediaId1}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias",
										"{{mediaId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Media - Invalid Request URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title\", \"Test Video Title Updated 2\");",
											"postman.setEnvironmentVariable(\"filename\", \"Test Video - Automation Updated.mp4\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"//Correct Status Code\r",
											"utils.responseStatusCode(404);\r",
											"\r",
											"//Content Type is Present\r",
											"utils.headerElementPresent(\"Not Found\");;\r",
											"\r",
											"//Response time is less than 3000ms\r",
											"utils.responseLessThan(3000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Data",
											"type": "file",
											"src": "C:\\AuctionsAPIAutomation\\Test Video - Automation Updated.mp4"
										},
										{
											"key": "Title",
											"value": "{{title}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{environment}}/api/v1/Media/{{mediaId1}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Media",
										"{{mediaId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Media - Invalid Request - Missing Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title\", \"Test Video Title Updated 2\");",
											"postman.setEnvironmentVariable(\"filename\", \"Test Video - Automation Updated.mp4\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"//Correct Status Code\r",
											"utils.responseStatusCode(404);\r",
											"\r",
											"//Content Type is Present\r",
											"utils.headerElementPresent(\"Not Found\");;\r",
											"\r",
											"//Response time is less than 3000ms\r",
											"utils.responseLessThan(3000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/api/v1/Media/{{mediaId1}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Media",
										"{{mediaId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Media - Invalid Request - Empty Request Body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setEnvironmentVariable(\"title\", \"Test Video Title Updated 2\");",
											"postman.setEnvironmentVariable(\"filename\", \"Test Video - Automation Updated.mp4\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"//Correct Status Code\r",
											"utils.responseStatusCode(404);\r",
											"\r",
											"//Content Type is Present\r",
											"utils.headerElementPresent(\"Not Found\");;\r",
											"\r",
											"//Response time is less than 3000ms\r",
											"utils.responseLessThan(3000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{environment}}/api/v1/Media/{{mediaId1}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Media",
										"{{mediaId1}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Media",
					"item": [
						{
							"name": "Delete Media - Valid Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(200);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"OK\");;",
											"",
											"//Response time is less than 30000ms",
											"utils.responseLessThan(30000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate Delete Message",
											"pm.test(\"Validate the Delete Message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Media Deleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Medias/{{mediaId1}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias",
										"{{mediaId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Media - Invalid Request - Non Existing MediaId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setGlobalVariable(\"nonexistingmediaId\", 100000);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the error message",
											"pm.test(\"Validate the error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Failed to delete media\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Medias/{{nonexistingmediaId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias",
										"{{nonexistingmediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Media - Invalid Request - Invalid MediaId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setGlobalVariable(\"invalidmediaId\", \"10abc\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(400);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Bad Request\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											"",
											"//Response has a body",
											"utils.responseHasBody();",
											"",
											"//Validate the values of the response body",
											"pm.test(\"Response Body includes correct Error Message from JSON data\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The value '\" + postman.getGlobalVariable(\"invalidmediaId\") + \"' is not valid.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Medias/{{invalidmediaId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Medias",
										"{{invalidmediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Media - Invalid Request URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9ae5663-96bb-47af-b615-54215b89c101",
										"exec": [
											"postman.setGlobalVariable(\"invalidmediaId\", \"10abc\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"//Correct Status Code",
											"utils.responseStatusCode(404);",
											"",
											"//Content Type is Present",
											"utils.headerElementPresent(\"Not Found\");;",
											"",
											"//Response time is less than 3000ms",
											"utils.responseLessThan(3000);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{id_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{environment}}/api/v1/Media/{{invalidmediaId}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"api",
										"v1",
										"Media",
										"{{invalidmediaId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Teardown",
			"item": [
				{
					"name": "Delete Media",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b9ae5663-96bb-47af-b615-54215b89c101",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{id_token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{environment}}/api/v1/Medias/{{mediaId2}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"api",
								"v1",
								"Medias",
								"{{mediaId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Media",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b9ae5663-96bb-47af-b615-54215b89c101",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ca246f19-9eef-44fe-b998-9992c09d1811",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{id_token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{environment}}/api/v1/Medias/{{mediaId3}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"api",
								"v1",
								"Medias",
								"{{mediaId3}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}