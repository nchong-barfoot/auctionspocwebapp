// <auto-generated />
using System;
using BT.Auctions.API.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BT.Auctions.API.Data.Migrations
{
    [DbContext(typeof(AuctionsContext))]
    [Migration("20181003212908_ChangeBidModifiedOnToBeNullable")]
    partial class ChangeBidModifiedOnToBeNullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BT.Auctions.API.Models.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgentIdentifier")
                        .IsRequired();

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired();

                    b.HasKey("AgentId");

                    b.HasIndex("AgentIdentifier")
                        .IsUnique();

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("BT.Auctions.API.Models.AuctionSession", b =>
                {
                    b.Property<int>("AuctionSessionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuctionSessionAdmin");

                    b.Property<int?>("DisplayGroupId");

                    b.Property<DateTime?>("FinishDate");

                    b.Property<bool>("IsInSession");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime?>("StartDate");

                    b.Property<int?>("VenueId");

                    b.HasKey("AuctionSessionId");

                    b.HasIndex("DisplayGroupId");

                    b.HasIndex("VenueId");

                    b.HasIndex("StartDate", "FinishDate");

                    b.ToTable("AuctionSessions");
                });

            modelBuilder.Entity("BT.Auctions.API.Models.Bid", b =>
                {
                    b.Property<int>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsRejected");

                    b.Property<int>("LotId");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<bool>("ReserveMet");

                    b.HasKey("BidId");

                    b.HasIndex("LotId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("BT.Auctions.API.Models.Display", b =>
                {
                    b.Property<int>("DisplayId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<int>("VenueId");

                    b.HasKey("DisplayId");

                    b.HasIndex("VenueId");

                    b.ToTable("Displays");
                });

            modelBuilder.Entity("BT.Auctions.API.Models.DisplayConfiguration", b =>
                {
                    b.Property<int>("DisplayConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayId");

                    b.Property<string>("DisplayMode")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("PlayAudio");

                    b.Property<bool>("PlayVideo");

                    b.HasKey("DisplayConfigurationId");

                    b.HasIndex("DisplayId");

                    b.ToTable("DisplayConfigurations");
                });

            modelBuilder.Entity("BT.Auctions.API.Models.DisplayGroup", b =>
                {
                    b.Property<int>("DisplayGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("VenueId");

                    b.HasKey("DisplayGroupId");

                    b.HasIndex("VenueId");

                    b.ToTable("DisplayGroups");
                });

            modelBuilder.Entity("BT.Auctions.API.Models.DisplayGroupConfigurations", b =>
                {
                    b.Property<int>("DisplayConfigurationId");

                    b.Property<int>("DisplayGroupId");

                    b.HasKey("DisplayConfigurationId", "DisplayGroupId");

                    b.HasIndex("DisplayGroupId");

                    b.ToTable("DisplayGroupConfigurations");
                });

            modelBuilder.Entity("BT.Auctions.API.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisplayed");

                    b.Property<int>("LotId");

                    b.Property<int>("Order");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("ImageId");

                    b.HasIndex("LotId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("BT.Auctions.API.Models.Lot", b =>
                {
                    b.Property<int>("LotId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int>("AuctionSessionId");

                    b.Property<string>("AuctionStatus")
                        .IsRequired();

                    b.Property<string>("FeatureDescription");

                    b.Property<bool?>("IsPaused");

                    b.Property<bool?>("IsSalePriceHidden");

                    b.Property<int>("ListingId");

                    b.Property<int>("Order");

                    b.Property<bool>("PlusGST");

                    b.Property<DateTime?>("PostponedDateTime");

                    b.Property<bool>("ReserveMet");

                    b.Property<DateTime?>("SoldDate");

                    b.Property<decimal?>("SoldPrice");

                    b.HasKey("LotId");

                    b.HasIndex("AuctionSessionId");

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("BT.Auctions.API.Models.LotAgent", b =>
                {
                    b.Property<int>("AgentId");

                    b.Property<int>("LotId");

                    b.HasKey("AgentId", "LotId");

                    b.HasIndex("LotId");

                    b.ToTable("LotAgent");
                });

            modelBuilder.Entity("BT.Auctions.API.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("OnSite");

                    b.Property<string>("Region")
                        .IsRequired();

                    b.Property<string>("Street")
                        .IsRequired();

                    b.Property<string>("Suburb")
                        .IsRequired();

                    b.HasKey("VenueId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("BT.Auctions.API.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("BT.Auctions.API.Models.AuctionSession", b =>
                {
                    b.HasOne("BT.Auctions.API.Models.DisplayGroup", "DisplayGroup")
                        .WithMany("AuctionSessions")
                        .HasForeignKey("DisplayGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BT.Auctions.API.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId");
                });

            modelBuilder.Entity("BT.Auctions.API.Models.Bid", b =>
                {
                    b.HasOne("BT.Auctions.API.Models.Lot", "Lot")
                        .WithMany("Bids")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BT.Auctions.API.Models.Display", b =>
                {
                    b.HasOne("BT.Auctions.API.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BT.Auctions.API.Models.DisplayConfiguration", b =>
                {
                    b.HasOne("BT.Auctions.API.Models.Display", "Display")
                        .WithMany("DisplayConfigurations")
                        .HasForeignKey("DisplayId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BT.Auctions.API.Models.DisplayGroup", b =>
                {
                    b.HasOne("BT.Auctions.API.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BT.Auctions.API.Models.DisplayGroupConfigurations", b =>
                {
                    b.HasOne("BT.Auctions.API.Models.DisplayConfiguration", "DisplayConfiguration")
                        .WithMany("DisplayGroupConfigurations")
                        .HasForeignKey("DisplayConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BT.Auctions.API.Models.DisplayGroup", "DisplayGroup")
                        .WithMany("DisplayGroupConfigurations")
                        .HasForeignKey("DisplayGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BT.Auctions.API.Models.Image", b =>
                {
                    b.HasOne("BT.Auctions.API.Models.Lot", "Lot")
                        .WithMany("Images")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BT.Auctions.API.Models.Lot", b =>
                {
                    b.HasOne("BT.Auctions.API.Models.AuctionSession", "AuctionSession")
                        .WithMany("Lots")
                        .HasForeignKey("AuctionSessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BT.Auctions.API.Models.LotAgent", b =>
                {
                    b.HasOne("BT.Auctions.API.Models.Agent", "Agent")
                        .WithMany("LotAgents")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BT.Auctions.API.Models.Lot", "Lot")
                        .WithMany("LotAgents")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
